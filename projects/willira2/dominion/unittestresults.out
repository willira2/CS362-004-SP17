Results from running all tests: 
unittest1.c
TEST 1: supplyPos pile is empty
TEST 1 SUCCESS
TEST 2: supplyPos not in game
TEST 2 SUCCESS
TEST 3: toFlag = 0
TEST 3 SUCCESS
TEST 4: toFlag = 1
TEST 4 SUCCESS
TEST 5: toFlag = 2
TEST 5 SUCCESS
gainCard() PASS
Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:85.90% of 78
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
No calls

Function 'shuffle'
Lines executed:94.44% of 18
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:100.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:0.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:33.33% of 24
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 256
Branches executed:0.00% of 181
Taken at least once:0.00% of 181
No calls

Function 'discardCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'gainCard'
Lines executed:100.00% of 15
Branches executed:100.00% of 6
Taken at least once:100.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'playAdventurer'
Lines executed:0.00% of 18
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'playSmithy'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'playVillage'
Lines executed:0.00% of 4
No branches
No calls

Function 'playGreatHall'
Lines executed:0.00% of 4
No branches
No calls

Function 'playSeaHag'
Lines executed:0.00% of 9
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls

File 'dominion.c'
Lines executed:19.04% of 646
Branches executed:17.27% of 417
Taken at least once:14.39% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:// set NOISY_TEST to 0 to remove printfs from output
        -:    9:#define NOISY_TEST 1
        -:   10:
        -:   11:
function compare called 28 returned 100% blocks executed 85%
        -:   12:int compare(const void* a, const void* b) {
       28:   13:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   14:    return 1;
       28:   15:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
       10:   16:    return -1;
       18:   17:  return 0;
       28:   18:}
        -:   19:
function newGame called 0 returned 0% blocks executed 0%
        -:   20:struct gameState* newGame() {
    #####:   21:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   22:  return g;
        -:   23:}
        -:   24:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   25:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   26:		  int k8, int k9, int k10) {
    #####:   27:  int* k = malloc(10 * sizeof(int));
    #####:   28:  k[0] = k1;
    #####:   29:  k[1] = k2;
    #####:   30:  k[2] = k3;
    #####:   31:  k[3] = k4;
    #####:   32:  k[4] = k5;
    #####:   33:  k[5] = k6;
    #####:   34:  k[6] = k7;
    #####:   35:  k[7] = k8;
    #####:   36:  k[8] = k9;
    #####:   37:  k[9] = k10;
    #####:   38:  return k;
        -:   39:}
        -:   40:
function initializeGame called 1 returned 100% blocks executed 87%
        -:   41:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   42:		   struct gameState *state) {
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;			
        -:   47:  //set up random number generator
        1:   48:  SelectStream(1);
        1:   49:  PutSeed((long)randomSeed);
        -:   50:  
        -:   51:  //check number of players
        2:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   53:    {
    #####:   54:      return -1;
        -:   55:    }
        -:   56:
        -:   57:  //set number of players
        1:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
       22:   61:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   62:    {
      220:   63:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   64:        {
      190:   65:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   66:	    {
    #####:   67:	      return -1;
        -:   68:	    }
      100:   69:        }
       10:   70:    }
        -:   71:
        -:   72:
        -:   73:  //initialize supply
        -:   74:  ///////////////////////////////
        -:   75:
        -:   76:  //set number of Curse cards
        1:   77:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 10;
        1:   80:    }
    #####:   81:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 20;
    #####:   84:    }
        -:   85:  else
        -:   86:    {
    #####:   87:      state->supplyCount[curse] = 30;
        -:   88:    }
        -:   89:
        -:   90:  //set number of Victory cards
        1:   91:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   92:    {
        1:   93:      state->supplyCount[estate] = 8;
        1:   94:      state->supplyCount[duchy] = 8;
        1:   95:      state->supplyCount[province] = 8;
        1:   96:    }
        -:   97:  else
        -:   98:    {
    #####:   99:      state->supplyCount[estate] = 12;
    #####:  100:      state->supplyCount[duchy] = 12;
    #####:  101:      state->supplyCount[province] = 12;
        -:  102:    }
        -:  103:
        -:  104:  //set number of Treasure cards
        1:  105:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  106:  state->supplyCount[silver] = 40;
        1:  107:  state->supplyCount[gold] = 30;
        -:  108:
        -:  109:  //set number of Kingdom cards
       42:  110:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  111:    {
      330:  112:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  113:    	{
      155:  114:    	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  115:    	    {
        -:  116:    	      //check if card is a 'Victory' Kingdom card
       19:  117:    	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens){
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        2:  118:          		  if (numPlayers == 2){ 
branch  0 taken 100%
branch  1 taken 0%
        2:  119:          		    state->supplyCount[i] = 8; 
        2:  120:          		  }
    #####:  121:          		  else{ state->supplyCount[i] = 12; }
        2:  122:    		      }
        -:  123:    	      
        -:  124:            else{
        8:  125:        		  state->supplyCount[i] = 10;
        -:  126:        		}
       10:  127:    	      break;
        -:  128:  	       }
        -:  129:    	  else    //card is not in the set choosen for the game
        -:  130:    	    {
      145:  131:    	      state->supplyCount[i] = -1;
        -:  132:    	    }
      145:  133:  	}
        -:  134:
       20:  135:    }
        -:  136:
        -:  137:  ////////////////////////
        -:  138:  //supply intilization complete
        -:  139:
        -:  140:  //set player decks
        6:  141:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  142:    {
        2:  143:      state->deckCount[i] = 0;
       16:  144:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  145:	{
        6:  146:	  state->deck[i][j] = estate;
        6:  147:	  state->deckCount[i]++;
        6:  148:	}
       32:  149:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  150:	{
       14:  151:	  state->deck[i][j] = copper;
       14:  152:	  state->deckCount[i]++;		
       14:  153:	}
        2:  154:    }
        -:  155:
        -:  156:  //shuffle player decks
        6:  157:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  158:    {
        2:  159:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  160:	{
    #####:  161:	  return -1;
        -:  162:	}
        2:  163:    }
        -:  164:
        -:  165:  //draw player hands
        6:  166:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  167:    {  
        -:  168:      //initialize hand size to zero
        2:  169:      state->handCount[i] = 0;
        2:  170:      state->discardCount[i] = 0;
        -:  171:      //draw 5 cards
        -:  172:      // for (j = 0; j < 5; j++)
        -:  173:      //	{
        -:  174:      //	  drawCard(i, state);
        -:  175:      //	}
        2:  176:    }
        -:  177:  
        -:  178:  //set embargo tokens to 0 for all supply piles
       56:  179:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  180:    {
       27:  181:      state->embargoTokens[i] = 0;
       27:  182:    }
        -:  183:
        -:  184:  //initialize first player's turn
        1:  185:  state->outpostPlayed = 0;
        1:  186:  state->phase = 0;
        1:  187:  state->numActions = 1;
        1:  188:  state->numBuys = 1;
        1:  189:  state->playedCardCount = 0;
        1:  190:  state->whoseTurn = 0;
        1:  191:  state->handCount[state->whoseTurn] = 0;
        -:  192:  //int it; move to top
        -:  193:
        -:  194:  //Moved draw cards to here, only drawing at the start of a turn
       12:  195:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
        5:  196:    drawCard(state->whoseTurn, state);
        5:  197:  }
        -:  198:
        1:  199:  updateCoins(state->whoseTurn, state, 0);
        -:  200:
        1:  201:  return 0;
        1:  202:}
        -:  203:
function shuffle called 2 returned 100% blocks executed 93%
        -:  204:int shuffle(int player, struct gameState *state) {
        -:  205: 
        -:  206:
        -:  207:  int newDeck[MAX_DECK];
        2:  208:  int newDeckPos = 0;
        -:  209:  int card;
        -:  210:  int i;
        -:  211:
        2:  212:  if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  213:    return -1;
        2:  214:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  215:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  216:
       44:  217:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
       20:  218:    card = floor(Random() * state->deckCount[player]);
       20:  219:    newDeck[newDeckPos] = state->deck[player][card];
       20:  220:    newDeckPos++;
      140:  221:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
       50:  222:      state->deck[player][i] = state->deck[player][i+1];
       50:  223:    }
       20:  224:    state->deckCount[player]--;
        -:  225:  }
       44:  226:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
       20:  227:    state->deck[player][i] = newDeck[i];
       20:  228:    state->deckCount[player]++;
       20:  229:  }
        -:  230:
        2:  231:  return 0;
        2:  232:}
        -:  233:
function playCard called 0 returned 0% blocks executed 0%
        -:  234:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  235:{	
        -:  236:  int card;
    #####:  237:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  238:
        -:  239:  //check if it is the right phase
    #####:  240:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  241:    {
    #####:  242:      return -1;
        -:  243:    }
        -:  244:	
        -:  245:  //check if player has enough actions
    #####:  246:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  247:    {
    #####:  248:      return -1;
        -:  249:    }
        -:  250:	
        -:  251:  //get card played
    #####:  252:  card = handCard(handPos, state);
        -:  253:	
        -:  254:  //check if selected card is an action
    #####:  255:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  256:    {
    #####:  257:      return -1;
        -:  258:    }
        -:  259:	
        -:  260:  //play card
    #####:  261:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  262:    {
    #####:  263:      return -1;
        -:  264:    }
        -:  265:	
        -:  266:  //reduce number of actions
    #####:  267:  state->numActions--;
        -:  268:
        -:  269:  //update coins (Treasure cards may be added with card draws)
    #####:  270:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  271:	
    #####:  272:  return 0;
    #####:  273:}
        -:  274:
function buyCard called 0 returned 0% blocks executed 0%
        -:  275:int buyCard(int supplyPos, struct gameState *state) {
        -:  276:  int who;
        -:  277:  if (DEBUG){
        -:  278:    printf("Entering buyCard...\n");
        -:  279:  }
        -:  280:
        -:  281:  // I don't know what to do about the phase thing.
        -:  282:
    #####:  283:  who = state->whoseTurn;
        -:  284:
    #####:  285:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  286:    if (DEBUG)
        -:  287:      printf("You do not have any buys left\n");
    #####:  288:    return -1;
    #####:  289:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  290:    if (DEBUG)
        -:  291:      printf("There are not any of that type of card left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  294:    if (DEBUG) 
        -:  295:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  296:    return -1;
        -:  297:  } else {
    #####:  298:    state->phase=1;
        -:  299:    //state->supplyCount[supplyPos]--;
    #####:  300:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  301:  
    #####:  302:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  303:    state->numBuys--;
        -:  304:    if (DEBUG)
        -:  305:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  306:  }
        -:  307:
        -:  308:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  309:  //state->discardCount[who]++;
        -:  310:    
    #####:  311:  return 0;
    #####:  312:}
        -:  313:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  314:int numHandCards(struct gameState *state) {
    #####:  315:  return state->handCount[ whoseTurn(state) ];
        -:  316:}
        -:  317:
function handCard called 0 returned 0% blocks executed 0%
        -:  318:int handCard(int handPos, struct gameState *state) {
    #####:  319:  int currentPlayer = whoseTurn(state);
    #####:  320:  return state->hand[currentPlayer][handPos];
        -:  321:}
        -:  322:
function supplyCount called 5 returned 100% blocks executed 100%
        -:  323:int supplyCount(int card, struct gameState *state) {
        5:  324:  return state->supplyCount[card];
        -:  325:}
        -:  326:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  327:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  328:  int i;
    #####:  329:  int count = 0;
        -:  330:
    #####:  331:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  332:    {
    #####:  333:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  334:    }
        -:  335:
    #####:  336:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  337:    {
    #####:  338:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  339:    }
        -:  340:
    #####:  341:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  342:    {
    #####:  343:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  344:    }
        -:  345:
    #####:  346:  return count;
        -:  347:}
        -:  348:
function whoseTurn called 0 returned 0% blocks executed 0%
        -:  349:int whoseTurn(struct gameState *state) {
    #####:  350:  return state->whoseTurn;
        -:  351:}
        -:  352:
function endTurn called 0 returned 0% blocks executed 0%
        -:  353:int endTurn(struct gameState *state) {
        -:  354:  int k;
        -:  355:  int i;
    #####:  356:  int currentPlayer = whoseTurn(state);
        -:  357:  
        -:  358:  //Discard hand
    #####:  359:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  360:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  361:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  362:  }
    #####:  363:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  364:    
        -:  365:  //Code for determining the player
    #####:  366:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  367:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  368:  }
        -:  369:  else{
    #####:  370:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  371:  }
        -:  372:
    #####:  373:  state->outpostPlayed = 0;
    #####:  374:  state->phase = 0;
    #####:  375:  state->numActions = 1;
    #####:  376:  state->coins = 0;
    #####:  377:  state->numBuys = 1;
    #####:  378:  state->playedCardCount = 0;
    #####:  379:  state->handCount[state->whoseTurn] = 0;
        -:  380:
        -:  381:  //int k; move to top
        -:  382:  //Next player draws hand
    #####:  383:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  384:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  385:  }
        -:  386:
        -:  387:  //Update money
    #####:  388:  updateCoins(state->whoseTurn, state , 0);
        -:  389:
    #####:  390:  return 0;
        -:  391:}
        -:  392:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  393:int isGameOver(struct gameState *state) {
        -:  394:  int i;
        -:  395:  int j;
        -:  396:	
        -:  397:  //if stack of Province cards is empty, the game ends
    #####:  398:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  399:    {
    #####:  400:      return 1;
        -:  401:    }
        -:  402:
        -:  403:  //if three supply piles are at 0, the game ends
    #####:  404:  j = 0;
    #####:  405:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  406:    {
    #####:  407:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  408:	{
    #####:  409:	  j++;
    #####:  410:	}
    #####:  411:    }
    #####:  412:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  413:    {
    #####:  414:      return 1;
        -:  415:    }
        -:  416:
    #####:  417:  return 0;
    #####:  418:}
        -:  419:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  420:int scoreFor (int player, struct gameState *state) {
        -:  421:
        -:  422:  int i;
    #####:  423:  int score = 0;
        -:  424:  //score from hand
    #####:  425:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  426:    {
    #####:  427:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  433:    }
        -:  434:
        -:  435:  //score from discard
    #####:  436:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  437:    {
    #####:  438:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  444:    }
        -:  445:
        -:  446:  //score from deck
    #####:  447:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  448:    {
    #####:  449:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  455:    }
        -:  456:
    #####:  457:  return score;
        -:  458:}
        -:  459:
function getWinners called 0 returned 0% blocks executed 0%
        -:  460:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  461:  int i;	
        -:  462:  int j;
        -:  463:  int highScore;
        -:  464:  int currentPlayer;
        -:  465:
        -:  466:  //get score for each player
    #####:  467:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  468:    {
        -:  469:      //set unused player scores to -9999
    #####:  470:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  471:	{
    #####:  472:	  players[i] = -9999;
    #####:  473:	}
        -:  474:      else
        -:  475:	{
    #####:  476:	  players[i] = scoreFor (i, state);
        -:  477:	}
    #####:  478:    }
        -:  479:
        -:  480:  //find highest score
    #####:  481:  j = 0;
    #####:  482:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  483:    {
    #####:  484:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  485:	{
    #####:  486:	  j = i;
    #####:  487:	}
    #####:  488:    }
    #####:  489:  highScore = players[j];
        -:  490:
        -:  491:  //add 1 to players who had less turns
    #####:  492:  currentPlayer = whoseTurn(state);
    #####:  493:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  494:    {
    #####:  495:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  496:	{
    #####:  497:	  players[i]++;
    #####:  498:	}
    #####:  499:    }
        -:  500:
        -:  501:  //find new highest score
    #####:  502:  j = 0;
    #####:  503:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  504:    {
    #####:  505:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  506:	{
    #####:  507:	  j = i;
    #####:  508:	}
    #####:  509:    }
    #####:  510:  highScore = players[j];
        -:  511:
        -:  512:  //set winners in array to 1 and rest to 0
    #####:  513:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  514:    {
    #####:  515:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  516:	{
    #####:  517:	  players[i] = 1;
    #####:  518:	}
        -:  519:      else
        -:  520:	{
    #####:  521:	  players[i] = 0;
        -:  522:	}
    #####:  523:    }
        -:  524:
    #####:  525:  return 0;
        -:  526:}
        -:  527:
function drawCard called 5 returned 100% blocks executed 41%
        -:  528:int drawCard(int player, struct gameState *state)
        -:  529:{	
        -:  530:  int count;
        -:  531:  int deckCounter;
        5:  532:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0%
branch  1 taken 100%
        -:  533:    
        -:  534:    //Step 1 Shuffle the discard pile back into a deck
        -:  535:    int i;
        -:  536:    //Move discard to deck
    #####:  537:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  538:      state->deck[player][i] = state->discard[player][i];
    #####:  539:      state->discard[player][i] = -1;
    #####:  540:    }
        -:  541:
    #####:  542:    state->deckCount[player] = state->discardCount[player];
    #####:  543:    state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:    //Shufffle the deck
    #####:  546:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  547:   
        -:  548:    if (DEBUG){//Debug statements
        -:  549:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:    }
        -:  551:    
    #####:  552:    state->discardCount[player] = 0;
        -:  553:
        -:  554:    //Step 2 Draw Card
    #####:  555:    count = state->handCount[player];//Get current player's hand count
        -:  556:    
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Current hand count: %d\n", count);
        -:  559:    }
        -:  560:    
    #####:  561:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
    #####:  563:    if (deckCounter == 0){
branch  0 never executed
branch  1 never executed
    #####:  564:      return -1;
        -:  565:    }
        -:  566:
    #####:  567:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  568:    state->deckCount[player]--;
    #####:  569:    state->handCount[player]++;//Increment hand count
    #####:  570:  }
        -:  571:
        -:  572:  else{
        5:  573:    int count = state->handCount[player];//Get current hand count for player
        -:  574:    int deckCounter;
        -:  575:    if (DEBUG){//Debug statements
        -:  576:      printf("Current hand count: %d\n", count);
        -:  577:    }
        -:  578:
        5:  579:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  581:    state->deckCount[player]--;
        5:  582:    state->handCount[player]++;//Increment hand count
        -:  583:  }
        -:  584:
        5:  585:  return 0;
        5:  586:}
        -:  587:
function getCost called 0 returned 0% blocks executed 0%
        -:  588:int getCost(int cardNumber)
        -:  589:{
    #####:  590:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  591:    {
        -:  592:    case curse:
    #####:  593:      return 0;
        -:  594:    case estate:
    #####:  595:      return 2;
        -:  596:    case duchy:
    #####:  597:      return 5;
        -:  598:    case province:
    #####:  599:      return 8;
        -:  600:    case copper:
    #####:  601:      return 0;
        -:  602:    case silver:
    #####:  603:      return 3;
        -:  604:    case gold:
    #####:  605:      return 6;
        -:  606:    case adventurer:
    #####:  607:      return 6;
        -:  608:    case council_room:
    #####:  609:      return 5;
        -:  610:    case feast:
    #####:  611:      return 4;
        -:  612:    case gardens:
    #####:  613:      return 4;
        -:  614:    case mine:
    #####:  615:      return 5;
        -:  616:    case remodel:
    #####:  617:      return 4;
        -:  618:    case smithy:
    #####:  619:      return 4;
        -:  620:    case village:
    #####:  621:      return 3;
        -:  622:    case baron:
    #####:  623:      return 4;
        -:  624:    case great_hall:
    #####:  625:      return 3;
        -:  626:    case minion:
    #####:  627:      return 5;
        -:  628:    case steward:
    #####:  629:      return 3;
        -:  630:    case tribute:
    #####:  631:      return 5;
        -:  632:    case ambassador:
    #####:  633:      return 3;
        -:  634:    case cutpurse:
    #####:  635:      return 4;
        -:  636:    case embargo: 
    #####:  637:      return 2;
        -:  638:    case outpost:
    #####:  639:      return 5;
        -:  640:    case salvager:
    #####:  641:      return 4;
        -:  642:    case sea_hag:
    #####:  643:      return 4;
        -:  644:    case treasure_map:
    #####:  645:      return 4;
        -:  646:    }
        -:  647:	
    #####:  648:  return -1;
    #####:  649:}
        -:  650:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  651:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  652:{
        -:  653:  int i;
        -:  654:  int j;
        -:  655:  int k;
        -:  656:  int x;
        -:  657:  int index;
    #####:  658:  int currentPlayer = whoseTurn(state);
    #####:  659:  int nextPlayer = currentPlayer + 1;
        -:  660:
    #####:  661:  int tributeRevealedCards[2] = {-1, -1};
        -:  662:  int temphand[MAX_HAND];// moved above the if statement
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  664:    nextPlayer = 0;
    #####:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:      return playAdventurer(state, currentPlayer);
        -:  673:
        -:  674:      /*while(drawntreasure<2){
        -:  675:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  676:	  shuffle(currentPlayer, state);
        -:  677:	}
        -:  678:	drawCard(currentPlayer, state);
        -:  679:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  680:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  681:	  drawntreasure++;
        -:  682:	else{
        -:  683:	  temphand[z]=cardDrawn;
        -:  684:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  685:	  z++;
        -:  686:	}
        -:  687:      }
        -:  688:      while(z-1>=0){
        -:  689:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  690:	z=z-1;
        -:  691:      }
        -:  692:      return 0;*/
        -:  693:			
        -:  694:    case council_room:
        -:  695:      //+4 Cards
    #####:  696:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  697:	{
    #####:  698:	  drawCard(currentPlayer, state);
    #####:  699:	}
        -:  700:			
        -:  701:      //+1 Buy
    #####:  702:      state->numBuys++;
        -:  703:			
        -:  704:      //Each other player draws a card
    #####:  705:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  706:	{
    #####:  707:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  708:	    {
    #####:  709:	      drawCard(i, state);
    #####:  710:	    }
    #####:  711:	}
        -:  712:			
        -:  713:      //put played card in played card pile
    #####:  714:      discardCard(handPos, currentPlayer, state, 0);
        -:  715:			
    #####:  716:      return 0;
        -:  717:			
        -:  718:    case feast:
        -:  719:      //gain card with cost up to 5
        -:  720:      //Backup hand
    #####:  721:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  722:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  723:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  724:      }
        -:  725:      //Backup hand
        -:  726:
        -:  727:      //Update Coins for Buy
    #####:  728:      updateCoins(currentPlayer, state, 5);
    #####:  729:      x = 1;//Condition to loop on
    #####:  730:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  731:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  732:	  if (DEBUG)
        -:  733:	    printf("None of that card left, sorry!\n");
        -:  734:
        -:  735:	  if (DEBUG){
        -:  736:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  737:	  }
    #####:  738:	}
    #####:  739:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  740:	  printf("That card is too expensive!\n");
        -:  741:
        -:  742:	  if (DEBUG){
        -:  743:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  744:	  }
    #####:  745:	}
        -:  746:	else{
        -:  747:
        -:  748:	  if (DEBUG){
        -:  749:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  750:	  }
        -:  751:
    #####:  752:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  753:	  x = 0;//No more buying cards
        -:  754:
        -:  755:	  if (DEBUG){
        -:  756:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  757:	  }
        -:  758:
        -:  759:	}
        -:  760:      }     
        -:  761:
        -:  762:      //Reset Hand
    #####:  763:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  764:	state->hand[currentPlayer][i] = temphand[i];
    #####:  765:	temphand[i] = -1;
    #####:  766:      }
        -:  767:      //Reset Hand
        -:  768:      			
    #####:  769:      return 0;
        -:  770:			
        -:  771:    case gardens:
    #####:  772:      return -1;
        -:  773:			
        -:  774:    case mine:
    #####:  775:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  776:
    #####:  777:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  778:	{
    #####:  779:	  return -1;
        -:  780:	}
        -:  781:		
    #####:  782:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:
    #####:  787:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      gainCard(choice2, state, 2, currentPlayer);
        -:  793:
        -:  794:      //discard card from hand
    #####:  795:      discardCard(handPos, currentPlayer, state, 0);
        -:  796:
        -:  797:      //discard trashed card
    #####:  798:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  799:	{
    #####:  800:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  801:	    {
    #####:  802:	      discardCard(i, currentPlayer, state, 0);			
    #####:  803:	      break;
        -:  804:	    }
    #####:  805:	}
        -:  806:			
    #####:  807:      return 0;
        -:  808:			
        -:  809:    case remodel:
    #####:  810:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  811:
    #####:  812:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  813:	{
    #####:  814:	  return -1;
        -:  815:	}
        -:  816:
    #####:  817:      gainCard(choice2, state, 0, currentPlayer);
        -:  818:
        -:  819:      //discard card from hand
    #####:  820:      discardCard(handPos, currentPlayer, state, 0);
        -:  821:
        -:  822:      //discard trashed card
    #####:  823:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  824:	{
    #####:  825:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  826:	    {
    #####:  827:	      discardCard(i, currentPlayer, state, 0);			
    #####:  828:	      break;
        -:  829:	    }
    #####:  830:	}
        -:  831:
        -:  832:
    #####:  833:      return 0;
        -:  834:		
        -:  835:    case smithy:
    #####:  836:      return playSmithy(currentPlayer, state, handPos);
        -:  837:      /*//+3 Cards
        -:  838:      for (i = 0; i < 3; i++)
        -:  839:	{
        -:  840:	  drawCard(currentPlayer, state);
        -:  841:	}
        -:  842:			
        -:  843:      //discard card from hand
        -:  844:      discardCard(handPos, currentPlayer, state, 0);
        -:  845:      return 0;*/
        -:  846:		
        -:  847:    case village:
    #####:  848:      return playVillage(currentPlayer, state, handPos);
        -:  849:      /*//+1 Card
        -:  850:      drawCard(currentPlayer, state);
        -:  851:			
        -:  852:      //+2 Actions
        -:  853:      state->numActions = state->numActions + 2;
        -:  854:			
        -:  855:      //discard played card from hand
        -:  856:      discardCard(handPos, currentPlayer, state, 0);
        -:  857:      return 0;*/
        -:  858:		
        -:  859:    case baron:
    #####:  860:      state->numBuys++;//Increase buys by 1!
    #####:  861:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  862:	int p = 0;//Iterator for hand!
    #####:  863:	int card_not_discarded = 1;//Flag for discard set!
    #####:  864:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  865:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  866:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  867:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  868:	    state->discardCount[currentPlayer]++;
    #####:  869:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  870:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  871:	    }
    #####:  872:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  873:	    state->handCount[currentPlayer]--;
    #####:  874:	    card_not_discarded = 0;//Exit the loop
    #####:  875:	  }
    #####:  876:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  877:	    if(DEBUG) {
        -:  878:	      printf("No estate cards in your hand, invalid choice\n");
        -:  879:	      printf("Must gain an estate if there are any\n");
        -:  880:	    }
    #####:  881:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  882:	      gainCard(estate, state, 0, currentPlayer);
    #####:  883:	      state->supplyCount[estate]--;//Decrement estates
    #####:  884:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  885:		isGameOver(state);
    #####:  886:	      }
    #####:  887:	    }
    #####:  888:	    card_not_discarded = 0;//Exit the loop
    #####:  889:	  }
        -:  890:			    
        -:  891:	  else{
    #####:  892:	    p++;//Next card
        -:  893:	  }
        -:  894:	}
    #####:  895:      }
        -:  896:			    
        -:  897:      else{
    #####:  898:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  899:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  900:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  901:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  902:	    isGameOver(state);
    #####:  903:	  }
    #####:  904:	}
        -:  905:      }
        -:  906:	    
        -:  907:      
    #####:  908:      return 0;
        -:  909:		
        -:  910:    case great_hall:
    #####:  911:      return playGreatHall(currentPlayer, state, handPos);
        -:  912:      /*//+1 Card
        -:  913:      drawCard(currentPlayer, state);
        -:  914:			
        -:  915:      //+1 Actions
        -:  916:      state->numActions++;
        -:  917:			
        -:  918:      //discard card from hand
        -:  919:      discardCard(handPos, currentPlayer, state, 0);
        -:  920:      return 0;*/
        -:  921:		
        -:  922:    case minion:
        -:  923:      //+1 action
    #####:  924:      state->numActions++;
        -:  925:			
        -:  926:      //discard card from hand
    #####:  927:      discardCard(handPos, currentPlayer, state, 0);
        -:  928:			
    #####:  929:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  930:	{
    #####:  931:	  state->coins = state->coins + 2;
    #####:  932:	}
        -:  933:			
    #####:  934:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  935:	{
        -:  936:	  //discard hand
    #####:  937:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  938:	    {
    #####:  939:	      discardCard(handPos, currentPlayer, state, 0);
        -:  940:	    }
        -:  941:				
        -:  942:	  //draw 4
    #####:  943:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  944:	    {
    #####:  945:	      drawCard(currentPlayer, state);
    #####:  946:	    }
        -:  947:				
        -:  948:	  //other players discard hand and redraw if hand size > 4
    #####:  949:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  950:	    {
    #####:  951:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  952:		{
    #####:  953:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  954:		    {
        -:  955:		      //discard hand
    #####:  956:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  957:			{
    #####:  958:			  discardCard(handPos, i, state, 0);
        -:  959:			}
        -:  960:							
        -:  961:		      //draw 4
    #####:  962:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  963:			{
    #####:  964:			  drawCard(i, state);
    #####:  965:			}
    #####:  966:		    }
    #####:  967:		}
    #####:  968:	    }
        -:  969:				
    #####:  970:	}
    #####:  971:      return 0;
        -:  972:		
        -:  973:    case steward:
    #####:  974:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  975:	{
        -:  976:	  //+2 cards
    #####:  977:	  drawCard(currentPlayer, state);
    #####:  978:	  drawCard(currentPlayer, state);
    #####:  979:	}
    #####:  980:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  981:	{
        -:  982:	  //+2 coins
    #####:  983:	  state->coins = state->coins + 2;
    #####:  984:	}
        -:  985:      else
        -:  986:	{
        -:  987:	  //trash 2 cards in hand
    #####:  988:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  989:	  discardCard(choice3, currentPlayer, state, 1);
        -:  990:	}
        -:  991:			
        -:  992:      //discard card from hand
    #####:  993:      discardCard(handPos, currentPlayer, state, 0);
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case tribute:
    #####:  997:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  998:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  999:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1000:	  state->deckCount[nextPlayer]--;
    #####: 1001:	}
    #####: 1002:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1003:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1004:	  state->discardCount[nextPlayer]--;
    #####: 1005:	}
        -: 1006:	else{
        -: 1007:	  //No Card to Reveal
        -: 1008:	  if (DEBUG){
        -: 1009:	    printf("No cards to reveal\n");
        -: 1010:	  }
        -: 1011:	}
    #####: 1012:      }
        -: 1013:	    
        -: 1014:      else{
    #####: 1015:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1016:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1017:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1018:	    state->deckCount[nextPlayer]++;
    #####: 1019:	    state->discard[nextPlayer][i] = -1;
    #####: 1020:	    state->discardCount[nextPlayer]--;
    #####: 1021:	  }
        -: 1022:			    
    #####: 1023:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1024:	} 
    #####: 1025:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1026:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1027:	state->deckCount[nextPlayer]--;
    #####: 1028:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1029:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1030:	state->deckCount[nextPlayer]--;
        -: 1031:      }    
        -: 1032:		       
    #####: 1033:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1034:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1035:	state->playedCardCount++;
    #####: 1036:	tributeRevealedCards[1] = -1;
    #####: 1037:      }
        -: 1038:
    #####: 1039:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1040:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1041:	  state->coins += 2;
    #####: 1042:	}
        -: 1043:		    
    #####: 1044:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1045:	  drawCard(currentPlayer, state);
    #####: 1046:	  drawCard(currentPlayer, state);
    #####: 1047:	}
        -: 1048:	else{//Action Card
    #####: 1049:	  state->numActions = state->numActions + 2;
        -: 1050:	}
    #####: 1051:      }
        -: 1052:	    
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case ambassador:
    #####: 1056:      j = 0;		//used to check if player has enough cards to discard
        -: 1057:
    #####: 1058:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1059:	{
    #####: 1060:	  return -1;				
        -: 1061:	}
        -: 1062:
    #####: 1063:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1064:	{
    #####: 1065:	  return -1;
        -: 1066:	}
        -: 1067:
    #####: 1068:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
    #####: 1070:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1071:	    {
    #####: 1072:	      j++;
    #####: 1073:	    }
    #####: 1074:	}
    #####: 1075:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1076:	{
    #####: 1077:	  return -1;				
        -: 1078:	}
        -: 1079:
        -: 1080:      if (DEBUG) 
        -: 1081:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1082:
        -: 1083:      //increase supply count for choosen card by amount being discarded
    #####: 1084:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1085:			
        -: 1086:      //each other player gains a copy of revealed card
    #####: 1087:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1088:	{
    #####: 1089:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1090:	    {
    #####: 1091:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1092:	    }
    #####: 1093:	}
        -: 1094:
        -: 1095:      //discard played card from hand
    #####: 1096:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1097:
        -: 1098:      //trash copies of cards returned to supply
    #####: 1099:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1100:	{
    #####: 1101:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1102:	    {
    #####: 1103:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1104:		{
    #####: 1105:		  discardCard(i, currentPlayer, state, 1);
    #####: 1106:		  break;
        -: 1107:		}
    #####: 1108:	    }
    #####: 1109:	}			
        -: 1110:
    #####: 1111:      return 0;
        -: 1112:		
        -: 1113:    case cutpurse:
        -: 1114:
    #####: 1115:      updateCoins(currentPlayer, state, 2);
    #####: 1116:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
    #####: 1118:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1119:	    {
    #####: 1120:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1121:		{
    #####: 1122:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1123:		    {
    #####: 1124:		      discardCard(j, i, state, 0);
    #####: 1125:		      break;
        -: 1126:		    }
    #####: 1127:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1128:		    {
    #####: 1129:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1130:			{
        -: 1131:			  if (DEBUG)
        -: 1132:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1133:			}	
    #####: 1134:		      break;
        -: 1135:		    }		
    #####: 1136:		}
        -: 1137:					
    #####: 1138:	    }
        -: 1139:				
    #####: 1140:	}				
        -: 1141:
        -: 1142:      //discard played card from hand
    #####: 1143:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1144:
    #####: 1145:      return 0;
        -: 1146:
        -: 1147:		
        -: 1148:    case embargo: 
        -: 1149:      //+2 Coins
    #####: 1150:      state->coins = state->coins + 2;
        -: 1151:			
        -: 1152:      //see if selected pile is in play
    #####: 1153:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1154:	{
    #####: 1155:	  return -1;
        -: 1156:	}
        -: 1157:			
        -: 1158:      //add embargo token to selected supply pile
    #####: 1159:      state->embargoTokens[choice1]++;
        -: 1160:			
        -: 1161:      //trash card
    #####: 1162:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1163:      return 0;
        -: 1164:		
        -: 1165:    case outpost:
        -: 1166:      //set outpost flag
    #####: 1167:      state->outpostPlayed++;
        -: 1168:			
        -: 1169:      //discard card
    #####: 1170:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1171:      return 0;
        -: 1172:		
        -: 1173:    case salvager:
        -: 1174:      //+1 buy
    #####: 1175:      state->numBuys++;
        -: 1176:			
    #####: 1177:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1178:        	{
        -: 1179:            //gain coins equal to trashed card
    #####: 1180:        	  state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1181:        	  //trash card
    #####: 1182:        	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1183:        	}
        -: 1184:        			
        -: 1185:      //discard card
    #####: 1186:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1187:      return 0;
        -: 1188:		
        -: 1189:    case sea_hag:
    #####: 1190:      return playSeaHag(currentPlayer, state);
        -: 1191:      /*for (i = 0; i < state->numPlayers+1; i++){ //INCORRECT - SHOULD BE i < state->numPlayers. THIS IS A BUG
        -: 1192:	if (i != currentPlayer){
        -: 1193:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        -: 1194:	  state->discardCount[i]++;
        -: 1195:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1196:	}
        -: 1197:      }
        -: 1198:      return 0;*/
        -: 1199:		
        -: 1200:    case treasure_map:
        -: 1201:      //search hand for another treasure_map
    #####: 1202:      index = -1;
    #####: 1203:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1204:	{
    #####: 1205:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1206:	    {
    #####: 1207:	      index = i;
    #####: 1208:	      break;
        -: 1209:	    }
    #####: 1210:	}
    #####: 1211:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1212:	{
        -: 1213:	  //trash both treasure cards
    #####: 1214:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1215:	  discardCard(index, currentPlayer, state, 1);
        -: 1216:
        -: 1217:	  //gain 4 Gold cards
    #####: 1218:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1219:	    {
    #####: 1220:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1221:	    }
        -: 1222:				
        -: 1223:	  //return success
    #####: 1224:	  return 1;
        -: 1225:	}
        -: 1226:			
        -: 1227:      //no second treasure_map found in hand
    #####: 1228:      return -1;
        -: 1229:    }
        -: 1230:	
    #####: 1231:  return -1;
    #####: 1232:}
        -: 1233:
        -: 1234:/*int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -: 1235:{
        -: 1236:  int i;
        -: 1237:  int j;
        -: 1238:  int k;
        -: 1239:  int x;
        -: 1240:  int index;
        -: 1241:  int currentPlayer = whoseTurn(state);
        -: 1242:  int nextPlayer = currentPlayer + 1;
        -: 1243:
        -: 1244:  //int tributeRevealedCards[2] = {-1, -1};
        -: 1245:  int temphand[MAX_HAND];// moved above the if statement
        -: 1246:  int drawntreasure=0;
        -: 1247:  //int cardDrawn;
        -: 1248:  int z = 0;// this is the counter for the temp hand
        -: 1249:  if (nextPlayer > (state->numPlayers - 1)){
        -: 1250:    nextPlayer = 0;
        -: 1251:  }
        -: 1252:  
        -: 1253:	
        -: 1254:  //uses switch to select card and perform actions
        -: 1255:  switch( card ) 
        -: 1256:    {
        -: 1257:    case adventurer: 
        -: 1258:	      return playAdventurer(&drawntreasure, state, currentPlayer, temphand, &z);
        -: 1259:			
        -: 1260:    case council_room:
        -: 1261:	     return playCouncilRoom(currentPlayer, state, handPos);
        -: 1262:			
        -: 1263:    case feast: //PASS int currentPlayer, struct* gameState state int temphand[], int choice1
        -: 1264:	     return playFeast(currentPlayer, state, temphand, handPos);
        -: 1265:			
        -: 1266:    case gardens:
        -: 1267:      	return playGardens();
        -: 1268:			
        -: 1269:    case mine: //PASS int currentPlayer, struct* gameState state, int choice1, int choice2, int handPos
        -: 1270:    	return playMine(currentPlayer, state, choice1, choice2, handPos);
        -: 1271:			
        -: 1272:    case remodel: // PASS int currentPlayer, struct* gameState state, int choice1, int choice2, int handPos	 
        -: 1273:    	return playRemodel(currentPlayer, state, choice1, choice2, handPos);  
        -: 1274:
        -: 1275:    case smithy: // PASS int currentPlayer, struct* gameState state, int handPos
        -: 1276:    	return playSmithy(currentPlayer, state, handPos);
        -: 1277:		
        -: 1278:    case village: // PASS int currentPlayer, struct gameState *state, int handPos
        -: 1279:    	return playVillage(currentPlayer, state, handPos);
        -: 1280:		
        -: 1281:    case baron: // int currentPlayer, struct gameState *state, int choice1
        -: 1282:    	return playBaron(currentPlayer, state, choice1);
        -: 1283:		
        -: 1284:    case great_hall:// int currentPlayer, struct gameState *state, int handPos 
        -: 1285:	    return playGreatHall(currentPlayer, state, handPos);
        -: 1286:		
        -: 1287:    case minion: // int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2
        -: 1288:    	return playMinion(currentPlayer, state, handPos, choice1, choice2);
        -: 1289:			
        -: 1290:    case steward: // int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3
        -: 1291:    	return playSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
        -: 1292:		
        -: 1293:    case tribute: // int currentPlayer, struct gameState *state, int nextPlayer
        -: 1294:    	return playTribute(currentPlayer, state, nextPlayer);
        -: 1295:		
        -: 1296:    case ambassador: // int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos
        -: 1297:	    return playAmbassador(currentPlayer, state, choice1, choice2, handPos);
        -: 1298:		
        -: 1299:    case cutpurse: // int currentPlayer, struct gameState *state, int handPos
        -: 1300:    	return playCutpurse(currentPlayer, state, handPos);
        -: 1301:		
        -: 1302:    case embargo: // int currentPlayer, struct gameState *state, int handPos, int choice1
        -: 1303:    	return playEmbargo(currentPlayer, state, handPos, choice1);
        -: 1304:		
        -: 1305:    case outpost: // int currentPlayer, struct gameState *state, int handPos
        -: 1306:    	return playOutpost(currentPlayer, state, handPos);
        -: 1307:
        -: 1308:    case salvager: // int currentPlayer, struct gameState *state, int handPos, int choice1
        -: 1309:    	return playSalvager(currentPlayer, state, handPos, choice1);
        -: 1310:		
        -: 1311:    case sea_hag: // int currentPlayer, struct gameState *state
        -: 1312:    	return playSeaHag(currentPlayer, state);
        -: 1313:		
        -: 1314:    case treasure_map: // int currentPlayer, struct gameState *state, int handPos
        -: 1315:    	return playTreasureMap(currentPlayer, state, handPos);
        -: 1316:
        -: 1317:	    }
        -: 1318:	
        -: 1319:  return -1;
        -: 1320:}*/
        -: 1321:
function discardCard called 0 returned 0% blocks executed 0%
        -: 1322:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1323:{
        -: 1324:	
        -: 1325:  //if card is not trashed, added to Played pile 
    #####: 1326:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1327:    {
        -: 1328:      //add card to played pile
    #####: 1329:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1330:      state->playedCardCount++;
    #####: 1331:    }
        -: 1332:	
        -: 1333:  //set played card to -1
    #####: 1334:  state->hand[currentPlayer][handPos] = -1;
        -: 1335:	
        -: 1336:  //remove card from player's hand
        -: 1337:  
    #####: 1338:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1339:    {
        -: 1340:      //reduce number of cards in hand
    #####: 1341:      state->handCount[currentPlayer]--;
    #####: 1342:    }
    #####: 1343:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1344:    {
        -: 1345:      //reduce number of cards in hand
    #####: 1346:      state->handCount[currentPlayer]--;
    #####: 1347:    }
        -: 1348:  else 	
        -: 1349:    {
        -: 1350:      //replace discarded card with last card in hand
    #####: 1351:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1352:      //set last card to -1
    #####: 1353:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1354:      //reduce number of cards in hand
    #####: 1355:      state->handCount[currentPlayer]--;
        -: 1356:    }
        -: 1357:	
    #####: 1358:  return 0;
        -: 1359:}
        -: 1360:
function gainCard called 5 returned 100% blocks executed 100%
        -: 1361:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1362:{
        -: 1363:  //Note: supplyPos is enum of choosen card
        -: 1364:	
        -: 1365:  //check if supply pile is empty (0) or card is not used in game (-1)
        5: 1366:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 40%
branch  1 taken 60%
        -: 1367:    {
        2: 1368:      return -1;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //added card for [whoseTurn] current player:
        -: 1372:  // toFlag = 0 : add to discard
        -: 1373:  // toFlag = 1 : add to deck
        -: 1374:  // toFlag = 2 : add to hand
        -: 1375:
        3: 1376:  if (toFlag == 1)
branch  0 taken 33%
branch  1 taken 67%
        -: 1377:    {
        1: 1378:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1379:      state->deckCount[player]++;
        1: 1380:    }
        2: 1381:  else if (toFlag == 2)
branch  0 taken 50%
branch  1 taken 50%
        -: 1382:    {
        1: 1383:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1384:      state->handCount[player]++;
        1: 1385:    }
        -: 1386:  else
        -: 1387:    {
        1: 1388:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        1: 1389:      state->discardCount[player]++;
        -: 1390:    }
        -: 1391:	
        -: 1392:  //decrease number in supply pile
        3: 1393:  state->supplyCount[supplyPos]--;
        -: 1394:	 
        3: 1395:  return 0;
        5: 1396:}
        -: 1397:
function updateCoins called 1 returned 100% blocks executed 85%
        -: 1398:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1399:{
        -: 1400:  int i;
        -: 1401:	
        -: 1402:  //reset coin count
        1: 1403:  state->coins = 0;
        -: 1404:
        -: 1405:  //add coins for each Treasure card in player's hand
       12: 1406:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1407:    {
        5: 1408:      if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1409:	{
        4: 1410:	  state->coins += 1;
        4: 1411:	}
        1: 1412:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1413:	{
    #####: 1414:	  state->coins += 2;
    #####: 1415:	}
        1: 1416:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1417:	{
    #####: 1418:	  state->coins += 3;
    #####: 1419:	}	
        5: 1420:    }	
        -: 1421:
        -: 1422:  //add bonus
        1: 1423:  state->coins += bonus;
        -: 1424:
        1: 1425:  return 0;
        -: 1426:}
        -: 1427:
        -: 1428:/************************************************************/
        -: 1429:/************************************************************/
        -: 1430:/************************************************************/
        -: 1431://new functions 4-12-17
        -: 1432:
function playAdventurer called 0 returned 0% blocks executed 0%
        -: 1433:int playAdventurer(struct gameState *state, int currentPlayer)
        -: 1434:{
        -: 1435:	int cardDrawn;
    #####: 1436:	int z = 0;
    #####: 1437:	int drawntreasure = 0;
        -: 1438:	int temphand[MAX_HAND];
        -: 1439:
    #####: 1440:	while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
        -: 1441:		
    #####: 1442:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1443:		  shuffle(currentPlayer, state);
    #####: 1444:		}
        -: 1445:		
    #####: 1446:    drawCard(currentPlayer, state);
    #####: 1447:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card. CORRECT
        -: 1448:		//cardDrawn = state->hand[currentPlayer][0]; //INCORRECT - this is a bug. cardDrawn should be last element in the hand, not first
        -: 1449:		
    #####: 1450:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1451:		  drawntreasure++;
    #####: 1452:    }
        -: 1453:		
        -: 1454:    else{
    #####: 1455:		  temphand[z]=cardDrawn;
    #####: 1456:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1457:		  z++;
        -: 1458:		}
        -: 1459:	}
        -: 1460:	 
    #####: 1461:  while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1462:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1463:		z=z-1;
        -: 1464:	 }
        -: 1465:	
    #####: 1466:  return 0;
        -: 1467:}
        -: 1468:
        -: 1469:/*int playCouncilRoom(int currentPlayer, struct gameState *state, int handPos)
        -: 1470:{
        -: 1471:	int i;	
        -: 1472:	//+4 Cards
        -: 1473:      for (i = 0; i < 4; i++)
        -: 1474:	{
        -: 1475:	  drawCard(currentPlayer, state);
        -: 1476:	}
        -: 1477:			
        -: 1478:      //+1 Buy
        -: 1479:      state->numBuys++;
        -: 1480:			
        -: 1481:      //Each other player draws a card
        -: 1482:      for (i = 0; i < state->numPlayers; i++)
        -: 1483:		{
        -: 1484:		  if ( i != currentPlayer )
        -: 1485:		    {
        -: 1486:		      drawCard(i, state);
        -: 1487:		    }
        -: 1488:		}
        -: 1489:				
        -: 1490:      //put played card in played card pile
        -: 1491:      discardCard(handPos, currentPlayer, state, 0);
        -: 1492:			
        -: 1493:      return 0;
        -: 1494:}*/
        -: 1495:
        -: 1496:/*int playFeast(int currentPlayer, struct gameState *state, int temphand[], int choice1)
        -: 1497:{
        -: 1498:	 //gain card with cost up to 5
        -: 1499:      //Backup hand
        -: 1500:	int i, x;
        -: 1501:
        -: 1502:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -: 1503:	temphand[i] = state->hand[currentPlayer][i];//Backup card
        -: 1504:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1505:      }
        -: 1506:      //Backup hand
        -: 1507:
        -: 1508:      //Update Coins for Buy
        -: 1509:      updateCoins(currentPlayer, state, 5);
        -: 1510:      x = 1;//Condition to loop on
        -: 1511:      while( x == 1) {//Buy one card
        -: 1512:	if (supplyCount(choice1, state) <= 0){
        -: 1513:	  if (DEBUG)
        -: 1514:	    printf("None of that card left, sorry!\n");
        -: 1515:
        -: 1516:	  if (DEBUG){
        -: 1517:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1518:	  }
        -: 1519:	}
        -: 1520:	else if (state->coins < getCost(choice1)){
        -: 1521:	  printf("That card is too expensive!\n");
        -: 1522:
        -: 1523:	  if (DEBUG){
        -: 1524:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1525:	  }
        -: 1526:	}
        -: 1527:	else{
        -: 1528:
        -: 1529:	  if (DEBUG){
        -: 1530:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1531:	  }
        -: 1532:
        -: 1533:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        -: 1534:	  x = 0;//No more buying cards
        -: 1535:
        -: 1536:	  if (DEBUG){
        -: 1537:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1538:	  }
        -: 1539:
        -: 1540:	}
        -: 1541:      }     
        -: 1542:
        -: 1543:      //Reset Hand
        -: 1544:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -: 1545:	state->hand[currentPlayer][i] = temphand[i];
        -: 1546:	temphand[i] = -1;
        -: 1547:      }
        -: 1548:      //Reset Hand
        -: 1549:      			
        -: 1550:      return 0;
        -: 1551:}*/
        -: 1552:
        -: 1553:/*int playGardens()
        -: 1554:{
        -: 1555:	return -1;
        -: 1556:}*/
        -: 1557:/*
        -: 1558: int playMine(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) 
        -: 1559: {
        -: 1560:     int i, j;
        -: 1561:
        -: 1562:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1563:
        -: 1564:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -: 1565:	{
        -: 1566:	  return -1;
        -: 1567:	}
        -: 1568:		
        -: 1569:      if (choice2 > treasure_map || choice2 < curse)
        -: 1570:	{
        -: 1571:	  return -1;
        -: 1572:	}
        -: 1573:
        -: 1574:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -: 1575:	{
        -: 1576:	  return -1;
        -: 1577:	}
        -: 1578:
        -: 1579:      gainCard(choice2, state, 2, currentPlayer);
        -: 1580:
        -: 1581:      //discard card from hand
        -: 1582:      discardCard(handPos, currentPlayer, state, 0);
        -: 1583:
        -: 1584:      //discard trashed card
        -: 1585:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1586:	{
        -: 1587:	  if (state->hand[currentPlayer][i] == j)
        -: 1588:	    {
        -: 1589:	      discardCard(i, currentPlayer, state, 0);			
        -: 1590:	      break;
        -: 1591:	    }
        -: 1592:	}
        -: 1593:			
        -: 1594:      return 0;
        -: 1595:}*/
        -: 1596:
        -: 1597:/*int playRemodel(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos)
        -: 1598:{
        -: 1599:     int i, j; 
        -: 1600:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1601:
        -: 1602:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1603:	{
        -: 1604:	  return -1;
        -: 1605:	}
        -: 1606:
        -: 1607:      gainCard(choice2, state, 0, currentPlayer);
        -: 1608:
        -: 1609:      //discard card from hand
        -: 1610:      discardCard(handPos, currentPlayer, state, 0);
        -: 1611:
        -: 1612:      //discard trashed card
        -: 1613:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1614:	{
        -: 1615:	  if (state->hand[currentPlayer][i] == j)
        -: 1616:	    {
        -: 1617:	      discardCard(i, currentPlayer, state, 0);			
        -: 1618:	      break;
        -: 1619:	    }
        -: 1620:	}
        -: 1621:
        -: 1622:
        -: 1623:      return 0;
        -: 1624:  }*/
        -: 1625:
function playSmithy called 0 returned 0% blocks executed 0%
        -: 1626:int playSmithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1627:{
        -: 1628:      //+3 Cards
        -: 1629:	int i;
    #####: 1630:      for (i = 0; i <= 3; i++) //INCORRECT, THIS IS A BUG. SHOULD BE i < 3 not i <= 3.
branch  0 never executed
branch  1 never executed
        -: 1631:    	{
    #####: 1632:    	  drawCard(currentPlayer, state);
    #####: 1633:    	}
        -: 1634:			
        -: 1635:      //discard card from hand
    #####: 1636:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1637:      return 0;
        -: 1638:}
        -: 1639:
function playVillage called 0 returned 0% blocks executed 0%
        -: 1640: int playVillage(int currentPlayer, struct gameState *state, int handPos)
        -: 1641: {
        -: 1642:      //+1 Card
    #####: 1643:      drawCard(currentPlayer, state);
        -: 1644:			
        -: 1645:      //+2 Actions
        -: 1646:      //state->numActions = state->numActions + 2;
    #####: 1647:      state->numActions = 2; //	INCORRECT - THIS IS A BUG. This resets numActions to 2 rather than adding 2 to it
        -: 1648:			
        -: 1649:      //discard played card from hand
    #####: 1650:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1651:      return 0;
        -: 1652:}
        -: 1653:
        -: 1654: /*int playBaron(int currentPlayer, struct gameState *state, int choice1)
        -: 1655: {
        -: 1656:      state->numBuys++;//Increase buys by 1!
        -: 1657:      if (choice1 > 0){//Boolean true or going to discard an estate
        -: 1658:	int p = 0;//Iterator for hand!
        -: 1659:	int card_not_discarded = 1;//Flag for discard set!
        -: 1660:	
        -: 1661:	while(card_not_discarded){
        -: 1662:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
        -: 1663:	    state->coins += 4;//Add 4 coins to the amount of coins
        -: 1664:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        -: 1665:	    state->discardCount[currentPlayer]++;
        -: 1666:	    
        -: 1667:	    for (;p < state->handCount[currentPlayer]; p++){
        -: 1668:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1669:	    }
        -: 1670:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        -: 1671:	    state->handCount[currentPlayer]--;
        -: 1672:	    card_not_discarded = 0;//Exit the loop
        -: 1673:	  }
        -: 1674:	 
        -: 1675:	  else if (p > state->handCount[currentPlayer]){
        -: 1676:	    if(DEBUG) {
        -: 1677:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1678:	      printf("Must gain an estate if there are any\n");
        -: 1679:	    }
        -: 1680:	    if (supplyCount(estate, state) > 0){
        -: 1681:	      gainCard(estate, state, 0, currentPlayer);
        -: 1682:	      state->supplyCount[estate]--;//Decrement estates
        -: 1683:	      if (supplyCount(estate, state) == 0){
        -: 1684:		isGameOver(state);
        -: 1685:	      }
        -: 1686:	    }
        -: 1687:	    card_not_discarded = 0;//Exit the loop
        -: 1688:	  }
        -: 1689:			    
        -: 1690:	  else{
        -: 1691:	    p++;//Next card
        -: 1692:	  }
        -: 1693:	}
        -: 1694:      }
        -: 1695:			    
        -: 1696:      else{
        -: 1697:	if (supplyCount(estate, state) > 0){
        -: 1698:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -: 1699:	  state->supplyCount[estate]--;//Decrement Estates
        -: 1700:	  if (supplyCount(estate, state) == 0){
        -: 1701:	    isGameOver(state);
        -: 1702:	  }
        -: 1703:	}
        -: 1704:      }
        -: 1705:	    
        -: 1706:      
        -: 1707:      return 0;
        -: 1708:  }*/
        -: 1709:
function playGreatHall called 0 returned 0% blocks executed 0%
        -: 1710:int playGreatHall(int currentPlayer, struct gameState *state, int handPos)
        -: 1711:{
        -: 1712:  //+1 Card
    #####: 1713:  drawCard(currentPlayer, state);
        -: 1714:		
        -: 1715:  //+1 Actions
    #####: 1716:  state->numActions++;
        -: 1717:		
        -: 1718:  //discard card from hand
    #####: 1719:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1720:  return 0;
        -: 1721:}
        -: 1722:
        -: 1723:/*int playMinion(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2)
        -: 1724:{
        -: 1725:  int i, j; 
        -: 1726: 
        -: 1727:  //+1 action
        -: 1728:  state->numActions++;
        -: 1729:		
        -: 1730:  //discard card from hand
        -: 1731:  discardCard(handPos, currentPlayer, state, 0);
        -: 1732:		
        -: 1733:  if (choice1)		//+2 coins
        -: 1734:{
        -: 1735:  state->coins = state->coins + 2;
        -: 1736:}
        -: 1737:		
        -: 1738:  else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1739:{
        -: 1740:  //discard hand
        -: 1741:  while(numHandCards(state) > 0)
        -: 1742:    {
        -: 1743:      discardCard(handPos, currentPlayer, state, 0);
        -: 1744:    }
        -: 1745:			
        -: 1746:  //draw 4
        -: 1747:  for (i = 0; i < 4; i++)
        -: 1748:    {
        -: 1749:      drawCard(currentPlayer, state);
        -: 1750:    }
        -: 1751:			
        -: 1752:  //other players discard hand and redraw if hand size > 4
        -: 1753:  for (i = 0; i < state->numPlayers; i++)
        -: 1754:    {
        -: 1755:      if (i != currentPlayer)
        -: 1756:	{
        -: 1757:	  if ( state->handCount[i] > 4 )
        -: 1758:	    {
        -: 1759:	      //discard hand
        -: 1760:	      while( state->handCount[i] > 0 )
        -: 1761:		{
        -: 1762:		  discardCard(handPos, i, state, 0);
        -: 1763:		}
        -: 1764:						
        -: 1765:	      //draw 4
        -: 1766:	      for (j = 0; j < 4; j++)
        -: 1767:		{
        -: 1768:		  drawCard(i, state);
        -: 1769:		}
        -: 1770:	    }
        -: 1771:	}
        -: 1772:    }
        -: 1773:			
        -: 1774:	}
        -: 1775:  return 0;
        -: 1776:}*/
        -: 1777:
        -: 1778:/*int playSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3)
        -: 1779:{
        -: 1780:	if (choice1 == 1)
        -: 1781:	{
        -: 1782:	  //+2 cards
        -: 1783:	  drawCard(currentPlayer, state);
        -: 1784:	  drawCard(currentPlayer, state);
        -: 1785:	}
        -: 1786:      else if (choice1 == 2)
        -: 1787:	{
        -: 1788:	  //+2 coins
        -: 1789:	  state->coins = state->coins + 2;
        -: 1790:	}
        -: 1791:      else
        -: 1792:	{
        -: 1793:	  //trash 2 cards in hand
        -: 1794:	  discardCard(choice2, currentPlayer, state, 1);
        -: 1795:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1796:	}
        -: 1797:			
        -: 1798:      //discard card from hand
        -: 1799:      discardCard(handPos, currentPlayer, state, 0);
        -: 1800:      return 0;
        -: 1801:}*/
        -: 1802:
        -: 1803:/*int playTribute(int currentPlayer, struct gameState *state, int nextPlayer)
        -: 1804:{  
        -: 1805:	int i; 
        -: 1806:	int tributeRevealedCards[2] = {-1, -1};
        -: 1807:
        -: 1808:	  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
        -: 1809:	if (state->deckCount[nextPlayer] > 0){
        -: 1810:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1811:	  state->deckCount[nextPlayer]--;
        -: 1812:	}
        -: 1813:	else if (state->discardCount[nextPlayer] > 0){
        -: 1814:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
        -: 1815:	  state->discardCount[nextPlayer]--;
        -: 1816:	}
        -: 1817:	else{
        -: 1818:	  //No Card to Reveal
        -: 1819:	  if (DEBUG){
        -: 1820:	    printf("No cards to reveal\n");
        -: 1821:	  }
        -: 1822:	}
        -: 1823:	  }
        -: 1824:	    
        -: 1825:	  else{
        -: 1826:	if (state->deckCount[nextPlayer] == 0){
        -: 1827:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
        -: 1828:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
        -: 1829:	    state->deckCount[nextPlayer]++;
        -: 1830:	    state->discard[nextPlayer][i] = -1;
        -: 1831:	    state->discardCount[nextPlayer]--;
        -: 1832:	  }
        -: 1833:			    
        -: 1834:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1835:	} 
        -: 1836:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1837:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1838:	state->deckCount[nextPlayer]--;
        -: 1839:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1840:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1841:	state->deckCount[nextPlayer]--;
        -: 1842:	  }    
        -: 1843:		       
        -: 1844:	  if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
        -: 1845:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        -: 1846:	state->playedCardCount++;
        -: 1847:	tributeRevealedCards[1] = -1;
        -: 1848:	  }
        -: 1849:
        -: 1850:	  for (i = 0; i <= 2; i ++){
        -: 1851:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
        -: 1852:	  state->coins += 2;
        -: 1853:	}
        -: 1854:		    
        -: 1855:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
        -: 1856:	  drawCard(currentPlayer, state);
        -: 1857:	  drawCard(currentPlayer, state);
        -: 1858:	}
        -: 1859:	else{//Action Card
        -: 1860:	  state->numActions = state->numActions + 2;
        -: 1861:	}
        -: 1862:	  }
        -: 1863:	    
        -: 1864:	  return 0;
        -: 1865:}*/
        -: 1866:
        -: 1867:/*int playAmbassador(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos)
        -: 1868:{ 
        -: 1869:	int i;
        -: 1870:    int j = 0;		//used to check if player has enough cards to discard
        -: 1871:
        -: 1872:      if (choice2 > 2 || choice2 < 0)
        -: 1873:	{
        -: 1874:	  return -1;				
        -: 1875:	}
        -: 1876:
        -: 1877:      if (choice1 == handPos)
        -: 1878:	{
        -: 1879:	  return -1;
        -: 1880:	}
        -: 1881:
        -: 1882:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1883:	{
        -: 1884:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1885:	    {
        -: 1886:	      j++;
        -: 1887:	    }
        -: 1888:	}
        -: 1889:      if (j < choice2)
        -: 1890:	{
        -: 1891:	  return -1;				
        -: 1892:	}
        -: 1893:
        -: 1894:      if (DEBUG) 
        -: 1895:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1896:
        -: 1897:      //increase supply count for choosen card by amount being discarded
        -: 1898:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1899:			
        -: 1900:      //each other player gains a copy of revealed card
        -: 1901:      for (i = 0; i < state->numPlayers; i++)
        -: 1902:	{
        -: 1903:	  if (i != currentPlayer)
        -: 1904:	    {
        -: 1905:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1906:	    }
        -: 1907:	}
        -: 1908:
        -: 1909:      //discard played card from hand
        -: 1910:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1911:
        -: 1912:      //trash copies of cards returned to supply
        -: 1913:      for (j = 0; j < choice2; j++)
        -: 1914:	{
        -: 1915:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1916:	    {
        -: 1917:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1918:		{
        -: 1919:		  discardCard(i, currentPlayer, state, 1);
        -: 1920:		  break;
        -: 1921:		}
        -: 1922:	    }
        -: 1923:	}			
        -: 1924:
        -: 1925:      return 0;
        -: 1926:}*/
        -: 1927:
        -: 1928:/*int playCutpurse(int currentPlayer, struct gameState *state, int handPos)
        -: 1929:{	
        -: 1930:	int i, j, k;
        -: 1931:	  updateCoins(currentPlayer, state, 2);
        -: 1932:	  for (i = 0; i < state->numPlayers; i++)
        -: 1933:	{
        -: 1934:	  if (i != currentPlayer)
        -: 1935:	    {
        -: 1936:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1937:		{
        -: 1938:		  if (state->hand[i][j] == copper)
        -: 1939:		    {
        -: 1940:		      discardCard(j, i, state, 0);
        -: 1941:		      break;
        -: 1942:		    }
        -: 1943:		  if (j == state->handCount[i])
        -: 1944:		    {
        -: 1945:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1946:			{
        -: 1947:			  if (DEBUG)
        -: 1948:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1949:			}	
        -: 1950:		      break;
        -: 1951:		    }		
        -: 1952:		}
        -: 1953:					
        -: 1954:	    }
        -: 1955:				
        -: 1956:	}				
        -: 1957:
        -: 1958:  //discard played card from hand
        -: 1959:  discardCard(handPos, currentPlayer, state, 0);			
        -: 1960:
        -: 1961:  return 0;
        -: 1962:}*/
        -: 1963:
        -: 1964: /*int playEmbargo(int currentPlayer, struct gameState *state, int handPos, int choice1)
        -: 1965:{ 
        -: 1966: 	//+2 Coins
        -: 1967:     state->coins = state->coins + 2;
        -: 1968:			
        -: 1969:      //see if selected pile is in play
        -: 1970:      if ( state->supplyCount[choice1] == -1 )
        -: 1971:	{
        -: 1972:	  return -1;
        -: 1973:	}
        -: 1974:			
        -: 1975:      //add embargo token to selected supply pile
        -: 1976:      state->embargoTokens[choice1]++;
        -: 1977:			
        -: 1978:      //trash card
        -: 1979:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1980:      return 0;
        -: 1981: }*/
        -: 1982:
        -: 1983:/*int playOutpost(int currentPlayer, struct gameState *state, int handPos)
        -: 1984:{
        -: 1985: //set outpost flag
        -: 1986:  state->outpostPlayed++;
        -: 1987:		
        -: 1988:  //discard card
        -: 1989:  discardCard(handPos, currentPlayer, state, 0);
        -: 1990:  return 0;
        -: 1991:}*/
        -: 1992:
        -: 1993:/*int playSalvager(int currentPlayer, struct gameState *state, int handPos, int choice1)
        -: 1994:{
        -: 1995:	//+1 buy
        -: 1996:	  state->numBuys++;
        -: 1997:			
        -: 1998:	  if (choice1)
        -: 1999:	{
        -: 2000:	  //gain coins equal to trashed card
        -: 2001:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 2002:	  //trash card
        -: 2003:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 2004:	}
        -: 2005:			
        -: 2006:	  //discard card
        -: 2007:	  discardCard(handPos, currentPlayer, state, 0);
        -: 2008:	  return 0;
        -: 2009:}*/
        -: 2010:
function playSeaHag called 0 returned 0% blocks executed 0%
        -: 2011:int playSeaHag(int currentPlayer, struct gameState *state)
        -: 2012:{
        -: 2013:  	int i;
    #####: 2014:  	 for (i = 0; i < state->numPlayers+1; i++){ //INCORRECT - SHOULD BE i < state->numPlayers. THIS IS A BUG
branch  0 never executed
branch  1 never executed
    #####: 2015:		if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 2016:		  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
    #####: 2017:		  state->deckCount[i]--;
    #####: 2018:		  state->discardCount[i]++;
    #####: 2019:		  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 2020:		}
    #####: 2021:	  }
    #####: 2022:	return 0;
        -: 2023:}
        -: 2024:
        -: 2025:/*int playTreasureMap(int currentPlayer, struct gameState *state, int handPos)
        -: 2026:{
        -: 2027:	int i, index;
        -: 2028:      //search hand for another treasure_map
        -: 2029:      index = -1;
        -: 2030:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 2031:	{
        -: 2032:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 2033:	    {
        -: 2034:	      index = i;
        -: 2035:	      break;
        -: 2036:	    }
        -: 2037:	}
        -: 2038:      if (index > -1)
        -: 2039:	{
        -: 2040:	  //trash both treasure cards
        -: 2041:	  discardCard(handPos, currentPlayer, state, 1);
        -: 2042:	  discardCard(index, currentPlayer, state, 1);
        -: 2043:
        -: 2044:	  //gain 4 Gold cards
        -: 2045:	  for (i = 0; i < 4; i++)
        -: 2046:	    {
        -: 2047:	      gainCard(gold, state, 1, currentPlayer);
        -: 2048:	    }
        -: 2049:				
        -: 2050:	  //return success
        -: 2051:	  return 1;
        -: 2052:	}
        -: 2053:			
        -: 2054:      //no second treasure_map found in hand
        -: 2055:      return -1;
        -: 2056:}*/
        -: 2057:
        -: 2058://end of dominion.c
        -: 2059:
unittest2.c
TESTING discardCard()
TEST 1: trashFlag = 0
TEST 1 CARD 0 SUCCESS
TEST 1 CARD 1 SUCCESS
TEST 1 CARD 2 SUCCESS
TEST 1 CARD 3 SUCCESS
TEST 1 CARD 4 SUCCESS
TEST 2: trashFlag = 1
TEST 2 CARD 0 SUCCESS
TEST 2 CARD 1 SUCCESS
TEST 2 CARD 2 SUCCESS
TEST 2 CARD 3 SUCCESS
TEST 2 CARD 4 SUCCESS
discardCard() PASS
Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:85.90% of 78
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
No calls

Function 'shuffle'
Lines executed:94.44% of 18
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:0.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:33.33% of 24
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 256
Branches executed:0.00% of 181
Taken at least once:0.00% of 181
No calls

Function 'discardCard'
Lines executed:86.67% of 15
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
No calls

Function 'gainCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'playAdventurer'
Lines executed:0.00% of 18
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'playSmithy'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'playVillage'
Lines executed:0.00% of 4
No branches
No calls

Function 'playGreatHall'
Lines executed:0.00% of 4
No branches
No calls

Function 'playSeaHag'
Lines executed:0.00% of 9
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls

File 'dominion.c'
Lines executed:18.58% of 646
Branches executed:17.27% of 417
Taken at least once:14.15% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:// set NOISY_TEST to 0 to remove printfs from output
        -:    9:#define NOISY_TEST 1
        -:   10:
        -:   11:
function compare called 28 returned 100% blocks executed 85%
        -:   12:int compare(const void* a, const void* b) {
       28:   13:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   14:    return 1;
       28:   15:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
       10:   16:    return -1;
       18:   17:  return 0;
       28:   18:}
        -:   19:
function newGame called 0 returned 0% blocks executed 0%
        -:   20:struct gameState* newGame() {
    #####:   21:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   22:  return g;
        -:   23:}
        -:   24:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   25:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   26:		  int k8, int k9, int k10) {
    #####:   27:  int* k = malloc(10 * sizeof(int));
    #####:   28:  k[0] = k1;
    #####:   29:  k[1] = k2;
    #####:   30:  k[2] = k3;
    #####:   31:  k[3] = k4;
    #####:   32:  k[4] = k5;
    #####:   33:  k[5] = k6;
    #####:   34:  k[6] = k7;
    #####:   35:  k[7] = k8;
    #####:   36:  k[8] = k9;
    #####:   37:  k[9] = k10;
    #####:   38:  return k;
        -:   39:}
        -:   40:
function initializeGame called 1 returned 100% blocks executed 87%
        -:   41:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   42:		   struct gameState *state) {
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;			
        -:   47:  //set up random number generator
        1:   48:  SelectStream(1);
        1:   49:  PutSeed((long)randomSeed);
        -:   50:  
        -:   51:  //check number of players
        2:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   53:    {
    #####:   54:      return -1;
        -:   55:    }
        -:   56:
        -:   57:  //set number of players
        1:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
       22:   61:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   62:    {
      220:   63:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   64:        {
      190:   65:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   66:	    {
    #####:   67:	      return -1;
        -:   68:	    }
      100:   69:        }
       10:   70:    }
        -:   71:
        -:   72:
        -:   73:  //initialize supply
        -:   74:  ///////////////////////////////
        -:   75:
        -:   76:  //set number of Curse cards
        1:   77:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 10;
        1:   80:    }
    #####:   81:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 20;
    #####:   84:    }
        -:   85:  else
        -:   86:    {
    #####:   87:      state->supplyCount[curse] = 30;
        -:   88:    }
        -:   89:
        -:   90:  //set number of Victory cards
        1:   91:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   92:    {
        1:   93:      state->supplyCount[estate] = 8;
        1:   94:      state->supplyCount[duchy] = 8;
        1:   95:      state->supplyCount[province] = 8;
        1:   96:    }
        -:   97:  else
        -:   98:    {
    #####:   99:      state->supplyCount[estate] = 12;
    #####:  100:      state->supplyCount[duchy] = 12;
    #####:  101:      state->supplyCount[province] = 12;
        -:  102:    }
        -:  103:
        -:  104:  //set number of Treasure cards
        1:  105:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  106:  state->supplyCount[silver] = 40;
        1:  107:  state->supplyCount[gold] = 30;
        -:  108:
        -:  109:  //set number of Kingdom cards
       42:  110:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  111:    {
      330:  112:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  113:    	{
      155:  114:    	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  115:    	    {
        -:  116:    	      //check if card is a 'Victory' Kingdom card
       19:  117:    	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens){
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        2:  118:          		  if (numPlayers == 2){ 
branch  0 taken 100%
branch  1 taken 0%
        2:  119:          		    state->supplyCount[i] = 8; 
        2:  120:          		  }
    #####:  121:          		  else{ state->supplyCount[i] = 12; }
        2:  122:    		      }
        -:  123:    	      
        -:  124:            else{
        8:  125:        		  state->supplyCount[i] = 10;
        -:  126:        		}
       10:  127:    	      break;
        -:  128:  	       }
        -:  129:    	  else    //card is not in the set choosen for the game
        -:  130:    	    {
      145:  131:    	      state->supplyCount[i] = -1;
        -:  132:    	    }
      145:  133:  	}
        -:  134:
       20:  135:    }
        -:  136:
        -:  137:  ////////////////////////
        -:  138:  //supply intilization complete
        -:  139:
        -:  140:  //set player decks
        6:  141:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  142:    {
        2:  143:      state->deckCount[i] = 0;
       16:  144:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  145:	{
        6:  146:	  state->deck[i][j] = estate;
        6:  147:	  state->deckCount[i]++;
        6:  148:	}
       32:  149:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  150:	{
       14:  151:	  state->deck[i][j] = copper;
       14:  152:	  state->deckCount[i]++;		
       14:  153:	}
        2:  154:    }
        -:  155:
        -:  156:  //shuffle player decks
        6:  157:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  158:    {
        2:  159:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  160:	{
    #####:  161:	  return -1;
        -:  162:	}
        2:  163:    }
        -:  164:
        -:  165:  //draw player hands
        6:  166:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  167:    {  
        -:  168:      //initialize hand size to zero
        2:  169:      state->handCount[i] = 0;
        2:  170:      state->discardCount[i] = 0;
        -:  171:      //draw 5 cards
        -:  172:      // for (j = 0; j < 5; j++)
        -:  173:      //	{
        -:  174:      //	  drawCard(i, state);
        -:  175:      //	}
        2:  176:    }
        -:  177:  
        -:  178:  //set embargo tokens to 0 for all supply piles
       56:  179:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  180:    {
       27:  181:      state->embargoTokens[i] = 0;
       27:  182:    }
        -:  183:
        -:  184:  //initialize first player's turn
        1:  185:  state->outpostPlayed = 0;
        1:  186:  state->phase = 0;
        1:  187:  state->numActions = 1;
        1:  188:  state->numBuys = 1;
        1:  189:  state->playedCardCount = 0;
        1:  190:  state->whoseTurn = 0;
        1:  191:  state->handCount[state->whoseTurn] = 0;
        -:  192:  //int it; move to top
        -:  193:
        -:  194:  //Moved draw cards to here, only drawing at the start of a turn
       12:  195:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
        5:  196:    drawCard(state->whoseTurn, state);
        5:  197:  }
        -:  198:
        1:  199:  updateCoins(state->whoseTurn, state, 0);
        -:  200:
        1:  201:  return 0;
        1:  202:}
        -:  203:
function shuffle called 2 returned 100% blocks executed 93%
        -:  204:int shuffle(int player, struct gameState *state) {
        -:  205: 
        -:  206:
        -:  207:  int newDeck[MAX_DECK];
        2:  208:  int newDeckPos = 0;
        -:  209:  int card;
        -:  210:  int i;
        -:  211:
        2:  212:  if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  213:    return -1;
        2:  214:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  215:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  216:
       44:  217:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
       20:  218:    card = floor(Random() * state->deckCount[player]);
       20:  219:    newDeck[newDeckPos] = state->deck[player][card];
       20:  220:    newDeckPos++;
      140:  221:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
       50:  222:      state->deck[player][i] = state->deck[player][i+1];
       50:  223:    }
       20:  224:    state->deckCount[player]--;
        -:  225:  }
       44:  226:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
       20:  227:    state->deck[player][i] = newDeck[i];
       20:  228:    state->deckCount[player]++;
       20:  229:  }
        -:  230:
        2:  231:  return 0;
        2:  232:}
        -:  233:
function playCard called 0 returned 0% blocks executed 0%
        -:  234:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  235:{	
        -:  236:  int card;
    #####:  237:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  238:
        -:  239:  //check if it is the right phase
    #####:  240:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  241:    {
    #####:  242:      return -1;
        -:  243:    }
        -:  244:	
        -:  245:  //check if player has enough actions
    #####:  246:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  247:    {
    #####:  248:      return -1;
        -:  249:    }
        -:  250:	
        -:  251:  //get card played
    #####:  252:  card = handCard(handPos, state);
        -:  253:	
        -:  254:  //check if selected card is an action
    #####:  255:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  256:    {
    #####:  257:      return -1;
        -:  258:    }
        -:  259:	
        -:  260:  //play card
    #####:  261:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  262:    {
    #####:  263:      return -1;
        -:  264:    }
        -:  265:	
        -:  266:  //reduce number of actions
    #####:  267:  state->numActions--;
        -:  268:
        -:  269:  //update coins (Treasure cards may be added with card draws)
    #####:  270:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  271:	
    #####:  272:  return 0;
    #####:  273:}
        -:  274:
function buyCard called 0 returned 0% blocks executed 0%
        -:  275:int buyCard(int supplyPos, struct gameState *state) {
        -:  276:  int who;
        -:  277:  if (DEBUG){
        -:  278:    printf("Entering buyCard...\n");
        -:  279:  }
        -:  280:
        -:  281:  // I don't know what to do about the phase thing.
        -:  282:
    #####:  283:  who = state->whoseTurn;
        -:  284:
    #####:  285:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  286:    if (DEBUG)
        -:  287:      printf("You do not have any buys left\n");
    #####:  288:    return -1;
    #####:  289:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  290:    if (DEBUG)
        -:  291:      printf("There are not any of that type of card left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  294:    if (DEBUG) 
        -:  295:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  296:    return -1;
        -:  297:  } else {
    #####:  298:    state->phase=1;
        -:  299:    //state->supplyCount[supplyPos]--;
    #####:  300:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  301:  
    #####:  302:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  303:    state->numBuys--;
        -:  304:    if (DEBUG)
        -:  305:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  306:  }
        -:  307:
        -:  308:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  309:  //state->discardCount[who]++;
        -:  310:    
    #####:  311:  return 0;
    #####:  312:}
        -:  313:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  314:int numHandCards(struct gameState *state) {
    #####:  315:  return state->handCount[ whoseTurn(state) ];
        -:  316:}
        -:  317:
function handCard called 0 returned 0% blocks executed 0%
        -:  318:int handCard(int handPos, struct gameState *state) {
    #####:  319:  int currentPlayer = whoseTurn(state);
    #####:  320:  return state->hand[currentPlayer][handPos];
        -:  321:}
        -:  322:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  323:int supplyCount(int card, struct gameState *state) {
    #####:  324:  return state->supplyCount[card];
        -:  325:}
        -:  326:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  327:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  328:  int i;
    #####:  329:  int count = 0;
        -:  330:
    #####:  331:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  332:    {
    #####:  333:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  334:    }
        -:  335:
    #####:  336:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  337:    {
    #####:  338:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  339:    }
        -:  340:
    #####:  341:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  342:    {
    #####:  343:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  344:    }
        -:  345:
    #####:  346:  return count;
        -:  347:}
        -:  348:
function whoseTurn called 0 returned 0% blocks executed 0%
        -:  349:int whoseTurn(struct gameState *state) {
    #####:  350:  return state->whoseTurn;
        -:  351:}
        -:  352:
function endTurn called 0 returned 0% blocks executed 0%
        -:  353:int endTurn(struct gameState *state) {
        -:  354:  int k;
        -:  355:  int i;
    #####:  356:  int currentPlayer = whoseTurn(state);
        -:  357:  
        -:  358:  //Discard hand
    #####:  359:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  360:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  361:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  362:  }
    #####:  363:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  364:    
        -:  365:  //Code for determining the player
    #####:  366:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  367:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  368:  }
        -:  369:  else{
    #####:  370:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  371:  }
        -:  372:
    #####:  373:  state->outpostPlayed = 0;
    #####:  374:  state->phase = 0;
    #####:  375:  state->numActions = 1;
    #####:  376:  state->coins = 0;
    #####:  377:  state->numBuys = 1;
    #####:  378:  state->playedCardCount = 0;
    #####:  379:  state->handCount[state->whoseTurn] = 0;
        -:  380:
        -:  381:  //int k; move to top
        -:  382:  //Next player draws hand
    #####:  383:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  384:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  385:  }
        -:  386:
        -:  387:  //Update money
    #####:  388:  updateCoins(state->whoseTurn, state , 0);
        -:  389:
    #####:  390:  return 0;
        -:  391:}
        -:  392:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  393:int isGameOver(struct gameState *state) {
        -:  394:  int i;
        -:  395:  int j;
        -:  396:	
        -:  397:  //if stack of Province cards is empty, the game ends
    #####:  398:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  399:    {
    #####:  400:      return 1;
        -:  401:    }
        -:  402:
        -:  403:  //if three supply piles are at 0, the game ends
    #####:  404:  j = 0;
    #####:  405:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  406:    {
    #####:  407:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  408:	{
    #####:  409:	  j++;
    #####:  410:	}
    #####:  411:    }
    #####:  412:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  413:    {
    #####:  414:      return 1;
        -:  415:    }
        -:  416:
    #####:  417:  return 0;
    #####:  418:}
        -:  419:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  420:int scoreFor (int player, struct gameState *state) {
        -:  421:
        -:  422:  int i;
    #####:  423:  int score = 0;
        -:  424:  //score from hand
    #####:  425:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  426:    {
    #####:  427:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  433:    }
        -:  434:
        -:  435:  //score from discard
    #####:  436:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  437:    {
    #####:  438:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  444:    }
        -:  445:
        -:  446:  //score from deck
    #####:  447:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  448:    {
    #####:  449:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  455:    }
        -:  456:
    #####:  457:  return score;
        -:  458:}
        -:  459:
function getWinners called 0 returned 0% blocks executed 0%
        -:  460:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  461:  int i;	
        -:  462:  int j;
        -:  463:  int highScore;
        -:  464:  int currentPlayer;
        -:  465:
        -:  466:  //get score for each player
    #####:  467:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  468:    {
        -:  469:      //set unused player scores to -9999
    #####:  470:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  471:	{
    #####:  472:	  players[i] = -9999;
    #####:  473:	}
        -:  474:      else
        -:  475:	{
    #####:  476:	  players[i] = scoreFor (i, state);
        -:  477:	}
    #####:  478:    }
        -:  479:
        -:  480:  //find highest score
    #####:  481:  j = 0;
    #####:  482:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  483:    {
    #####:  484:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  485:	{
    #####:  486:	  j = i;
    #####:  487:	}
    #####:  488:    }
    #####:  489:  highScore = players[j];
        -:  490:
        -:  491:  //add 1 to players who had less turns
    #####:  492:  currentPlayer = whoseTurn(state);
    #####:  493:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  494:    {
    #####:  495:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  496:	{
    #####:  497:	  players[i]++;
    #####:  498:	}
    #####:  499:    }
        -:  500:
        -:  501:  //find new highest score
    #####:  502:  j = 0;
    #####:  503:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  504:    {
    #####:  505:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  506:	{
    #####:  507:	  j = i;
    #####:  508:	}
    #####:  509:    }
    #####:  510:  highScore = players[j];
        -:  511:
        -:  512:  //set winners in array to 1 and rest to 0
    #####:  513:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  514:    {
    #####:  515:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  516:	{
    #####:  517:	  players[i] = 1;
    #####:  518:	}
        -:  519:      else
        -:  520:	{
    #####:  521:	  players[i] = 0;
        -:  522:	}
    #####:  523:    }
        -:  524:
    #####:  525:  return 0;
        -:  526:}
        -:  527:
function drawCard called 5 returned 100% blocks executed 41%
        -:  528:int drawCard(int player, struct gameState *state)
        -:  529:{	
        -:  530:  int count;
        -:  531:  int deckCounter;
        5:  532:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0%
branch  1 taken 100%
        -:  533:    
        -:  534:    //Step 1 Shuffle the discard pile back into a deck
        -:  535:    int i;
        -:  536:    //Move discard to deck
    #####:  537:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  538:      state->deck[player][i] = state->discard[player][i];
    #####:  539:      state->discard[player][i] = -1;
    #####:  540:    }
        -:  541:
    #####:  542:    state->deckCount[player] = state->discardCount[player];
    #####:  543:    state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:    //Shufffle the deck
    #####:  546:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  547:   
        -:  548:    if (DEBUG){//Debug statements
        -:  549:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:    }
        -:  551:    
    #####:  552:    state->discardCount[player] = 0;
        -:  553:
        -:  554:    //Step 2 Draw Card
    #####:  555:    count = state->handCount[player];//Get current player's hand count
        -:  556:    
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Current hand count: %d\n", count);
        -:  559:    }
        -:  560:    
    #####:  561:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
    #####:  563:    if (deckCounter == 0){
branch  0 never executed
branch  1 never executed
    #####:  564:      return -1;
        -:  565:    }
        -:  566:
    #####:  567:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  568:    state->deckCount[player]--;
    #####:  569:    state->handCount[player]++;//Increment hand count
    #####:  570:  }
        -:  571:
        -:  572:  else{
        5:  573:    int count = state->handCount[player];//Get current hand count for player
        -:  574:    int deckCounter;
        -:  575:    if (DEBUG){//Debug statements
        -:  576:      printf("Current hand count: %d\n", count);
        -:  577:    }
        -:  578:
        5:  579:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  581:    state->deckCount[player]--;
        5:  582:    state->handCount[player]++;//Increment hand count
        -:  583:  }
        -:  584:
        5:  585:  return 0;
        5:  586:}
        -:  587:
function getCost called 0 returned 0% blocks executed 0%
        -:  588:int getCost(int cardNumber)
        -:  589:{
    #####:  590:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  591:    {
        -:  592:    case curse:
    #####:  593:      return 0;
        -:  594:    case estate:
    #####:  595:      return 2;
        -:  596:    case duchy:
    #####:  597:      return 5;
        -:  598:    case province:
    #####:  599:      return 8;
        -:  600:    case copper:
    #####:  601:      return 0;
        -:  602:    case silver:
    #####:  603:      return 3;
        -:  604:    case gold:
    #####:  605:      return 6;
        -:  606:    case adventurer:
    #####:  607:      return 6;
        -:  608:    case council_room:
    #####:  609:      return 5;
        -:  610:    case feast:
    #####:  611:      return 4;
        -:  612:    case gardens:
    #####:  613:      return 4;
        -:  614:    case mine:
    #####:  615:      return 5;
        -:  616:    case remodel:
    #####:  617:      return 4;
        -:  618:    case smithy:
    #####:  619:      return 4;
        -:  620:    case village:
    #####:  621:      return 3;
        -:  622:    case baron:
    #####:  623:      return 4;
        -:  624:    case great_hall:
    #####:  625:      return 3;
        -:  626:    case minion:
    #####:  627:      return 5;
        -:  628:    case steward:
    #####:  629:      return 3;
        -:  630:    case tribute:
    #####:  631:      return 5;
        -:  632:    case ambassador:
    #####:  633:      return 3;
        -:  634:    case cutpurse:
    #####:  635:      return 4;
        -:  636:    case embargo: 
    #####:  637:      return 2;
        -:  638:    case outpost:
    #####:  639:      return 5;
        -:  640:    case salvager:
    #####:  641:      return 4;
        -:  642:    case sea_hag:
    #####:  643:      return 4;
        -:  644:    case treasure_map:
    #####:  645:      return 4;
        -:  646:    }
        -:  647:	
    #####:  648:  return -1;
    #####:  649:}
        -:  650:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  651:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  652:{
        -:  653:  int i;
        -:  654:  int j;
        -:  655:  int k;
        -:  656:  int x;
        -:  657:  int index;
    #####:  658:  int currentPlayer = whoseTurn(state);
    #####:  659:  int nextPlayer = currentPlayer + 1;
        -:  660:
    #####:  661:  int tributeRevealedCards[2] = {-1, -1};
        -:  662:  int temphand[MAX_HAND];// moved above the if statement
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  664:    nextPlayer = 0;
    #####:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:      return playAdventurer(state, currentPlayer);
        -:  673:
        -:  674:      /*while(drawntreasure<2){
        -:  675:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  676:	  shuffle(currentPlayer, state);
        -:  677:	}
        -:  678:	drawCard(currentPlayer, state);
        -:  679:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  680:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  681:	  drawntreasure++;
        -:  682:	else{
        -:  683:	  temphand[z]=cardDrawn;
        -:  684:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  685:	  z++;
        -:  686:	}
        -:  687:      }
        -:  688:      while(z-1>=0){
        -:  689:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  690:	z=z-1;
        -:  691:      }
        -:  692:      return 0;*/
        -:  693:			
        -:  694:    case council_room:
        -:  695:      //+4 Cards
    #####:  696:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  697:	{
    #####:  698:	  drawCard(currentPlayer, state);
    #####:  699:	}
        -:  700:			
        -:  701:      //+1 Buy
    #####:  702:      state->numBuys++;
        -:  703:			
        -:  704:      //Each other player draws a card
    #####:  705:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  706:	{
    #####:  707:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  708:	    {
    #####:  709:	      drawCard(i, state);
    #####:  710:	    }
    #####:  711:	}
        -:  712:			
        -:  713:      //put played card in played card pile
    #####:  714:      discardCard(handPos, currentPlayer, state, 0);
        -:  715:			
    #####:  716:      return 0;
        -:  717:			
        -:  718:    case feast:
        -:  719:      //gain card with cost up to 5
        -:  720:      //Backup hand
    #####:  721:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  722:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  723:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  724:      }
        -:  725:      //Backup hand
        -:  726:
        -:  727:      //Update Coins for Buy
    #####:  728:      updateCoins(currentPlayer, state, 5);
    #####:  729:      x = 1;//Condition to loop on
    #####:  730:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  731:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  732:	  if (DEBUG)
        -:  733:	    printf("None of that card left, sorry!\n");
        -:  734:
        -:  735:	  if (DEBUG){
        -:  736:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  737:	  }
    #####:  738:	}
    #####:  739:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  740:	  printf("That card is too expensive!\n");
        -:  741:
        -:  742:	  if (DEBUG){
        -:  743:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  744:	  }
    #####:  745:	}
        -:  746:	else{
        -:  747:
        -:  748:	  if (DEBUG){
        -:  749:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  750:	  }
        -:  751:
    #####:  752:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  753:	  x = 0;//No more buying cards
        -:  754:
        -:  755:	  if (DEBUG){
        -:  756:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  757:	  }
        -:  758:
        -:  759:	}
        -:  760:      }     
        -:  761:
        -:  762:      //Reset Hand
    #####:  763:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  764:	state->hand[currentPlayer][i] = temphand[i];
    #####:  765:	temphand[i] = -1;
    #####:  766:      }
        -:  767:      //Reset Hand
        -:  768:      			
    #####:  769:      return 0;
        -:  770:			
        -:  771:    case gardens:
    #####:  772:      return -1;
        -:  773:			
        -:  774:    case mine:
    #####:  775:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  776:
    #####:  777:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  778:	{
    #####:  779:	  return -1;
        -:  780:	}
        -:  781:		
    #####:  782:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:
    #####:  787:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      gainCard(choice2, state, 2, currentPlayer);
        -:  793:
        -:  794:      //discard card from hand
    #####:  795:      discardCard(handPos, currentPlayer, state, 0);
        -:  796:
        -:  797:      //discard trashed card
    #####:  798:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  799:	{
    #####:  800:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  801:	    {
    #####:  802:	      discardCard(i, currentPlayer, state, 0);			
    #####:  803:	      break;
        -:  804:	    }
    #####:  805:	}
        -:  806:			
    #####:  807:      return 0;
        -:  808:			
        -:  809:    case remodel:
    #####:  810:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  811:
    #####:  812:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  813:	{
    #####:  814:	  return -1;
        -:  815:	}
        -:  816:
    #####:  817:      gainCard(choice2, state, 0, currentPlayer);
        -:  818:
        -:  819:      //discard card from hand
    #####:  820:      discardCard(handPos, currentPlayer, state, 0);
        -:  821:
        -:  822:      //discard trashed card
    #####:  823:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  824:	{
    #####:  825:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  826:	    {
    #####:  827:	      discardCard(i, currentPlayer, state, 0);			
    #####:  828:	      break;
        -:  829:	    }
    #####:  830:	}
        -:  831:
        -:  832:
    #####:  833:      return 0;
        -:  834:		
        -:  835:    case smithy:
    #####:  836:      return playSmithy(currentPlayer, state, handPos);
        -:  837:      /*//+3 Cards
        -:  838:      for (i = 0; i < 3; i++)
        -:  839:	{
        -:  840:	  drawCard(currentPlayer, state);
        -:  841:	}
        -:  842:			
        -:  843:      //discard card from hand
        -:  844:      discardCard(handPos, currentPlayer, state, 0);
        -:  845:      return 0;*/
        -:  846:		
        -:  847:    case village:
    #####:  848:      return playVillage(currentPlayer, state, handPos);
        -:  849:      /*//+1 Card
        -:  850:      drawCard(currentPlayer, state);
        -:  851:			
        -:  852:      //+2 Actions
        -:  853:      state->numActions = state->numActions + 2;
        -:  854:			
        -:  855:      //discard played card from hand
        -:  856:      discardCard(handPos, currentPlayer, state, 0);
        -:  857:      return 0;*/
        -:  858:		
        -:  859:    case baron:
    #####:  860:      state->numBuys++;//Increase buys by 1!
    #####:  861:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  862:	int p = 0;//Iterator for hand!
    #####:  863:	int card_not_discarded = 1;//Flag for discard set!
    #####:  864:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  865:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  866:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  867:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  868:	    state->discardCount[currentPlayer]++;
    #####:  869:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  870:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  871:	    }
    #####:  872:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  873:	    state->handCount[currentPlayer]--;
    #####:  874:	    card_not_discarded = 0;//Exit the loop
    #####:  875:	  }
    #####:  876:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  877:	    if(DEBUG) {
        -:  878:	      printf("No estate cards in your hand, invalid choice\n");
        -:  879:	      printf("Must gain an estate if there are any\n");
        -:  880:	    }
    #####:  881:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  882:	      gainCard(estate, state, 0, currentPlayer);
    #####:  883:	      state->supplyCount[estate]--;//Decrement estates
    #####:  884:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  885:		isGameOver(state);
    #####:  886:	      }
    #####:  887:	    }
    #####:  888:	    card_not_discarded = 0;//Exit the loop
    #####:  889:	  }
        -:  890:			    
        -:  891:	  else{
    #####:  892:	    p++;//Next card
        -:  893:	  }
        -:  894:	}
    #####:  895:      }
        -:  896:			    
        -:  897:      else{
    #####:  898:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  899:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  900:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  901:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  902:	    isGameOver(state);
    #####:  903:	  }
    #####:  904:	}
        -:  905:      }
        -:  906:	    
        -:  907:      
    #####:  908:      return 0;
        -:  909:		
        -:  910:    case great_hall:
    #####:  911:      return playGreatHall(currentPlayer, state, handPos);
        -:  912:      /*//+1 Card
        -:  913:      drawCard(currentPlayer, state);
        -:  914:			
        -:  915:      //+1 Actions
        -:  916:      state->numActions++;
        -:  917:			
        -:  918:      //discard card from hand
        -:  919:      discardCard(handPos, currentPlayer, state, 0);
        -:  920:      return 0;*/
        -:  921:		
        -:  922:    case minion:
        -:  923:      //+1 action
    #####:  924:      state->numActions++;
        -:  925:			
        -:  926:      //discard card from hand
    #####:  927:      discardCard(handPos, currentPlayer, state, 0);
        -:  928:			
    #####:  929:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  930:	{
    #####:  931:	  state->coins = state->coins + 2;
    #####:  932:	}
        -:  933:			
    #####:  934:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  935:	{
        -:  936:	  //discard hand
    #####:  937:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  938:	    {
    #####:  939:	      discardCard(handPos, currentPlayer, state, 0);
        -:  940:	    }
        -:  941:				
        -:  942:	  //draw 4
    #####:  943:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  944:	    {
    #####:  945:	      drawCard(currentPlayer, state);
    #####:  946:	    }
        -:  947:				
        -:  948:	  //other players discard hand and redraw if hand size > 4
    #####:  949:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  950:	    {
    #####:  951:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  952:		{
    #####:  953:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  954:		    {
        -:  955:		      //discard hand
    #####:  956:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  957:			{
    #####:  958:			  discardCard(handPos, i, state, 0);
        -:  959:			}
        -:  960:							
        -:  961:		      //draw 4
    #####:  962:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  963:			{
    #####:  964:			  drawCard(i, state);
    #####:  965:			}
    #####:  966:		    }
    #####:  967:		}
    #####:  968:	    }
        -:  969:				
    #####:  970:	}
    #####:  971:      return 0;
        -:  972:		
        -:  973:    case steward:
    #####:  974:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  975:	{
        -:  976:	  //+2 cards
    #####:  977:	  drawCard(currentPlayer, state);
    #####:  978:	  drawCard(currentPlayer, state);
    #####:  979:	}
    #####:  980:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  981:	{
        -:  982:	  //+2 coins
    #####:  983:	  state->coins = state->coins + 2;
    #####:  984:	}
        -:  985:      else
        -:  986:	{
        -:  987:	  //trash 2 cards in hand
    #####:  988:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  989:	  discardCard(choice3, currentPlayer, state, 1);
        -:  990:	}
        -:  991:			
        -:  992:      //discard card from hand
    #####:  993:      discardCard(handPos, currentPlayer, state, 0);
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case tribute:
    #####:  997:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  998:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  999:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1000:	  state->deckCount[nextPlayer]--;
    #####: 1001:	}
    #####: 1002:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1003:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1004:	  state->discardCount[nextPlayer]--;
    #####: 1005:	}
        -: 1006:	else{
        -: 1007:	  //No Card to Reveal
        -: 1008:	  if (DEBUG){
        -: 1009:	    printf("No cards to reveal\n");
        -: 1010:	  }
        -: 1011:	}
    #####: 1012:      }
        -: 1013:	    
        -: 1014:      else{
    #####: 1015:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1016:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1017:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1018:	    state->deckCount[nextPlayer]++;
    #####: 1019:	    state->discard[nextPlayer][i] = -1;
    #####: 1020:	    state->discardCount[nextPlayer]--;
    #####: 1021:	  }
        -: 1022:			    
    #####: 1023:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1024:	} 
    #####: 1025:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1026:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1027:	state->deckCount[nextPlayer]--;
    #####: 1028:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1029:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1030:	state->deckCount[nextPlayer]--;
        -: 1031:      }    
        -: 1032:		       
    #####: 1033:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1034:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1035:	state->playedCardCount++;
    #####: 1036:	tributeRevealedCards[1] = -1;
    #####: 1037:      }
        -: 1038:
    #####: 1039:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1040:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1041:	  state->coins += 2;
    #####: 1042:	}
        -: 1043:		    
    #####: 1044:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1045:	  drawCard(currentPlayer, state);
    #####: 1046:	  drawCard(currentPlayer, state);
    #####: 1047:	}
        -: 1048:	else{//Action Card
    #####: 1049:	  state->numActions = state->numActions + 2;
        -: 1050:	}
    #####: 1051:      }
        -: 1052:	    
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case ambassador:
    #####: 1056:      j = 0;		//used to check if player has enough cards to discard
        -: 1057:
    #####: 1058:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1059:	{
    #####: 1060:	  return -1;				
        -: 1061:	}
        -: 1062:
    #####: 1063:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1064:	{
    #####: 1065:	  return -1;
        -: 1066:	}
        -: 1067:
    #####: 1068:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
    #####: 1070:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1071:	    {
    #####: 1072:	      j++;
    #####: 1073:	    }
    #####: 1074:	}
    #####: 1075:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1076:	{
    #####: 1077:	  return -1;				
        -: 1078:	}
        -: 1079:
        -: 1080:      if (DEBUG) 
        -: 1081:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1082:
        -: 1083:      //increase supply count for choosen card by amount being discarded
    #####: 1084:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1085:			
        -: 1086:      //each other player gains a copy of revealed card
    #####: 1087:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1088:	{
    #####: 1089:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1090:	    {
    #####: 1091:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1092:	    }
    #####: 1093:	}
        -: 1094:
        -: 1095:      //discard played card from hand
    #####: 1096:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1097:
        -: 1098:      //trash copies of cards returned to supply
    #####: 1099:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1100:	{
    #####: 1101:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1102:	    {
    #####: 1103:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1104:		{
    #####: 1105:		  discardCard(i, currentPlayer, state, 1);
    #####: 1106:		  break;
        -: 1107:		}
    #####: 1108:	    }
    #####: 1109:	}			
        -: 1110:
    #####: 1111:      return 0;
        -: 1112:		
        -: 1113:    case cutpurse:
        -: 1114:
    #####: 1115:      updateCoins(currentPlayer, state, 2);
    #####: 1116:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
    #####: 1118:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1119:	    {
    #####: 1120:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1121:		{
    #####: 1122:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1123:		    {
    #####: 1124:		      discardCard(j, i, state, 0);
    #####: 1125:		      break;
        -: 1126:		    }
    #####: 1127:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1128:		    {
    #####: 1129:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1130:			{
        -: 1131:			  if (DEBUG)
        -: 1132:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1133:			}	
    #####: 1134:		      break;
        -: 1135:		    }		
    #####: 1136:		}
        -: 1137:					
    #####: 1138:	    }
        -: 1139:				
    #####: 1140:	}				
        -: 1141:
        -: 1142:      //discard played card from hand
    #####: 1143:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1144:
    #####: 1145:      return 0;
        -: 1146:
        -: 1147:		
        -: 1148:    case embargo: 
        -: 1149:      //+2 Coins
    #####: 1150:      state->coins = state->coins + 2;
        -: 1151:			
        -: 1152:      //see if selected pile is in play
    #####: 1153:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1154:	{
    #####: 1155:	  return -1;
        -: 1156:	}
        -: 1157:			
        -: 1158:      //add embargo token to selected supply pile
    #####: 1159:      state->embargoTokens[choice1]++;
        -: 1160:			
        -: 1161:      //trash card
    #####: 1162:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1163:      return 0;
        -: 1164:		
        -: 1165:    case outpost:
        -: 1166:      //set outpost flag
    #####: 1167:      state->outpostPlayed++;
        -: 1168:			
        -: 1169:      //discard card
    #####: 1170:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1171:      return 0;
        -: 1172:		
        -: 1173:    case salvager:
        -: 1174:      //+1 buy
    #####: 1175:      state->numBuys++;
        -: 1176:			
    #####: 1177:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1178:        	{
        -: 1179:            //gain coins equal to trashed card
    #####: 1180:        	  state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1181:        	  //trash card
    #####: 1182:        	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1183:        	}
        -: 1184:        			
        -: 1185:      //discard card
    #####: 1186:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1187:      return 0;
        -: 1188:		
        -: 1189:    case sea_hag:
    #####: 1190:      return playSeaHag(currentPlayer, state);
        -: 1191:      /*for (i = 0; i < state->numPlayers+1; i++){ //INCORRECT - SHOULD BE i < state->numPlayers. THIS IS A BUG
        -: 1192:	if (i != currentPlayer){
        -: 1193:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        -: 1194:	  state->discardCount[i]++;
        -: 1195:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1196:	}
        -: 1197:      }
        -: 1198:      return 0;*/
        -: 1199:		
        -: 1200:    case treasure_map:
        -: 1201:      //search hand for another treasure_map
    #####: 1202:      index = -1;
    #####: 1203:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1204:	{
    #####: 1205:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1206:	    {
    #####: 1207:	      index = i;
    #####: 1208:	      break;
        -: 1209:	    }
    #####: 1210:	}
    #####: 1211:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1212:	{
        -: 1213:	  //trash both treasure cards
    #####: 1214:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1215:	  discardCard(index, currentPlayer, state, 1);
        -: 1216:
        -: 1217:	  //gain 4 Gold cards
    #####: 1218:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1219:	    {
    #####: 1220:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1221:	    }
        -: 1222:				
        -: 1223:	  //return success
    #####: 1224:	  return 1;
        -: 1225:	}
        -: 1226:			
        -: 1227:      //no second treasure_map found in hand
    #####: 1228:      return -1;
        -: 1229:    }
        -: 1230:	
    #####: 1231:  return -1;
    #####: 1232:}
        -: 1233:
        -: 1234:/*int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -: 1235:{
        -: 1236:  int i;
        -: 1237:  int j;
        -: 1238:  int k;
        -: 1239:  int x;
        -: 1240:  int index;
        -: 1241:  int currentPlayer = whoseTurn(state);
        -: 1242:  int nextPlayer = currentPlayer + 1;
        -: 1243:
        -: 1244:  //int tributeRevealedCards[2] = {-1, -1};
        -: 1245:  int temphand[MAX_HAND];// moved above the if statement
        -: 1246:  int drawntreasure=0;
        -: 1247:  //int cardDrawn;
        -: 1248:  int z = 0;// this is the counter for the temp hand
        -: 1249:  if (nextPlayer > (state->numPlayers - 1)){
        -: 1250:    nextPlayer = 0;
        -: 1251:  }
        -: 1252:  
        -: 1253:	
        -: 1254:  //uses switch to select card and perform actions
        -: 1255:  switch( card ) 
        -: 1256:    {
        -: 1257:    case adventurer: 
        -: 1258:	      return playAdventurer(&drawntreasure, state, currentPlayer, temphand, &z);
        -: 1259:			
        -: 1260:    case council_room:
        -: 1261:	     return playCouncilRoom(currentPlayer, state, handPos);
        -: 1262:			
        -: 1263:    case feast: //PASS int currentPlayer, struct* gameState state int temphand[], int choice1
        -: 1264:	     return playFeast(currentPlayer, state, temphand, handPos);
        -: 1265:			
        -: 1266:    case gardens:
        -: 1267:      	return playGardens();
        -: 1268:			
        -: 1269:    case mine: //PASS int currentPlayer, struct* gameState state, int choice1, int choice2, int handPos
        -: 1270:    	return playMine(currentPlayer, state, choice1, choice2, handPos);
        -: 1271:			
        -: 1272:    case remodel: // PASS int currentPlayer, struct* gameState state, int choice1, int choice2, int handPos	 
        -: 1273:    	return playRemodel(currentPlayer, state, choice1, choice2, handPos);  
        -: 1274:
        -: 1275:    case smithy: // PASS int currentPlayer, struct* gameState state, int handPos
        -: 1276:    	return playSmithy(currentPlayer, state, handPos);
        -: 1277:		
        -: 1278:    case village: // PASS int currentPlayer, struct gameState *state, int handPos
        -: 1279:    	return playVillage(currentPlayer, state, handPos);
        -: 1280:		
        -: 1281:    case baron: // int currentPlayer, struct gameState *state, int choice1
        -: 1282:    	return playBaron(currentPlayer, state, choice1);
        -: 1283:		
        -: 1284:    case great_hall:// int currentPlayer, struct gameState *state, int handPos 
        -: 1285:	    return playGreatHall(currentPlayer, state, handPos);
        -: 1286:		
        -: 1287:    case minion: // int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2
        -: 1288:    	return playMinion(currentPlayer, state, handPos, choice1, choice2);
        -: 1289:			
        -: 1290:    case steward: // int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3
        -: 1291:    	return playSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
        -: 1292:		
        -: 1293:    case tribute: // int currentPlayer, struct gameState *state, int nextPlayer
        -: 1294:    	return playTribute(currentPlayer, state, nextPlayer);
        -: 1295:		
        -: 1296:    case ambassador: // int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos
        -: 1297:	    return playAmbassador(currentPlayer, state, choice1, choice2, handPos);
        -: 1298:		
        -: 1299:    case cutpurse: // int currentPlayer, struct gameState *state, int handPos
        -: 1300:    	return playCutpurse(currentPlayer, state, handPos);
        -: 1301:		
        -: 1302:    case embargo: // int currentPlayer, struct gameState *state, int handPos, int choice1
        -: 1303:    	return playEmbargo(currentPlayer, state, handPos, choice1);
        -: 1304:		
        -: 1305:    case outpost: // int currentPlayer, struct gameState *state, int handPos
        -: 1306:    	return playOutpost(currentPlayer, state, handPos);
        -: 1307:
        -: 1308:    case salvager: // int currentPlayer, struct gameState *state, int handPos, int choice1
        -: 1309:    	return playSalvager(currentPlayer, state, handPos, choice1);
        -: 1310:		
        -: 1311:    case sea_hag: // int currentPlayer, struct gameState *state
        -: 1312:    	return playSeaHag(currentPlayer, state);
        -: 1313:		
        -: 1314:    case treasure_map: // int currentPlayer, struct gameState *state, int handPos
        -: 1315:    	return playTreasureMap(currentPlayer, state, handPos);
        -: 1316:
        -: 1317:	    }
        -: 1318:	
        -: 1319:  return -1;
        -: 1320:}*/
        -: 1321:
function discardCard called 10 returned 100% blocks executed 90%
        -: 1322:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1323:{
        -: 1324:	
        -: 1325:  //if card is not trashed, added to Played pile 
       10: 1326:  if (trashFlag < 1)
branch  0 taken 50%
branch  1 taken 50%
        -: 1327:    {
        -: 1328:      //add card to played pile
        5: 1329:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        5: 1330:      state->playedCardCount++;
        5: 1331:    }
        -: 1332:	
        -: 1333:  //set played card to -1
       10: 1334:  state->hand[currentPlayer][handPos] = -1;
        -: 1335:	
        -: 1336:  //remove card from player's hand
        -: 1337:  
       10: 1338:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 20%
branch  1 taken 80%
        -: 1339:    {
        -: 1340:      //reduce number of cards in hand
        2: 1341:      state->handCount[currentPlayer]--;
        2: 1342:    }
        8: 1343:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1344:    {
        -: 1345:      //reduce number of cards in hand
    #####: 1346:      state->handCount[currentPlayer]--;
    #####: 1347:    }
        -: 1348:  else 	
        -: 1349:    {
        -: 1350:      //replace discarded card with last card in hand
        8: 1351:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1352:      //set last card to -1
        8: 1353:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1354:      //reduce number of cards in hand
        8: 1355:      state->handCount[currentPlayer]--;
        -: 1356:    }
        -: 1357:	
       10: 1358:  return 0;
        -: 1359:}
        -: 1360:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1361:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1362:{
        -: 1363:  //Note: supplyPos is enum of choosen card
        -: 1364:	
        -: 1365:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1366:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1367:    {
    #####: 1368:      return -1;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //added card for [whoseTurn] current player:
        -: 1372:  // toFlag = 0 : add to discard
        -: 1373:  // toFlag = 1 : add to deck
        -: 1374:  // toFlag = 2 : add to hand
        -: 1375:
    #####: 1376:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1377:    {
    #####: 1378:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1379:      state->deckCount[player]++;
    #####: 1380:    }
    #####: 1381:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1382:    {
    #####: 1383:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1384:      state->handCount[player]++;
    #####: 1385:    }
        -: 1386:  else
        -: 1387:    {
    #####: 1388:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1389:      state->discardCount[player]++;
        -: 1390:    }
        -: 1391:	
        -: 1392:  //decrease number in supply pile
    #####: 1393:  state->supplyCount[supplyPos]--;
        -: 1394:	 
    #####: 1395:  return 0;
    #####: 1396:}
        -: 1397:
function updateCoins called 1 returned 100% blocks executed 85%
        -: 1398:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1399:{
        -: 1400:  int i;
        -: 1401:	
        -: 1402:  //reset coin count
        1: 1403:  state->coins = 0;
        -: 1404:
        -: 1405:  //add coins for each Treasure card in player's hand
       12: 1406:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1407:    {
        5: 1408:      if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1409:	{
        4: 1410:	  state->coins += 1;
        4: 1411:	}
        1: 1412:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1413:	{
    #####: 1414:	  state->coins += 2;
    #####: 1415:	}
        1: 1416:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1417:	{
    #####: 1418:	  state->coins += 3;
    #####: 1419:	}	
        5: 1420:    }	
        -: 1421:
        -: 1422:  //add bonus
        1: 1423:  state->coins += bonus;
        -: 1424:
        1: 1425:  return 0;
        -: 1426:}
        -: 1427:
        -: 1428:/************************************************************/
        -: 1429:/************************************************************/
        -: 1430:/************************************************************/
        -: 1431://new functions 4-12-17
        -: 1432:
function playAdventurer called 0 returned 0% blocks executed 0%
        -: 1433:int playAdventurer(struct gameState *state, int currentPlayer)
        -: 1434:{
        -: 1435:	int cardDrawn;
    #####: 1436:	int z = 0;
    #####: 1437:	int drawntreasure = 0;
        -: 1438:	int temphand[MAX_HAND];
        -: 1439:
    #####: 1440:	while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
        -: 1441:		
    #####: 1442:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1443:		  shuffle(currentPlayer, state);
    #####: 1444:		}
        -: 1445:		
    #####: 1446:    drawCard(currentPlayer, state);
    #####: 1447:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card. CORRECT
        -: 1448:		//cardDrawn = state->hand[currentPlayer][0]; //INCORRECT - this is a bug. cardDrawn should be last element in the hand, not first
        -: 1449:		
    #####: 1450:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1451:		  drawntreasure++;
    #####: 1452:    }
        -: 1453:		
        -: 1454:    else{
    #####: 1455:		  temphand[z]=cardDrawn;
    #####: 1456:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1457:		  z++;
        -: 1458:		}
        -: 1459:	}
        -: 1460:	 
    #####: 1461:  while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1462:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1463:		z=z-1;
        -: 1464:	 }
        -: 1465:	
    #####: 1466:  return 0;
        -: 1467:}
        -: 1468:
        -: 1469:/*int playCouncilRoom(int currentPlayer, struct gameState *state, int handPos)
        -: 1470:{
        -: 1471:	int i;	
        -: 1472:	//+4 Cards
        -: 1473:      for (i = 0; i < 4; i++)
        -: 1474:	{
        -: 1475:	  drawCard(currentPlayer, state);
        -: 1476:	}
        -: 1477:			
        -: 1478:      //+1 Buy
        -: 1479:      state->numBuys++;
        -: 1480:			
        -: 1481:      //Each other player draws a card
        -: 1482:      for (i = 0; i < state->numPlayers; i++)
        -: 1483:		{
        -: 1484:		  if ( i != currentPlayer )
        -: 1485:		    {
        -: 1486:		      drawCard(i, state);
        -: 1487:		    }
        -: 1488:		}
        -: 1489:				
        -: 1490:      //put played card in played card pile
        -: 1491:      discardCard(handPos, currentPlayer, state, 0);
        -: 1492:			
        -: 1493:      return 0;
        -: 1494:}*/
        -: 1495:
        -: 1496:/*int playFeast(int currentPlayer, struct gameState *state, int temphand[], int choice1)
        -: 1497:{
        -: 1498:	 //gain card with cost up to 5
        -: 1499:      //Backup hand
        -: 1500:	int i, x;
        -: 1501:
        -: 1502:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -: 1503:	temphand[i] = state->hand[currentPlayer][i];//Backup card
        -: 1504:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1505:      }
        -: 1506:      //Backup hand
        -: 1507:
        -: 1508:      //Update Coins for Buy
        -: 1509:      updateCoins(currentPlayer, state, 5);
        -: 1510:      x = 1;//Condition to loop on
        -: 1511:      while( x == 1) {//Buy one card
        -: 1512:	if (supplyCount(choice1, state) <= 0){
        -: 1513:	  if (DEBUG)
        -: 1514:	    printf("None of that card left, sorry!\n");
        -: 1515:
        -: 1516:	  if (DEBUG){
        -: 1517:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1518:	  }
        -: 1519:	}
        -: 1520:	else if (state->coins < getCost(choice1)){
        -: 1521:	  printf("That card is too expensive!\n");
        -: 1522:
        -: 1523:	  if (DEBUG){
        -: 1524:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1525:	  }
        -: 1526:	}
        -: 1527:	else{
        -: 1528:
        -: 1529:	  if (DEBUG){
        -: 1530:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1531:	  }
        -: 1532:
        -: 1533:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        -: 1534:	  x = 0;//No more buying cards
        -: 1535:
        -: 1536:	  if (DEBUG){
        -: 1537:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1538:	  }
        -: 1539:
        -: 1540:	}
        -: 1541:      }     
        -: 1542:
        -: 1543:      //Reset Hand
        -: 1544:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -: 1545:	state->hand[currentPlayer][i] = temphand[i];
        -: 1546:	temphand[i] = -1;
        -: 1547:      }
        -: 1548:      //Reset Hand
        -: 1549:      			
        -: 1550:      return 0;
        -: 1551:}*/
        -: 1552:
        -: 1553:/*int playGardens()
        -: 1554:{
        -: 1555:	return -1;
        -: 1556:}*/
        -: 1557:/*
        -: 1558: int playMine(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) 
        -: 1559: {
        -: 1560:     int i, j;
        -: 1561:
        -: 1562:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1563:
        -: 1564:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -: 1565:	{
        -: 1566:	  return -1;
        -: 1567:	}
        -: 1568:		
        -: 1569:      if (choice2 > treasure_map || choice2 < curse)
        -: 1570:	{
        -: 1571:	  return -1;
        -: 1572:	}
        -: 1573:
        -: 1574:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -: 1575:	{
        -: 1576:	  return -1;
        -: 1577:	}
        -: 1578:
        -: 1579:      gainCard(choice2, state, 2, currentPlayer);
        -: 1580:
        -: 1581:      //discard card from hand
        -: 1582:      discardCard(handPos, currentPlayer, state, 0);
        -: 1583:
        -: 1584:      //discard trashed card
        -: 1585:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1586:	{
        -: 1587:	  if (state->hand[currentPlayer][i] == j)
        -: 1588:	    {
        -: 1589:	      discardCard(i, currentPlayer, state, 0);			
        -: 1590:	      break;
        -: 1591:	    }
        -: 1592:	}
        -: 1593:			
        -: 1594:      return 0;
        -: 1595:}*/
        -: 1596:
        -: 1597:/*int playRemodel(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos)
        -: 1598:{
        -: 1599:     int i, j; 
        -: 1600:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1601:
        -: 1602:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1603:	{
        -: 1604:	  return -1;
        -: 1605:	}
        -: 1606:
        -: 1607:      gainCard(choice2, state, 0, currentPlayer);
        -: 1608:
        -: 1609:      //discard card from hand
        -: 1610:      discardCard(handPos, currentPlayer, state, 0);
        -: 1611:
        -: 1612:      //discard trashed card
        -: 1613:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1614:	{
        -: 1615:	  if (state->hand[currentPlayer][i] == j)
        -: 1616:	    {
        -: 1617:	      discardCard(i, currentPlayer, state, 0);			
        -: 1618:	      break;
        -: 1619:	    }
        -: 1620:	}
        -: 1621:
        -: 1622:
        -: 1623:      return 0;
        -: 1624:  }*/
        -: 1625:
function playSmithy called 0 returned 0% blocks executed 0%
        -: 1626:int playSmithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1627:{
        -: 1628:      //+3 Cards
        -: 1629:	int i;
    #####: 1630:      for (i = 0; i <= 3; i++) //INCORRECT, THIS IS A BUG. SHOULD BE i < 3 not i <= 3.
branch  0 never executed
branch  1 never executed
        -: 1631:    	{
    #####: 1632:    	  drawCard(currentPlayer, state);
    #####: 1633:    	}
        -: 1634:			
        -: 1635:      //discard card from hand
    #####: 1636:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1637:      return 0;
        -: 1638:}
        -: 1639:
function playVillage called 0 returned 0% blocks executed 0%
        -: 1640: int playVillage(int currentPlayer, struct gameState *state, int handPos)
        -: 1641: {
        -: 1642:      //+1 Card
    #####: 1643:      drawCard(currentPlayer, state);
        -: 1644:			
        -: 1645:      //+2 Actions
        -: 1646:      //state->numActions = state->numActions + 2;
    #####: 1647:      state->numActions = 2; //	INCORRECT - THIS IS A BUG. This resets numActions to 2 rather than adding 2 to it
        -: 1648:			
        -: 1649:      //discard played card from hand
    #####: 1650:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1651:      return 0;
        -: 1652:}
        -: 1653:
        -: 1654: /*int playBaron(int currentPlayer, struct gameState *state, int choice1)
        -: 1655: {
        -: 1656:      state->numBuys++;//Increase buys by 1!
        -: 1657:      if (choice1 > 0){//Boolean true or going to discard an estate
        -: 1658:	int p = 0;//Iterator for hand!
        -: 1659:	int card_not_discarded = 1;//Flag for discard set!
        -: 1660:	
        -: 1661:	while(card_not_discarded){
        -: 1662:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
        -: 1663:	    state->coins += 4;//Add 4 coins to the amount of coins
        -: 1664:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        -: 1665:	    state->discardCount[currentPlayer]++;
        -: 1666:	    
        -: 1667:	    for (;p < state->handCount[currentPlayer]; p++){
        -: 1668:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1669:	    }
        -: 1670:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        -: 1671:	    state->handCount[currentPlayer]--;
        -: 1672:	    card_not_discarded = 0;//Exit the loop
        -: 1673:	  }
        -: 1674:	 
        -: 1675:	  else if (p > state->handCount[currentPlayer]){
        -: 1676:	    if(DEBUG) {
        -: 1677:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1678:	      printf("Must gain an estate if there are any\n");
        -: 1679:	    }
        -: 1680:	    if (supplyCount(estate, state) > 0){
        -: 1681:	      gainCard(estate, state, 0, currentPlayer);
        -: 1682:	      state->supplyCount[estate]--;//Decrement estates
        -: 1683:	      if (supplyCount(estate, state) == 0){
        -: 1684:		isGameOver(state);
        -: 1685:	      }
        -: 1686:	    }
        -: 1687:	    card_not_discarded = 0;//Exit the loop
        -: 1688:	  }
        -: 1689:			    
        -: 1690:	  else{
        -: 1691:	    p++;//Next card
        -: 1692:	  }
        -: 1693:	}
        -: 1694:      }
        -: 1695:			    
        -: 1696:      else{
        -: 1697:	if (supplyCount(estate, state) > 0){
        -: 1698:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -: 1699:	  state->supplyCount[estate]--;//Decrement Estates
        -: 1700:	  if (supplyCount(estate, state) == 0){
        -: 1701:	    isGameOver(state);
        -: 1702:	  }
        -: 1703:	}
        -: 1704:      }
        -: 1705:	    
        -: 1706:      
        -: 1707:      return 0;
        -: 1708:  }*/
        -: 1709:
function playGreatHall called 0 returned 0% blocks executed 0%
        -: 1710:int playGreatHall(int currentPlayer, struct gameState *state, int handPos)
        -: 1711:{
        -: 1712:  //+1 Card
    #####: 1713:  drawCard(currentPlayer, state);
        -: 1714:		
        -: 1715:  //+1 Actions
    #####: 1716:  state->numActions++;
        -: 1717:		
        -: 1718:  //discard card from hand
    #####: 1719:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1720:  return 0;
        -: 1721:}
        -: 1722:
        -: 1723:/*int playMinion(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2)
        -: 1724:{
        -: 1725:  int i, j; 
        -: 1726: 
        -: 1727:  //+1 action
        -: 1728:  state->numActions++;
        -: 1729:		
        -: 1730:  //discard card from hand
        -: 1731:  discardCard(handPos, currentPlayer, state, 0);
        -: 1732:		
        -: 1733:  if (choice1)		//+2 coins
        -: 1734:{
        -: 1735:  state->coins = state->coins + 2;
        -: 1736:}
        -: 1737:		
        -: 1738:  else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1739:{
        -: 1740:  //discard hand
        -: 1741:  while(numHandCards(state) > 0)
        -: 1742:    {
        -: 1743:      discardCard(handPos, currentPlayer, state, 0);
        -: 1744:    }
        -: 1745:			
        -: 1746:  //draw 4
        -: 1747:  for (i = 0; i < 4; i++)
        -: 1748:    {
        -: 1749:      drawCard(currentPlayer, state);
        -: 1750:    }
        -: 1751:			
        -: 1752:  //other players discard hand and redraw if hand size > 4
        -: 1753:  for (i = 0; i < state->numPlayers; i++)
        -: 1754:    {
        -: 1755:      if (i != currentPlayer)
        -: 1756:	{
        -: 1757:	  if ( state->handCount[i] > 4 )
        -: 1758:	    {
        -: 1759:	      //discard hand
        -: 1760:	      while( state->handCount[i] > 0 )
        -: 1761:		{
        -: 1762:		  discardCard(handPos, i, state, 0);
        -: 1763:		}
        -: 1764:						
        -: 1765:	      //draw 4
        -: 1766:	      for (j = 0; j < 4; j++)
        -: 1767:		{
        -: 1768:		  drawCard(i, state);
        -: 1769:		}
        -: 1770:	    }
        -: 1771:	}
        -: 1772:    }
        -: 1773:			
        -: 1774:	}
        -: 1775:  return 0;
        -: 1776:}*/
        -: 1777:
        -: 1778:/*int playSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3)
        -: 1779:{
        -: 1780:	if (choice1 == 1)
        -: 1781:	{
        -: 1782:	  //+2 cards
        -: 1783:	  drawCard(currentPlayer, state);
        -: 1784:	  drawCard(currentPlayer, state);
        -: 1785:	}
        -: 1786:      else if (choice1 == 2)
        -: 1787:	{
        -: 1788:	  //+2 coins
        -: 1789:	  state->coins = state->coins + 2;
        -: 1790:	}
        -: 1791:      else
        -: 1792:	{
        -: 1793:	  //trash 2 cards in hand
        -: 1794:	  discardCard(choice2, currentPlayer, state, 1);
        -: 1795:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1796:	}
        -: 1797:			
        -: 1798:      //discard card from hand
        -: 1799:      discardCard(handPos, currentPlayer, state, 0);
        -: 1800:      return 0;
        -: 1801:}*/
        -: 1802:
        -: 1803:/*int playTribute(int currentPlayer, struct gameState *state, int nextPlayer)
        -: 1804:{  
        -: 1805:	int i; 
        -: 1806:	int tributeRevealedCards[2] = {-1, -1};
        -: 1807:
        -: 1808:	  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
        -: 1809:	if (state->deckCount[nextPlayer] > 0){
        -: 1810:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1811:	  state->deckCount[nextPlayer]--;
        -: 1812:	}
        -: 1813:	else if (state->discardCount[nextPlayer] > 0){
        -: 1814:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
        -: 1815:	  state->discardCount[nextPlayer]--;
        -: 1816:	}
        -: 1817:	else{
        -: 1818:	  //No Card to Reveal
        -: 1819:	  if (DEBUG){
        -: 1820:	    printf("No cards to reveal\n");
        -: 1821:	  }
        -: 1822:	}
        -: 1823:	  }
        -: 1824:	    
        -: 1825:	  else{
        -: 1826:	if (state->deckCount[nextPlayer] == 0){
        -: 1827:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
        -: 1828:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
        -: 1829:	    state->deckCount[nextPlayer]++;
        -: 1830:	    state->discard[nextPlayer][i] = -1;
        -: 1831:	    state->discardCount[nextPlayer]--;
        -: 1832:	  }
        -: 1833:			    
        -: 1834:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1835:	} 
        -: 1836:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1837:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1838:	state->deckCount[nextPlayer]--;
        -: 1839:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1840:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1841:	state->deckCount[nextPlayer]--;
        -: 1842:	  }    
        -: 1843:		       
        -: 1844:	  if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
        -: 1845:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        -: 1846:	state->playedCardCount++;
        -: 1847:	tributeRevealedCards[1] = -1;
        -: 1848:	  }
        -: 1849:
        -: 1850:	  for (i = 0; i <= 2; i ++){
        -: 1851:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
        -: 1852:	  state->coins += 2;
        -: 1853:	}
        -: 1854:		    
        -: 1855:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
        -: 1856:	  drawCard(currentPlayer, state);
        -: 1857:	  drawCard(currentPlayer, state);
        -: 1858:	}
        -: 1859:	else{//Action Card
        -: 1860:	  state->numActions = state->numActions + 2;
        -: 1861:	}
        -: 1862:	  }
        -: 1863:	    
        -: 1864:	  return 0;
        -: 1865:}*/
        -: 1866:
        -: 1867:/*int playAmbassador(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos)
        -: 1868:{ 
        -: 1869:	int i;
        -: 1870:    int j = 0;		//used to check if player has enough cards to discard
        -: 1871:
        -: 1872:      if (choice2 > 2 || choice2 < 0)
        -: 1873:	{
        -: 1874:	  return -1;				
        -: 1875:	}
        -: 1876:
        -: 1877:      if (choice1 == handPos)
        -: 1878:	{
        -: 1879:	  return -1;
        -: 1880:	}
        -: 1881:
        -: 1882:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1883:	{
        -: 1884:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1885:	    {
        -: 1886:	      j++;
        -: 1887:	    }
        -: 1888:	}
        -: 1889:      if (j < choice2)
        -: 1890:	{
        -: 1891:	  return -1;				
        -: 1892:	}
        -: 1893:
        -: 1894:      if (DEBUG) 
        -: 1895:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1896:
        -: 1897:      //increase supply count for choosen card by amount being discarded
        -: 1898:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1899:			
        -: 1900:      //each other player gains a copy of revealed card
        -: 1901:      for (i = 0; i < state->numPlayers; i++)
        -: 1902:	{
        -: 1903:	  if (i != currentPlayer)
        -: 1904:	    {
        -: 1905:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1906:	    }
        -: 1907:	}
        -: 1908:
        -: 1909:      //discard played card from hand
        -: 1910:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1911:
        -: 1912:      //trash copies of cards returned to supply
        -: 1913:      for (j = 0; j < choice2; j++)
        -: 1914:	{
        -: 1915:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1916:	    {
        -: 1917:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1918:		{
        -: 1919:		  discardCard(i, currentPlayer, state, 1);
        -: 1920:		  break;
        -: 1921:		}
        -: 1922:	    }
        -: 1923:	}			
        -: 1924:
        -: 1925:      return 0;
        -: 1926:}*/
        -: 1927:
        -: 1928:/*int playCutpurse(int currentPlayer, struct gameState *state, int handPos)
        -: 1929:{	
        -: 1930:	int i, j, k;
        -: 1931:	  updateCoins(currentPlayer, state, 2);
        -: 1932:	  for (i = 0; i < state->numPlayers; i++)
        -: 1933:	{
        -: 1934:	  if (i != currentPlayer)
        -: 1935:	    {
        -: 1936:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1937:		{
        -: 1938:		  if (state->hand[i][j] == copper)
        -: 1939:		    {
        -: 1940:		      discardCard(j, i, state, 0);
        -: 1941:		      break;
        -: 1942:		    }
        -: 1943:		  if (j == state->handCount[i])
        -: 1944:		    {
        -: 1945:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1946:			{
        -: 1947:			  if (DEBUG)
        -: 1948:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1949:			}	
        -: 1950:		      break;
        -: 1951:		    }		
        -: 1952:		}
        -: 1953:					
        -: 1954:	    }
        -: 1955:				
        -: 1956:	}				
        -: 1957:
        -: 1958:  //discard played card from hand
        -: 1959:  discardCard(handPos, currentPlayer, state, 0);			
        -: 1960:
        -: 1961:  return 0;
        -: 1962:}*/
        -: 1963:
        -: 1964: /*int playEmbargo(int currentPlayer, struct gameState *state, int handPos, int choice1)
        -: 1965:{ 
        -: 1966: 	//+2 Coins
        -: 1967:     state->coins = state->coins + 2;
        -: 1968:			
        -: 1969:      //see if selected pile is in play
        -: 1970:      if ( state->supplyCount[choice1] == -1 )
        -: 1971:	{
        -: 1972:	  return -1;
        -: 1973:	}
        -: 1974:			
        -: 1975:      //add embargo token to selected supply pile
        -: 1976:      state->embargoTokens[choice1]++;
        -: 1977:			
        -: 1978:      //trash card
        -: 1979:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1980:      return 0;
        -: 1981: }*/
        -: 1982:
        -: 1983:/*int playOutpost(int currentPlayer, struct gameState *state, int handPos)
        -: 1984:{
        -: 1985: //set outpost flag
        -: 1986:  state->outpostPlayed++;
        -: 1987:		
        -: 1988:  //discard card
        -: 1989:  discardCard(handPos, currentPlayer, state, 0);
        -: 1990:  return 0;
        -: 1991:}*/
        -: 1992:
        -: 1993:/*int playSalvager(int currentPlayer, struct gameState *state, int handPos, int choice1)
        -: 1994:{
        -: 1995:	//+1 buy
        -: 1996:	  state->numBuys++;
        -: 1997:			
        -: 1998:	  if (choice1)
        -: 1999:	{
        -: 2000:	  //gain coins equal to trashed card
        -: 2001:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 2002:	  //trash card
        -: 2003:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 2004:	}
        -: 2005:			
        -: 2006:	  //discard card
        -: 2007:	  discardCard(handPos, currentPlayer, state, 0);
        -: 2008:	  return 0;
        -: 2009:}*/
        -: 2010:
function playSeaHag called 0 returned 0% blocks executed 0%
        -: 2011:int playSeaHag(int currentPlayer, struct gameState *state)
        -: 2012:{
        -: 2013:  	int i;
    #####: 2014:  	 for (i = 0; i < state->numPlayers+1; i++){ //INCORRECT - SHOULD BE i < state->numPlayers. THIS IS A BUG
branch  0 never executed
branch  1 never executed
    #####: 2015:		if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 2016:		  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
    #####: 2017:		  state->deckCount[i]--;
    #####: 2018:		  state->discardCount[i]++;
    #####: 2019:		  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 2020:		}
    #####: 2021:	  }
    #####: 2022:	return 0;
        -: 2023:}
        -: 2024:
        -: 2025:/*int playTreasureMap(int currentPlayer, struct gameState *state, int handPos)
        -: 2026:{
        -: 2027:	int i, index;
        -: 2028:      //search hand for another treasure_map
        -: 2029:      index = -1;
        -: 2030:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 2031:	{
        -: 2032:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 2033:	    {
        -: 2034:	      index = i;
        -: 2035:	      break;
        -: 2036:	    }
        -: 2037:	}
        -: 2038:      if (index > -1)
        -: 2039:	{
        -: 2040:	  //trash both treasure cards
        -: 2041:	  discardCard(handPos, currentPlayer, state, 1);
        -: 2042:	  discardCard(index, currentPlayer, state, 1);
        -: 2043:
        -: 2044:	  //gain 4 Gold cards
        -: 2045:	  for (i = 0; i < 4; i++)
        -: 2046:	    {
        -: 2047:	      gainCard(gold, state, 1, currentPlayer);
        -: 2048:	    }
        -: 2049:				
        -: 2050:	  //return success
        -: 2051:	  return 1;
        -: 2052:	}
        -: 2053:			
        -: 2054:      //no second treasure_map found in hand
        -: 2055:      return -1;
        -: 2056:}*/
        -: 2057:
        -: 2058://end of dominion.c
        -: 2059:
unittest3.c
TESTING isGameOver()
TEST 1: supply of province cards = 0
TEST 1 SUCCESS
TEST 2: supply of province cards = 1, # of empty supply piles < 3
TEST 2 SUCCESS
TEST 3: supply of province cards = 1, # of empty supply piles = 3
TEST 3 SUCCESS
TEST 4: supply of province cards = 1, # of empty supply piles > 3
TEST 4 SUCCESS
isGameOver() PASS
Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:85.90% of 78
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
No calls

Function 'shuffle'
Lines executed:94.44% of 18
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:0.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:100.00% of 12
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:33.33% of 24
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 256
Branches executed:0.00% of 181
Taken at least once:0.00% of 181
No calls

Function 'discardCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'gainCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'playAdventurer'
Lines executed:0.00% of 18
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'playSmithy'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'playVillage'
Lines executed:0.00% of 4
No branches
No calls

Function 'playGreatHall'
Lines executed:0.00% of 4
No branches
No calls

Function 'playSeaHag'
Lines executed:0.00% of 9
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls

File 'dominion.c'
Lines executed:18.42% of 646
Branches executed:17.75% of 417
Taken at least once:14.87% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:// set NOISY_TEST to 0 to remove printfs from output
        -:    9:#define NOISY_TEST 1
        -:   10:
        -:   11:
function compare called 28 returned 100% blocks executed 85%
        -:   12:int compare(const void* a, const void* b) {
       28:   13:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   14:    return 1;
       28:   15:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
       10:   16:    return -1;
       18:   17:  return 0;
       28:   18:}
        -:   19:
function newGame called 0 returned 0% blocks executed 0%
        -:   20:struct gameState* newGame() {
    #####:   21:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   22:  return g;
        -:   23:}
        -:   24:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   25:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   26:		  int k8, int k9, int k10) {
    #####:   27:  int* k = malloc(10 * sizeof(int));
    #####:   28:  k[0] = k1;
    #####:   29:  k[1] = k2;
    #####:   30:  k[2] = k3;
    #####:   31:  k[3] = k4;
    #####:   32:  k[4] = k5;
    #####:   33:  k[5] = k6;
    #####:   34:  k[6] = k7;
    #####:   35:  k[7] = k8;
    #####:   36:  k[8] = k9;
    #####:   37:  k[9] = k10;
    #####:   38:  return k;
        -:   39:}
        -:   40:
function initializeGame called 1 returned 100% blocks executed 87%
        -:   41:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   42:		   struct gameState *state) {
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;			
        -:   47:  //set up random number generator
        1:   48:  SelectStream(1);
        1:   49:  PutSeed((long)randomSeed);
        -:   50:  
        -:   51:  //check number of players
        2:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   53:    {
    #####:   54:      return -1;
        -:   55:    }
        -:   56:
        -:   57:  //set number of players
        1:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
       22:   61:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   62:    {
      220:   63:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   64:        {
      190:   65:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   66:	    {
    #####:   67:	      return -1;
        -:   68:	    }
      100:   69:        }
       10:   70:    }
        -:   71:
        -:   72:
        -:   73:  //initialize supply
        -:   74:  ///////////////////////////////
        -:   75:
        -:   76:  //set number of Curse cards
        1:   77:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 10;
        1:   80:    }
    #####:   81:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 20;
    #####:   84:    }
        -:   85:  else
        -:   86:    {
    #####:   87:      state->supplyCount[curse] = 30;
        -:   88:    }
        -:   89:
        -:   90:  //set number of Victory cards
        1:   91:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   92:    {
        1:   93:      state->supplyCount[estate] = 8;
        1:   94:      state->supplyCount[duchy] = 8;
        1:   95:      state->supplyCount[province] = 8;
        1:   96:    }
        -:   97:  else
        -:   98:    {
    #####:   99:      state->supplyCount[estate] = 12;
    #####:  100:      state->supplyCount[duchy] = 12;
    #####:  101:      state->supplyCount[province] = 12;
        -:  102:    }
        -:  103:
        -:  104:  //set number of Treasure cards
        1:  105:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  106:  state->supplyCount[silver] = 40;
        1:  107:  state->supplyCount[gold] = 30;
        -:  108:
        -:  109:  //set number of Kingdom cards
       42:  110:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  111:    {
      330:  112:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  113:    	{
      155:  114:    	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  115:    	    {
        -:  116:    	      //check if card is a 'Victory' Kingdom card
       19:  117:    	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens){
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        2:  118:          		  if (numPlayers == 2){ 
branch  0 taken 100%
branch  1 taken 0%
        2:  119:          		    state->supplyCount[i] = 8; 
        2:  120:          		  }
    #####:  121:          		  else{ state->supplyCount[i] = 12; }
        2:  122:    		      }
        -:  123:    	      
        -:  124:            else{
        8:  125:        		  state->supplyCount[i] = 10;
        -:  126:        		}
       10:  127:    	      break;
        -:  128:  	       }
        -:  129:    	  else    //card is not in the set choosen for the game
        -:  130:    	    {
      145:  131:    	      state->supplyCount[i] = -1;
        -:  132:    	    }
      145:  133:  	}
        -:  134:
       20:  135:    }
        -:  136:
        -:  137:  ////////////////////////
        -:  138:  //supply intilization complete
        -:  139:
        -:  140:  //set player decks
        6:  141:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  142:    {
        2:  143:      state->deckCount[i] = 0;
       16:  144:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  145:	{
        6:  146:	  state->deck[i][j] = estate;
        6:  147:	  state->deckCount[i]++;
        6:  148:	}
       32:  149:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  150:	{
       14:  151:	  state->deck[i][j] = copper;
       14:  152:	  state->deckCount[i]++;		
       14:  153:	}
        2:  154:    }
        -:  155:
        -:  156:  //shuffle player decks
        6:  157:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  158:    {
        2:  159:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  160:	{
    #####:  161:	  return -1;
        -:  162:	}
        2:  163:    }
        -:  164:
        -:  165:  //draw player hands
        6:  166:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  167:    {  
        -:  168:      //initialize hand size to zero
        2:  169:      state->handCount[i] = 0;
        2:  170:      state->discardCount[i] = 0;
        -:  171:      //draw 5 cards
        -:  172:      // for (j = 0; j < 5; j++)
        -:  173:      //	{
        -:  174:      //	  drawCard(i, state);
        -:  175:      //	}
        2:  176:    }
        -:  177:  
        -:  178:  //set embargo tokens to 0 for all supply piles
       56:  179:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  180:    {
       27:  181:      state->embargoTokens[i] = 0;
       27:  182:    }
        -:  183:
        -:  184:  //initialize first player's turn
        1:  185:  state->outpostPlayed = 0;
        1:  186:  state->phase = 0;
        1:  187:  state->numActions = 1;
        1:  188:  state->numBuys = 1;
        1:  189:  state->playedCardCount = 0;
        1:  190:  state->whoseTurn = 0;
        1:  191:  state->handCount[state->whoseTurn] = 0;
        -:  192:  //int it; move to top
        -:  193:
        -:  194:  //Moved draw cards to here, only drawing at the start of a turn
       12:  195:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
        5:  196:    drawCard(state->whoseTurn, state);
        5:  197:  }
        -:  198:
        1:  199:  updateCoins(state->whoseTurn, state, 0);
        -:  200:
        1:  201:  return 0;
        1:  202:}
        -:  203:
function shuffle called 2 returned 100% blocks executed 93%
        -:  204:int shuffle(int player, struct gameState *state) {
        -:  205: 
        -:  206:
        -:  207:  int newDeck[MAX_DECK];
        2:  208:  int newDeckPos = 0;
        -:  209:  int card;
        -:  210:  int i;
        -:  211:
        2:  212:  if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  213:    return -1;
        2:  214:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  215:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  216:
       44:  217:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
       20:  218:    card = floor(Random() * state->deckCount[player]);
       20:  219:    newDeck[newDeckPos] = state->deck[player][card];
       20:  220:    newDeckPos++;
      140:  221:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
       50:  222:      state->deck[player][i] = state->deck[player][i+1];
       50:  223:    }
       20:  224:    state->deckCount[player]--;
        -:  225:  }
       44:  226:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
       20:  227:    state->deck[player][i] = newDeck[i];
       20:  228:    state->deckCount[player]++;
       20:  229:  }
        -:  230:
        2:  231:  return 0;
        2:  232:}
        -:  233:
function playCard called 0 returned 0% blocks executed 0%
        -:  234:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  235:{	
        -:  236:  int card;
    #####:  237:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  238:
        -:  239:  //check if it is the right phase
    #####:  240:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  241:    {
    #####:  242:      return -1;
        -:  243:    }
        -:  244:	
        -:  245:  //check if player has enough actions
    #####:  246:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  247:    {
    #####:  248:      return -1;
        -:  249:    }
        -:  250:	
        -:  251:  //get card played
    #####:  252:  card = handCard(handPos, state);
        -:  253:	
        -:  254:  //check if selected card is an action
    #####:  255:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  256:    {
    #####:  257:      return -1;
        -:  258:    }
        -:  259:	
        -:  260:  //play card
    #####:  261:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  262:    {
    #####:  263:      return -1;
        -:  264:    }
        -:  265:	
        -:  266:  //reduce number of actions
    #####:  267:  state->numActions--;
        -:  268:
        -:  269:  //update coins (Treasure cards may be added with card draws)
    #####:  270:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  271:	
    #####:  272:  return 0;
    #####:  273:}
        -:  274:
function buyCard called 0 returned 0% blocks executed 0%
        -:  275:int buyCard(int supplyPos, struct gameState *state) {
        -:  276:  int who;
        -:  277:  if (DEBUG){
        -:  278:    printf("Entering buyCard...\n");
        -:  279:  }
        -:  280:
        -:  281:  // I don't know what to do about the phase thing.
        -:  282:
    #####:  283:  who = state->whoseTurn;
        -:  284:
    #####:  285:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  286:    if (DEBUG)
        -:  287:      printf("You do not have any buys left\n");
    #####:  288:    return -1;
    #####:  289:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  290:    if (DEBUG)
        -:  291:      printf("There are not any of that type of card left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  294:    if (DEBUG) 
        -:  295:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  296:    return -1;
        -:  297:  } else {
    #####:  298:    state->phase=1;
        -:  299:    //state->supplyCount[supplyPos]--;
    #####:  300:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  301:  
    #####:  302:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  303:    state->numBuys--;
        -:  304:    if (DEBUG)
        -:  305:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  306:  }
        -:  307:
        -:  308:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  309:  //state->discardCount[who]++;
        -:  310:    
    #####:  311:  return 0;
    #####:  312:}
        -:  313:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  314:int numHandCards(struct gameState *state) {
    #####:  315:  return state->handCount[ whoseTurn(state) ];
        -:  316:}
        -:  317:
function handCard called 0 returned 0% blocks executed 0%
        -:  318:int handCard(int handPos, struct gameState *state) {
    #####:  319:  int currentPlayer = whoseTurn(state);
    #####:  320:  return state->hand[currentPlayer][handPos];
        -:  321:}
        -:  322:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  323:int supplyCount(int card, struct gameState *state) {
    #####:  324:  return state->supplyCount[card];
        -:  325:}
        -:  326:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  327:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  328:  int i;
    #####:  329:  int count = 0;
        -:  330:
    #####:  331:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  332:    {
    #####:  333:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  334:    }
        -:  335:
    #####:  336:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  337:    {
    #####:  338:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  339:    }
        -:  340:
    #####:  341:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  342:    {
    #####:  343:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  344:    }
        -:  345:
    #####:  346:  return count;
        -:  347:}
        -:  348:
function whoseTurn called 0 returned 0% blocks executed 0%
        -:  349:int whoseTurn(struct gameState *state) {
    #####:  350:  return state->whoseTurn;
        -:  351:}
        -:  352:
function endTurn called 0 returned 0% blocks executed 0%
        -:  353:int endTurn(struct gameState *state) {
        -:  354:  int k;
        -:  355:  int i;
    #####:  356:  int currentPlayer = whoseTurn(state);
        -:  357:  
        -:  358:  //Discard hand
    #####:  359:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  360:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  361:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  362:  }
    #####:  363:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  364:    
        -:  365:  //Code for determining the player
    #####:  366:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  367:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  368:  }
        -:  369:  else{
    #####:  370:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  371:  }
        -:  372:
    #####:  373:  state->outpostPlayed = 0;
    #####:  374:  state->phase = 0;
    #####:  375:  state->numActions = 1;
    #####:  376:  state->coins = 0;
    #####:  377:  state->numBuys = 1;
    #####:  378:  state->playedCardCount = 0;
    #####:  379:  state->handCount[state->whoseTurn] = 0;
        -:  380:
        -:  381:  //int k; move to top
        -:  382:  //Next player draws hand
    #####:  383:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  384:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  385:  }
        -:  386:
        -:  387:  //Update money
    #####:  388:  updateCoins(state->whoseTurn, state , 0);
        -:  389:
    #####:  390:  return 0;
        -:  391:}
        -:  392:
function isGameOver called 4 returned 100% blocks executed 100%
        -:  393:int isGameOver(struct gameState *state) {
        -:  394:  int i;
        -:  395:  int j;
        -:  396:	
        -:  397:  //if stack of Province cards is empty, the game ends
        4:  398:  if (state->supplyCount[province] == 0)
branch  0 taken 50%
branch  1 taken 50%
        -:  399:    {
        2:  400:      return 1;
        -:  401:    }
        -:  402:
        -:  403:  //if three supply piles are at 0, the game ends
        2:  404:  j = 0;
      104:  405:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  406:    {
       50:  407:      if (state->supplyCount[i] == 0)
branch  0 taken 6%
branch  1 taken 94%
        -:  408:	{
        3:  409:	  j++;
        3:  410:	}
       50:  411:    }
        2:  412:  if ( j >= 3)
branch  0 taken 50%
branch  1 taken 50%
        -:  413:    {
        1:  414:      return 1;
        -:  415:    }
        -:  416:
        1:  417:  return 0;
        4:  418:}
        -:  419:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  420:int scoreFor (int player, struct gameState *state) {
        -:  421:
        -:  422:  int i;
    #####:  423:  int score = 0;
        -:  424:  //score from hand
    #####:  425:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  426:    {
    #####:  427:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  433:    }
        -:  434:
        -:  435:  //score from discard
    #####:  436:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  437:    {
    #####:  438:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  444:    }
        -:  445:
        -:  446:  //score from deck
    #####:  447:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  448:    {
    #####:  449:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  455:    }
        -:  456:
    #####:  457:  return score;
        -:  458:}
        -:  459:
function getWinners called 0 returned 0% blocks executed 0%
        -:  460:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  461:  int i;	
        -:  462:  int j;
        -:  463:  int highScore;
        -:  464:  int currentPlayer;
        -:  465:
        -:  466:  //get score for each player
    #####:  467:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  468:    {
        -:  469:      //set unused player scores to -9999
    #####:  470:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  471:	{
    #####:  472:	  players[i] = -9999;
    #####:  473:	}
        -:  474:      else
        -:  475:	{
    #####:  476:	  players[i] = scoreFor (i, state);
        -:  477:	}
    #####:  478:    }
        -:  479:
        -:  480:  //find highest score
    #####:  481:  j = 0;
    #####:  482:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  483:    {
    #####:  484:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  485:	{
    #####:  486:	  j = i;
    #####:  487:	}
    #####:  488:    }
    #####:  489:  highScore = players[j];
        -:  490:
        -:  491:  //add 1 to players who had less turns
    #####:  492:  currentPlayer = whoseTurn(state);
    #####:  493:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  494:    {
    #####:  495:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  496:	{
    #####:  497:	  players[i]++;
    #####:  498:	}
    #####:  499:    }
        -:  500:
        -:  501:  //find new highest score
    #####:  502:  j = 0;
    #####:  503:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  504:    {
    #####:  505:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  506:	{
    #####:  507:	  j = i;
    #####:  508:	}
    #####:  509:    }
    #####:  510:  highScore = players[j];
        -:  511:
        -:  512:  //set winners in array to 1 and rest to 0
    #####:  513:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  514:    {
    #####:  515:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  516:	{
    #####:  517:	  players[i] = 1;
    #####:  518:	}
        -:  519:      else
        -:  520:	{
    #####:  521:	  players[i] = 0;
        -:  522:	}
    #####:  523:    }
        -:  524:
    #####:  525:  return 0;
        -:  526:}
        -:  527:
function drawCard called 5 returned 100% blocks executed 41%
        -:  528:int drawCard(int player, struct gameState *state)
        -:  529:{	
        -:  530:  int count;
        -:  531:  int deckCounter;
        5:  532:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0%
branch  1 taken 100%
        -:  533:    
        -:  534:    //Step 1 Shuffle the discard pile back into a deck
        -:  535:    int i;
        -:  536:    //Move discard to deck
    #####:  537:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  538:      state->deck[player][i] = state->discard[player][i];
    #####:  539:      state->discard[player][i] = -1;
    #####:  540:    }
        -:  541:
    #####:  542:    state->deckCount[player] = state->discardCount[player];
    #####:  543:    state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:    //Shufffle the deck
    #####:  546:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  547:   
        -:  548:    if (DEBUG){//Debug statements
        -:  549:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:    }
        -:  551:    
    #####:  552:    state->discardCount[player] = 0;
        -:  553:
        -:  554:    //Step 2 Draw Card
    #####:  555:    count = state->handCount[player];//Get current player's hand count
        -:  556:    
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Current hand count: %d\n", count);
        -:  559:    }
        -:  560:    
    #####:  561:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
    #####:  563:    if (deckCounter == 0){
branch  0 never executed
branch  1 never executed
    #####:  564:      return -1;
        -:  565:    }
        -:  566:
    #####:  567:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  568:    state->deckCount[player]--;
    #####:  569:    state->handCount[player]++;//Increment hand count
    #####:  570:  }
        -:  571:
        -:  572:  else{
        5:  573:    int count = state->handCount[player];//Get current hand count for player
        -:  574:    int deckCounter;
        -:  575:    if (DEBUG){//Debug statements
        -:  576:      printf("Current hand count: %d\n", count);
        -:  577:    }
        -:  578:
        5:  579:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  581:    state->deckCount[player]--;
        5:  582:    state->handCount[player]++;//Increment hand count
        -:  583:  }
        -:  584:
        5:  585:  return 0;
        5:  586:}
        -:  587:
function getCost called 0 returned 0% blocks executed 0%
        -:  588:int getCost(int cardNumber)
        -:  589:{
    #####:  590:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  591:    {
        -:  592:    case curse:
    #####:  593:      return 0;
        -:  594:    case estate:
    #####:  595:      return 2;
        -:  596:    case duchy:
    #####:  597:      return 5;
        -:  598:    case province:
    #####:  599:      return 8;
        -:  600:    case copper:
    #####:  601:      return 0;
        -:  602:    case silver:
    #####:  603:      return 3;
        -:  604:    case gold:
    #####:  605:      return 6;
        -:  606:    case adventurer:
    #####:  607:      return 6;
        -:  608:    case council_room:
    #####:  609:      return 5;
        -:  610:    case feast:
    #####:  611:      return 4;
        -:  612:    case gardens:
    #####:  613:      return 4;
        -:  614:    case mine:
    #####:  615:      return 5;
        -:  616:    case remodel:
    #####:  617:      return 4;
        -:  618:    case smithy:
    #####:  619:      return 4;
        -:  620:    case village:
    #####:  621:      return 3;
        -:  622:    case baron:
    #####:  623:      return 4;
        -:  624:    case great_hall:
    #####:  625:      return 3;
        -:  626:    case minion:
    #####:  627:      return 5;
        -:  628:    case steward:
    #####:  629:      return 3;
        -:  630:    case tribute:
    #####:  631:      return 5;
        -:  632:    case ambassador:
    #####:  633:      return 3;
        -:  634:    case cutpurse:
    #####:  635:      return 4;
        -:  636:    case embargo: 
    #####:  637:      return 2;
        -:  638:    case outpost:
    #####:  639:      return 5;
        -:  640:    case salvager:
    #####:  641:      return 4;
        -:  642:    case sea_hag:
    #####:  643:      return 4;
        -:  644:    case treasure_map:
    #####:  645:      return 4;
        -:  646:    }
        -:  647:	
    #####:  648:  return -1;
    #####:  649:}
        -:  650:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  651:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  652:{
        -:  653:  int i;
        -:  654:  int j;
        -:  655:  int k;
        -:  656:  int x;
        -:  657:  int index;
    #####:  658:  int currentPlayer = whoseTurn(state);
    #####:  659:  int nextPlayer = currentPlayer + 1;
        -:  660:
    #####:  661:  int tributeRevealedCards[2] = {-1, -1};
        -:  662:  int temphand[MAX_HAND];// moved above the if statement
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  664:    nextPlayer = 0;
    #####:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:      return playAdventurer(state, currentPlayer);
        -:  673:
        -:  674:      /*while(drawntreasure<2){
        -:  675:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  676:	  shuffle(currentPlayer, state);
        -:  677:	}
        -:  678:	drawCard(currentPlayer, state);
        -:  679:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  680:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  681:	  drawntreasure++;
        -:  682:	else{
        -:  683:	  temphand[z]=cardDrawn;
        -:  684:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  685:	  z++;
        -:  686:	}
        -:  687:      }
        -:  688:      while(z-1>=0){
        -:  689:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  690:	z=z-1;
        -:  691:      }
        -:  692:      return 0;*/
        -:  693:			
        -:  694:    case council_room:
        -:  695:      //+4 Cards
    #####:  696:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  697:	{
    #####:  698:	  drawCard(currentPlayer, state);
    #####:  699:	}
        -:  700:			
        -:  701:      //+1 Buy
    #####:  702:      state->numBuys++;
        -:  703:			
        -:  704:      //Each other player draws a card
    #####:  705:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  706:	{
    #####:  707:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  708:	    {
    #####:  709:	      drawCard(i, state);
    #####:  710:	    }
    #####:  711:	}
        -:  712:			
        -:  713:      //put played card in played card pile
    #####:  714:      discardCard(handPos, currentPlayer, state, 0);
        -:  715:			
    #####:  716:      return 0;
        -:  717:			
        -:  718:    case feast:
        -:  719:      //gain card with cost up to 5
        -:  720:      //Backup hand
    #####:  721:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  722:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  723:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  724:      }
        -:  725:      //Backup hand
        -:  726:
        -:  727:      //Update Coins for Buy
    #####:  728:      updateCoins(currentPlayer, state, 5);
    #####:  729:      x = 1;//Condition to loop on
    #####:  730:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  731:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  732:	  if (DEBUG)
        -:  733:	    printf("None of that card left, sorry!\n");
        -:  734:
        -:  735:	  if (DEBUG){
        -:  736:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  737:	  }
    #####:  738:	}
    #####:  739:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  740:	  printf("That card is too expensive!\n");
        -:  741:
        -:  742:	  if (DEBUG){
        -:  743:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  744:	  }
    #####:  745:	}
        -:  746:	else{
        -:  747:
        -:  748:	  if (DEBUG){
        -:  749:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  750:	  }
        -:  751:
    #####:  752:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  753:	  x = 0;//No more buying cards
        -:  754:
        -:  755:	  if (DEBUG){
        -:  756:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  757:	  }
        -:  758:
        -:  759:	}
        -:  760:      }     
        -:  761:
        -:  762:      //Reset Hand
    #####:  763:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  764:	state->hand[currentPlayer][i] = temphand[i];
    #####:  765:	temphand[i] = -1;
    #####:  766:      }
        -:  767:      //Reset Hand
        -:  768:      			
    #####:  769:      return 0;
        -:  770:			
        -:  771:    case gardens:
    #####:  772:      return -1;
        -:  773:			
        -:  774:    case mine:
    #####:  775:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  776:
    #####:  777:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  778:	{
    #####:  779:	  return -1;
        -:  780:	}
        -:  781:		
    #####:  782:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:
    #####:  787:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      gainCard(choice2, state, 2, currentPlayer);
        -:  793:
        -:  794:      //discard card from hand
    #####:  795:      discardCard(handPos, currentPlayer, state, 0);
        -:  796:
        -:  797:      //discard trashed card
    #####:  798:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  799:	{
    #####:  800:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  801:	    {
    #####:  802:	      discardCard(i, currentPlayer, state, 0);			
    #####:  803:	      break;
        -:  804:	    }
    #####:  805:	}
        -:  806:			
    #####:  807:      return 0;
        -:  808:			
        -:  809:    case remodel:
    #####:  810:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  811:
    #####:  812:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  813:	{
    #####:  814:	  return -1;
        -:  815:	}
        -:  816:
    #####:  817:      gainCard(choice2, state, 0, currentPlayer);
        -:  818:
        -:  819:      //discard card from hand
    #####:  820:      discardCard(handPos, currentPlayer, state, 0);
        -:  821:
        -:  822:      //discard trashed card
    #####:  823:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  824:	{
    #####:  825:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  826:	    {
    #####:  827:	      discardCard(i, currentPlayer, state, 0);			
    #####:  828:	      break;
        -:  829:	    }
    #####:  830:	}
        -:  831:
        -:  832:
    #####:  833:      return 0;
        -:  834:		
        -:  835:    case smithy:
    #####:  836:      return playSmithy(currentPlayer, state, handPos);
        -:  837:      /*//+3 Cards
        -:  838:      for (i = 0; i < 3; i++)
        -:  839:	{
        -:  840:	  drawCard(currentPlayer, state);
        -:  841:	}
        -:  842:			
        -:  843:      //discard card from hand
        -:  844:      discardCard(handPos, currentPlayer, state, 0);
        -:  845:      return 0;*/
        -:  846:		
        -:  847:    case village:
    #####:  848:      return playVillage(currentPlayer, state, handPos);
        -:  849:      /*//+1 Card
        -:  850:      drawCard(currentPlayer, state);
        -:  851:			
        -:  852:      //+2 Actions
        -:  853:      state->numActions = state->numActions + 2;
        -:  854:			
        -:  855:      //discard played card from hand
        -:  856:      discardCard(handPos, currentPlayer, state, 0);
        -:  857:      return 0;*/
        -:  858:		
        -:  859:    case baron:
    #####:  860:      state->numBuys++;//Increase buys by 1!
    #####:  861:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  862:	int p = 0;//Iterator for hand!
    #####:  863:	int card_not_discarded = 1;//Flag for discard set!
    #####:  864:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  865:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  866:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  867:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  868:	    state->discardCount[currentPlayer]++;
    #####:  869:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  870:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  871:	    }
    #####:  872:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  873:	    state->handCount[currentPlayer]--;
    #####:  874:	    card_not_discarded = 0;//Exit the loop
    #####:  875:	  }
    #####:  876:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  877:	    if(DEBUG) {
        -:  878:	      printf("No estate cards in your hand, invalid choice\n");
        -:  879:	      printf("Must gain an estate if there are any\n");
        -:  880:	    }
    #####:  881:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  882:	      gainCard(estate, state, 0, currentPlayer);
    #####:  883:	      state->supplyCount[estate]--;//Decrement estates
    #####:  884:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  885:		isGameOver(state);
    #####:  886:	      }
    #####:  887:	    }
    #####:  888:	    card_not_discarded = 0;//Exit the loop
    #####:  889:	  }
        -:  890:			    
        -:  891:	  else{
    #####:  892:	    p++;//Next card
        -:  893:	  }
        -:  894:	}
    #####:  895:      }
        -:  896:			    
        -:  897:      else{
    #####:  898:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  899:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  900:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  901:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  902:	    isGameOver(state);
    #####:  903:	  }
    #####:  904:	}
        -:  905:      }
        -:  906:	    
        -:  907:      
    #####:  908:      return 0;
        -:  909:		
        -:  910:    case great_hall:
    #####:  911:      return playGreatHall(currentPlayer, state, handPos);
        -:  912:      /*//+1 Card
        -:  913:      drawCard(currentPlayer, state);
        -:  914:			
        -:  915:      //+1 Actions
        -:  916:      state->numActions++;
        -:  917:			
        -:  918:      //discard card from hand
        -:  919:      discardCard(handPos, currentPlayer, state, 0);
        -:  920:      return 0;*/
        -:  921:		
        -:  922:    case minion:
        -:  923:      //+1 action
    #####:  924:      state->numActions++;
        -:  925:			
        -:  926:      //discard card from hand
    #####:  927:      discardCard(handPos, currentPlayer, state, 0);
        -:  928:			
    #####:  929:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  930:	{
    #####:  931:	  state->coins = state->coins + 2;
    #####:  932:	}
        -:  933:			
    #####:  934:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  935:	{
        -:  936:	  //discard hand
    #####:  937:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  938:	    {
    #####:  939:	      discardCard(handPos, currentPlayer, state, 0);
        -:  940:	    }
        -:  941:				
        -:  942:	  //draw 4
    #####:  943:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  944:	    {
    #####:  945:	      drawCard(currentPlayer, state);
    #####:  946:	    }
        -:  947:				
        -:  948:	  //other players discard hand and redraw if hand size > 4
    #####:  949:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  950:	    {
    #####:  951:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  952:		{
    #####:  953:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  954:		    {
        -:  955:		      //discard hand
    #####:  956:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  957:			{
    #####:  958:			  discardCard(handPos, i, state, 0);
        -:  959:			}
        -:  960:							
        -:  961:		      //draw 4
    #####:  962:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  963:			{
    #####:  964:			  drawCard(i, state);
    #####:  965:			}
    #####:  966:		    }
    #####:  967:		}
    #####:  968:	    }
        -:  969:				
    #####:  970:	}
    #####:  971:      return 0;
        -:  972:		
        -:  973:    case steward:
    #####:  974:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  975:	{
        -:  976:	  //+2 cards
    #####:  977:	  drawCard(currentPlayer, state);
    #####:  978:	  drawCard(currentPlayer, state);
    #####:  979:	}
    #####:  980:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  981:	{
        -:  982:	  //+2 coins
    #####:  983:	  state->coins = state->coins + 2;
    #####:  984:	}
        -:  985:      else
        -:  986:	{
        -:  987:	  //trash 2 cards in hand
    #####:  988:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  989:	  discardCard(choice3, currentPlayer, state, 1);
        -:  990:	}
        -:  991:			
        -:  992:      //discard card from hand
    #####:  993:      discardCard(handPos, currentPlayer, state, 0);
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case tribute:
    #####:  997:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  998:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  999:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1000:	  state->deckCount[nextPlayer]--;
    #####: 1001:	}
    #####: 1002:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1003:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1004:	  state->discardCount[nextPlayer]--;
    #####: 1005:	}
        -: 1006:	else{
        -: 1007:	  //No Card to Reveal
        -: 1008:	  if (DEBUG){
        -: 1009:	    printf("No cards to reveal\n");
        -: 1010:	  }
        -: 1011:	}
    #####: 1012:      }
        -: 1013:	    
        -: 1014:      else{
    #####: 1015:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1016:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1017:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1018:	    state->deckCount[nextPlayer]++;
    #####: 1019:	    state->discard[nextPlayer][i] = -1;
    #####: 1020:	    state->discardCount[nextPlayer]--;
    #####: 1021:	  }
        -: 1022:			    
    #####: 1023:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1024:	} 
    #####: 1025:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1026:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1027:	state->deckCount[nextPlayer]--;
    #####: 1028:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1029:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1030:	state->deckCount[nextPlayer]--;
        -: 1031:      }    
        -: 1032:		       
    #####: 1033:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1034:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1035:	state->playedCardCount++;
    #####: 1036:	tributeRevealedCards[1] = -1;
    #####: 1037:      }
        -: 1038:
    #####: 1039:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1040:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1041:	  state->coins += 2;
    #####: 1042:	}
        -: 1043:		    
    #####: 1044:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1045:	  drawCard(currentPlayer, state);
    #####: 1046:	  drawCard(currentPlayer, state);
    #####: 1047:	}
        -: 1048:	else{//Action Card
    #####: 1049:	  state->numActions = state->numActions + 2;
        -: 1050:	}
    #####: 1051:      }
        -: 1052:	    
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case ambassador:
    #####: 1056:      j = 0;		//used to check if player has enough cards to discard
        -: 1057:
    #####: 1058:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1059:	{
    #####: 1060:	  return -1;				
        -: 1061:	}
        -: 1062:
    #####: 1063:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1064:	{
    #####: 1065:	  return -1;
        -: 1066:	}
        -: 1067:
    #####: 1068:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
    #####: 1070:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1071:	    {
    #####: 1072:	      j++;
    #####: 1073:	    }
    #####: 1074:	}
    #####: 1075:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1076:	{
    #####: 1077:	  return -1;				
        -: 1078:	}
        -: 1079:
        -: 1080:      if (DEBUG) 
        -: 1081:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1082:
        -: 1083:      //increase supply count for choosen card by amount being discarded
    #####: 1084:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1085:			
        -: 1086:      //each other player gains a copy of revealed card
    #####: 1087:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1088:	{
    #####: 1089:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1090:	    {
    #####: 1091:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1092:	    }
    #####: 1093:	}
        -: 1094:
        -: 1095:      //discard played card from hand
    #####: 1096:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1097:
        -: 1098:      //trash copies of cards returned to supply
    #####: 1099:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1100:	{
    #####: 1101:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1102:	    {
    #####: 1103:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1104:		{
    #####: 1105:		  discardCard(i, currentPlayer, state, 1);
    #####: 1106:		  break;
        -: 1107:		}
    #####: 1108:	    }
    #####: 1109:	}			
        -: 1110:
    #####: 1111:      return 0;
        -: 1112:		
        -: 1113:    case cutpurse:
        -: 1114:
    #####: 1115:      updateCoins(currentPlayer, state, 2);
    #####: 1116:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
    #####: 1118:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1119:	    {
    #####: 1120:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1121:		{
    #####: 1122:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1123:		    {
    #####: 1124:		      discardCard(j, i, state, 0);
    #####: 1125:		      break;
        -: 1126:		    }
    #####: 1127:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1128:		    {
    #####: 1129:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1130:			{
        -: 1131:			  if (DEBUG)
        -: 1132:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1133:			}	
    #####: 1134:		      break;
        -: 1135:		    }		
    #####: 1136:		}
        -: 1137:					
    #####: 1138:	    }
        -: 1139:				
    #####: 1140:	}				
        -: 1141:
        -: 1142:      //discard played card from hand
    #####: 1143:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1144:
    #####: 1145:      return 0;
        -: 1146:
        -: 1147:		
        -: 1148:    case embargo: 
        -: 1149:      //+2 Coins
    #####: 1150:      state->coins = state->coins + 2;
        -: 1151:			
        -: 1152:      //see if selected pile is in play
    #####: 1153:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1154:	{
    #####: 1155:	  return -1;
        -: 1156:	}
        -: 1157:			
        -: 1158:      //add embargo token to selected supply pile
    #####: 1159:      state->embargoTokens[choice1]++;
        -: 1160:			
        -: 1161:      //trash card
    #####: 1162:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1163:      return 0;
        -: 1164:		
        -: 1165:    case outpost:
        -: 1166:      //set outpost flag
    #####: 1167:      state->outpostPlayed++;
        -: 1168:			
        -: 1169:      //discard card
    #####: 1170:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1171:      return 0;
        -: 1172:		
        -: 1173:    case salvager:
        -: 1174:      //+1 buy
    #####: 1175:      state->numBuys++;
        -: 1176:			
    #####: 1177:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1178:        	{
        -: 1179:            //gain coins equal to trashed card
    #####: 1180:        	  state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1181:        	  //trash card
    #####: 1182:        	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1183:        	}
        -: 1184:        			
        -: 1185:      //discard card
    #####: 1186:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1187:      return 0;
        -: 1188:		
        -: 1189:    case sea_hag:
    #####: 1190:      return playSeaHag(currentPlayer, state);
        -: 1191:      /*for (i = 0; i < state->numPlayers+1; i++){ //INCORRECT - SHOULD BE i < state->numPlayers. THIS IS A BUG
        -: 1192:	if (i != currentPlayer){
        -: 1193:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        -: 1194:	  state->discardCount[i]++;
        -: 1195:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1196:	}
        -: 1197:      }
        -: 1198:      return 0;*/
        -: 1199:		
        -: 1200:    case treasure_map:
        -: 1201:      //search hand for another treasure_map
    #####: 1202:      index = -1;
    #####: 1203:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1204:	{
    #####: 1205:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1206:	    {
    #####: 1207:	      index = i;
    #####: 1208:	      break;
        -: 1209:	    }
    #####: 1210:	}
    #####: 1211:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1212:	{
        -: 1213:	  //trash both treasure cards
    #####: 1214:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1215:	  discardCard(index, currentPlayer, state, 1);
        -: 1216:
        -: 1217:	  //gain 4 Gold cards
    #####: 1218:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1219:	    {
    #####: 1220:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1221:	    }
        -: 1222:				
        -: 1223:	  //return success
    #####: 1224:	  return 1;
        -: 1225:	}
        -: 1226:			
        -: 1227:      //no second treasure_map found in hand
    #####: 1228:      return -1;
        -: 1229:    }
        -: 1230:	
    #####: 1231:  return -1;
    #####: 1232:}
        -: 1233:
        -: 1234:/*int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -: 1235:{
        -: 1236:  int i;
        -: 1237:  int j;
        -: 1238:  int k;
        -: 1239:  int x;
        -: 1240:  int index;
        -: 1241:  int currentPlayer = whoseTurn(state);
        -: 1242:  int nextPlayer = currentPlayer + 1;
        -: 1243:
        -: 1244:  //int tributeRevealedCards[2] = {-1, -1};
        -: 1245:  int temphand[MAX_HAND];// moved above the if statement
        -: 1246:  int drawntreasure=0;
        -: 1247:  //int cardDrawn;
        -: 1248:  int z = 0;// this is the counter for the temp hand
        -: 1249:  if (nextPlayer > (state->numPlayers - 1)){
        -: 1250:    nextPlayer = 0;
        -: 1251:  }
        -: 1252:  
        -: 1253:	
        -: 1254:  //uses switch to select card and perform actions
        -: 1255:  switch( card ) 
        -: 1256:    {
        -: 1257:    case adventurer: 
        -: 1258:	      return playAdventurer(&drawntreasure, state, currentPlayer, temphand, &z);
        -: 1259:			
        -: 1260:    case council_room:
        -: 1261:	     return playCouncilRoom(currentPlayer, state, handPos);
        -: 1262:			
        -: 1263:    case feast: //PASS int currentPlayer, struct* gameState state int temphand[], int choice1
        -: 1264:	     return playFeast(currentPlayer, state, temphand, handPos);
        -: 1265:			
        -: 1266:    case gardens:
        -: 1267:      	return playGardens();
        -: 1268:			
        -: 1269:    case mine: //PASS int currentPlayer, struct* gameState state, int choice1, int choice2, int handPos
        -: 1270:    	return playMine(currentPlayer, state, choice1, choice2, handPos);
        -: 1271:			
        -: 1272:    case remodel: // PASS int currentPlayer, struct* gameState state, int choice1, int choice2, int handPos	 
        -: 1273:    	return playRemodel(currentPlayer, state, choice1, choice2, handPos);  
        -: 1274:
        -: 1275:    case smithy: // PASS int currentPlayer, struct* gameState state, int handPos
        -: 1276:    	return playSmithy(currentPlayer, state, handPos);
        -: 1277:		
        -: 1278:    case village: // PASS int currentPlayer, struct gameState *state, int handPos
        -: 1279:    	return playVillage(currentPlayer, state, handPos);
        -: 1280:		
        -: 1281:    case baron: // int currentPlayer, struct gameState *state, int choice1
        -: 1282:    	return playBaron(currentPlayer, state, choice1);
        -: 1283:		
        -: 1284:    case great_hall:// int currentPlayer, struct gameState *state, int handPos 
        -: 1285:	    return playGreatHall(currentPlayer, state, handPos);
        -: 1286:		
        -: 1287:    case minion: // int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2
        -: 1288:    	return playMinion(currentPlayer, state, handPos, choice1, choice2);
        -: 1289:			
        -: 1290:    case steward: // int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3
        -: 1291:    	return playSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
        -: 1292:		
        -: 1293:    case tribute: // int currentPlayer, struct gameState *state, int nextPlayer
        -: 1294:    	return playTribute(currentPlayer, state, nextPlayer);
        -: 1295:		
        -: 1296:    case ambassador: // int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos
        -: 1297:	    return playAmbassador(currentPlayer, state, choice1, choice2, handPos);
        -: 1298:		
        -: 1299:    case cutpurse: // int currentPlayer, struct gameState *state, int handPos
        -: 1300:    	return playCutpurse(currentPlayer, state, handPos);
        -: 1301:		
        -: 1302:    case embargo: // int currentPlayer, struct gameState *state, int handPos, int choice1
        -: 1303:    	return playEmbargo(currentPlayer, state, handPos, choice1);
        -: 1304:		
        -: 1305:    case outpost: // int currentPlayer, struct gameState *state, int handPos
        -: 1306:    	return playOutpost(currentPlayer, state, handPos);
        -: 1307:
        -: 1308:    case salvager: // int currentPlayer, struct gameState *state, int handPos, int choice1
        -: 1309:    	return playSalvager(currentPlayer, state, handPos, choice1);
        -: 1310:		
        -: 1311:    case sea_hag: // int currentPlayer, struct gameState *state
        -: 1312:    	return playSeaHag(currentPlayer, state);
        -: 1313:		
        -: 1314:    case treasure_map: // int currentPlayer, struct gameState *state, int handPos
        -: 1315:    	return playTreasureMap(currentPlayer, state, handPos);
        -: 1316:
        -: 1317:	    }
        -: 1318:	
        -: 1319:  return -1;
        -: 1320:}*/
        -: 1321:
function discardCard called 0 returned 0% blocks executed 0%
        -: 1322:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1323:{
        -: 1324:	
        -: 1325:  //if card is not trashed, added to Played pile 
    #####: 1326:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1327:    {
        -: 1328:      //add card to played pile
    #####: 1329:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1330:      state->playedCardCount++;
    #####: 1331:    }
        -: 1332:	
        -: 1333:  //set played card to -1
    #####: 1334:  state->hand[currentPlayer][handPos] = -1;
        -: 1335:	
        -: 1336:  //remove card from player's hand
        -: 1337:  
    #####: 1338:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1339:    {
        -: 1340:      //reduce number of cards in hand
    #####: 1341:      state->handCount[currentPlayer]--;
    #####: 1342:    }
    #####: 1343:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1344:    {
        -: 1345:      //reduce number of cards in hand
    #####: 1346:      state->handCount[currentPlayer]--;
    #####: 1347:    }
        -: 1348:  else 	
        -: 1349:    {
        -: 1350:      //replace discarded card with last card in hand
    #####: 1351:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1352:      //set last card to -1
    #####: 1353:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1354:      //reduce number of cards in hand
    #####: 1355:      state->handCount[currentPlayer]--;
        -: 1356:    }
        -: 1357:	
    #####: 1358:  return 0;
        -: 1359:}
        -: 1360:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1361:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1362:{
        -: 1363:  //Note: supplyPos is enum of choosen card
        -: 1364:	
        -: 1365:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1366:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1367:    {
    #####: 1368:      return -1;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //added card for [whoseTurn] current player:
        -: 1372:  // toFlag = 0 : add to discard
        -: 1373:  // toFlag = 1 : add to deck
        -: 1374:  // toFlag = 2 : add to hand
        -: 1375:
    #####: 1376:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1377:    {
    #####: 1378:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1379:      state->deckCount[player]++;
    #####: 1380:    }
    #####: 1381:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1382:    {
    #####: 1383:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1384:      state->handCount[player]++;
    #####: 1385:    }
        -: 1386:  else
        -: 1387:    {
    #####: 1388:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1389:      state->discardCount[player]++;
        -: 1390:    }
        -: 1391:	
        -: 1392:  //decrease number in supply pile
    #####: 1393:  state->supplyCount[supplyPos]--;
        -: 1394:	 
    #####: 1395:  return 0;
    #####: 1396:}
        -: 1397:
function updateCoins called 1 returned 100% blocks executed 85%
        -: 1398:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1399:{
        -: 1400:  int i;
        -: 1401:	
        -: 1402:  //reset coin count
        1: 1403:  state->coins = 0;
        -: 1404:
        -: 1405:  //add coins for each Treasure card in player's hand
       12: 1406:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1407:    {
        5: 1408:      if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1409:	{
        4: 1410:	  state->coins += 1;
        4: 1411:	}
        1: 1412:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1413:	{
    #####: 1414:	  state->coins += 2;
    #####: 1415:	}
        1: 1416:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1417:	{
    #####: 1418:	  state->coins += 3;
    #####: 1419:	}	
        5: 1420:    }	
        -: 1421:
        -: 1422:  //add bonus
        1: 1423:  state->coins += bonus;
        -: 1424:
        1: 1425:  return 0;
        -: 1426:}
        -: 1427:
        -: 1428:/************************************************************/
        -: 1429:/************************************************************/
        -: 1430:/************************************************************/
        -: 1431://new functions 4-12-17
        -: 1432:
function playAdventurer called 0 returned 0% blocks executed 0%
        -: 1433:int playAdventurer(struct gameState *state, int currentPlayer)
        -: 1434:{
        -: 1435:	int cardDrawn;
    #####: 1436:	int z = 0;
    #####: 1437:	int drawntreasure = 0;
        -: 1438:	int temphand[MAX_HAND];
        -: 1439:
    #####: 1440:	while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
        -: 1441:		
    #####: 1442:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1443:		  shuffle(currentPlayer, state);
    #####: 1444:		}
        -: 1445:		
    #####: 1446:    drawCard(currentPlayer, state);
    #####: 1447:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card. CORRECT
        -: 1448:		//cardDrawn = state->hand[currentPlayer][0]; //INCORRECT - this is a bug. cardDrawn should be last element in the hand, not first
        -: 1449:		
    #####: 1450:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1451:		  drawntreasure++;
    #####: 1452:    }
        -: 1453:		
        -: 1454:    else{
    #####: 1455:		  temphand[z]=cardDrawn;
    #####: 1456:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1457:		  z++;
        -: 1458:		}
        -: 1459:	}
        -: 1460:	 
    #####: 1461:  while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1462:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1463:		z=z-1;
        -: 1464:	 }
        -: 1465:	
    #####: 1466:  return 0;
        -: 1467:}
        -: 1468:
        -: 1469:/*int playCouncilRoom(int currentPlayer, struct gameState *state, int handPos)
        -: 1470:{
        -: 1471:	int i;	
        -: 1472:	//+4 Cards
        -: 1473:      for (i = 0; i < 4; i++)
        -: 1474:	{
        -: 1475:	  drawCard(currentPlayer, state);
        -: 1476:	}
        -: 1477:			
        -: 1478:      //+1 Buy
        -: 1479:      state->numBuys++;
        -: 1480:			
        -: 1481:      //Each other player draws a card
        -: 1482:      for (i = 0; i < state->numPlayers; i++)
        -: 1483:		{
        -: 1484:		  if ( i != currentPlayer )
        -: 1485:		    {
        -: 1486:		      drawCard(i, state);
        -: 1487:		    }
        -: 1488:		}
        -: 1489:				
        -: 1490:      //put played card in played card pile
        -: 1491:      discardCard(handPos, currentPlayer, state, 0);
        -: 1492:			
        -: 1493:      return 0;
        -: 1494:}*/
        -: 1495:
        -: 1496:/*int playFeast(int currentPlayer, struct gameState *state, int temphand[], int choice1)
        -: 1497:{
        -: 1498:	 //gain card with cost up to 5
        -: 1499:      //Backup hand
        -: 1500:	int i, x;
        -: 1501:
        -: 1502:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -: 1503:	temphand[i] = state->hand[currentPlayer][i];//Backup card
        -: 1504:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1505:      }
        -: 1506:      //Backup hand
        -: 1507:
        -: 1508:      //Update Coins for Buy
        -: 1509:      updateCoins(currentPlayer, state, 5);
        -: 1510:      x = 1;//Condition to loop on
        -: 1511:      while( x == 1) {//Buy one card
        -: 1512:	if (supplyCount(choice1, state) <= 0){
        -: 1513:	  if (DEBUG)
        -: 1514:	    printf("None of that card left, sorry!\n");
        -: 1515:
        -: 1516:	  if (DEBUG){
        -: 1517:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1518:	  }
        -: 1519:	}
        -: 1520:	else if (state->coins < getCost(choice1)){
        -: 1521:	  printf("That card is too expensive!\n");
        -: 1522:
        -: 1523:	  if (DEBUG){
        -: 1524:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1525:	  }
        -: 1526:	}
        -: 1527:	else{
        -: 1528:
        -: 1529:	  if (DEBUG){
        -: 1530:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1531:	  }
        -: 1532:
        -: 1533:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        -: 1534:	  x = 0;//No more buying cards
        -: 1535:
        -: 1536:	  if (DEBUG){
        -: 1537:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1538:	  }
        -: 1539:
        -: 1540:	}
        -: 1541:      }     
        -: 1542:
        -: 1543:      //Reset Hand
        -: 1544:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -: 1545:	state->hand[currentPlayer][i] = temphand[i];
        -: 1546:	temphand[i] = -1;
        -: 1547:      }
        -: 1548:      //Reset Hand
        -: 1549:      			
        -: 1550:      return 0;
        -: 1551:}*/
        -: 1552:
        -: 1553:/*int playGardens()
        -: 1554:{
        -: 1555:	return -1;
        -: 1556:}*/
        -: 1557:/*
        -: 1558: int playMine(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) 
        -: 1559: {
        -: 1560:     int i, j;
        -: 1561:
        -: 1562:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1563:
        -: 1564:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -: 1565:	{
        -: 1566:	  return -1;
        -: 1567:	}
        -: 1568:		
        -: 1569:      if (choice2 > treasure_map || choice2 < curse)
        -: 1570:	{
        -: 1571:	  return -1;
        -: 1572:	}
        -: 1573:
        -: 1574:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -: 1575:	{
        -: 1576:	  return -1;
        -: 1577:	}
        -: 1578:
        -: 1579:      gainCard(choice2, state, 2, currentPlayer);
        -: 1580:
        -: 1581:      //discard card from hand
        -: 1582:      discardCard(handPos, currentPlayer, state, 0);
        -: 1583:
        -: 1584:      //discard trashed card
        -: 1585:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1586:	{
        -: 1587:	  if (state->hand[currentPlayer][i] == j)
        -: 1588:	    {
        -: 1589:	      discardCard(i, currentPlayer, state, 0);			
        -: 1590:	      break;
        -: 1591:	    }
        -: 1592:	}
        -: 1593:			
        -: 1594:      return 0;
        -: 1595:}*/
        -: 1596:
        -: 1597:/*int playRemodel(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos)
        -: 1598:{
        -: 1599:     int i, j; 
        -: 1600:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1601:
        -: 1602:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1603:	{
        -: 1604:	  return -1;
        -: 1605:	}
        -: 1606:
        -: 1607:      gainCard(choice2, state, 0, currentPlayer);
        -: 1608:
        -: 1609:      //discard card from hand
        -: 1610:      discardCard(handPos, currentPlayer, state, 0);
        -: 1611:
        -: 1612:      //discard trashed card
        -: 1613:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1614:	{
        -: 1615:	  if (state->hand[currentPlayer][i] == j)
        -: 1616:	    {
        -: 1617:	      discardCard(i, currentPlayer, state, 0);			
        -: 1618:	      break;
        -: 1619:	    }
        -: 1620:	}
        -: 1621:
        -: 1622:
        -: 1623:      return 0;
        -: 1624:  }*/
        -: 1625:
function playSmithy called 0 returned 0% blocks executed 0%
        -: 1626:int playSmithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1627:{
        -: 1628:      //+3 Cards
        -: 1629:	int i;
    #####: 1630:      for (i = 0; i <= 3; i++) //INCORRECT, THIS IS A BUG. SHOULD BE i < 3 not i <= 3.
branch  0 never executed
branch  1 never executed
        -: 1631:    	{
    #####: 1632:    	  drawCard(currentPlayer, state);
    #####: 1633:    	}
        -: 1634:			
        -: 1635:      //discard card from hand
    #####: 1636:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1637:      return 0;
        -: 1638:}
        -: 1639:
function playVillage called 0 returned 0% blocks executed 0%
        -: 1640: int playVillage(int currentPlayer, struct gameState *state, int handPos)
        -: 1641: {
        -: 1642:      //+1 Card
    #####: 1643:      drawCard(currentPlayer, state);
        -: 1644:			
        -: 1645:      //+2 Actions
        -: 1646:      //state->numActions = state->numActions + 2;
    #####: 1647:      state->numActions = 2; //	INCORRECT - THIS IS A BUG. This resets numActions to 2 rather than adding 2 to it
        -: 1648:			
        -: 1649:      //discard played card from hand
    #####: 1650:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1651:      return 0;
        -: 1652:}
        -: 1653:
        -: 1654: /*int playBaron(int currentPlayer, struct gameState *state, int choice1)
        -: 1655: {
        -: 1656:      state->numBuys++;//Increase buys by 1!
        -: 1657:      if (choice1 > 0){//Boolean true or going to discard an estate
        -: 1658:	int p = 0;//Iterator for hand!
        -: 1659:	int card_not_discarded = 1;//Flag for discard set!
        -: 1660:	
        -: 1661:	while(card_not_discarded){
        -: 1662:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
        -: 1663:	    state->coins += 4;//Add 4 coins to the amount of coins
        -: 1664:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        -: 1665:	    state->discardCount[currentPlayer]++;
        -: 1666:	    
        -: 1667:	    for (;p < state->handCount[currentPlayer]; p++){
        -: 1668:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1669:	    }
        -: 1670:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        -: 1671:	    state->handCount[currentPlayer]--;
        -: 1672:	    card_not_discarded = 0;//Exit the loop
        -: 1673:	  }
        -: 1674:	 
        -: 1675:	  else if (p > state->handCount[currentPlayer]){
        -: 1676:	    if(DEBUG) {
        -: 1677:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1678:	      printf("Must gain an estate if there are any\n");
        -: 1679:	    }
        -: 1680:	    if (supplyCount(estate, state) > 0){
        -: 1681:	      gainCard(estate, state, 0, currentPlayer);
        -: 1682:	      state->supplyCount[estate]--;//Decrement estates
        -: 1683:	      if (supplyCount(estate, state) == 0){
        -: 1684:		isGameOver(state);
        -: 1685:	      }
        -: 1686:	    }
        -: 1687:	    card_not_discarded = 0;//Exit the loop
        -: 1688:	  }
        -: 1689:			    
        -: 1690:	  else{
        -: 1691:	    p++;//Next card
        -: 1692:	  }
        -: 1693:	}
        -: 1694:      }
        -: 1695:			    
        -: 1696:      else{
        -: 1697:	if (supplyCount(estate, state) > 0){
        -: 1698:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -: 1699:	  state->supplyCount[estate]--;//Decrement Estates
        -: 1700:	  if (supplyCount(estate, state) == 0){
        -: 1701:	    isGameOver(state);
        -: 1702:	  }
        -: 1703:	}
        -: 1704:      }
        -: 1705:	    
        -: 1706:      
        -: 1707:      return 0;
        -: 1708:  }*/
        -: 1709:
function playGreatHall called 0 returned 0% blocks executed 0%
        -: 1710:int playGreatHall(int currentPlayer, struct gameState *state, int handPos)
        -: 1711:{
        -: 1712:  //+1 Card
    #####: 1713:  drawCard(currentPlayer, state);
        -: 1714:		
        -: 1715:  //+1 Actions
    #####: 1716:  state->numActions++;
        -: 1717:		
        -: 1718:  //discard card from hand
    #####: 1719:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1720:  return 0;
        -: 1721:}
        -: 1722:
        -: 1723:/*int playMinion(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2)
        -: 1724:{
        -: 1725:  int i, j; 
        -: 1726: 
        -: 1727:  //+1 action
        -: 1728:  state->numActions++;
        -: 1729:		
        -: 1730:  //discard card from hand
        -: 1731:  discardCard(handPos, currentPlayer, state, 0);
        -: 1732:		
        -: 1733:  if (choice1)		//+2 coins
        -: 1734:{
        -: 1735:  state->coins = state->coins + 2;
        -: 1736:}
        -: 1737:		
        -: 1738:  else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1739:{
        -: 1740:  //discard hand
        -: 1741:  while(numHandCards(state) > 0)
        -: 1742:    {
        -: 1743:      discardCard(handPos, currentPlayer, state, 0);
        -: 1744:    }
        -: 1745:			
        -: 1746:  //draw 4
        -: 1747:  for (i = 0; i < 4; i++)
        -: 1748:    {
        -: 1749:      drawCard(currentPlayer, state);
        -: 1750:    }
        -: 1751:			
        -: 1752:  //other players discard hand and redraw if hand size > 4
        -: 1753:  for (i = 0; i < state->numPlayers; i++)
        -: 1754:    {
        -: 1755:      if (i != currentPlayer)
        -: 1756:	{
        -: 1757:	  if ( state->handCount[i] > 4 )
        -: 1758:	    {
        -: 1759:	      //discard hand
        -: 1760:	      while( state->handCount[i] > 0 )
        -: 1761:		{
        -: 1762:		  discardCard(handPos, i, state, 0);
        -: 1763:		}
        -: 1764:						
        -: 1765:	      //draw 4
        -: 1766:	      for (j = 0; j < 4; j++)
        -: 1767:		{
        -: 1768:		  drawCard(i, state);
        -: 1769:		}
        -: 1770:	    }
        -: 1771:	}
        -: 1772:    }
        -: 1773:			
        -: 1774:	}
        -: 1775:  return 0;
        -: 1776:}*/
        -: 1777:
        -: 1778:/*int playSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3)
        -: 1779:{
        -: 1780:	if (choice1 == 1)
        -: 1781:	{
        -: 1782:	  //+2 cards
        -: 1783:	  drawCard(currentPlayer, state);
        -: 1784:	  drawCard(currentPlayer, state);
        -: 1785:	}
        -: 1786:      else if (choice1 == 2)
        -: 1787:	{
        -: 1788:	  //+2 coins
        -: 1789:	  state->coins = state->coins + 2;
        -: 1790:	}
        -: 1791:      else
        -: 1792:	{
        -: 1793:	  //trash 2 cards in hand
        -: 1794:	  discardCard(choice2, currentPlayer, state, 1);
        -: 1795:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1796:	}
        -: 1797:			
        -: 1798:      //discard card from hand
        -: 1799:      discardCard(handPos, currentPlayer, state, 0);
        -: 1800:      return 0;
        -: 1801:}*/
        -: 1802:
        -: 1803:/*int playTribute(int currentPlayer, struct gameState *state, int nextPlayer)
        -: 1804:{  
        -: 1805:	int i; 
        -: 1806:	int tributeRevealedCards[2] = {-1, -1};
        -: 1807:
        -: 1808:	  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
        -: 1809:	if (state->deckCount[nextPlayer] > 0){
        -: 1810:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1811:	  state->deckCount[nextPlayer]--;
        -: 1812:	}
        -: 1813:	else if (state->discardCount[nextPlayer] > 0){
        -: 1814:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
        -: 1815:	  state->discardCount[nextPlayer]--;
        -: 1816:	}
        -: 1817:	else{
        -: 1818:	  //No Card to Reveal
        -: 1819:	  if (DEBUG){
        -: 1820:	    printf("No cards to reveal\n");
        -: 1821:	  }
        -: 1822:	}
        -: 1823:	  }
        -: 1824:	    
        -: 1825:	  else{
        -: 1826:	if (state->deckCount[nextPlayer] == 0){
        -: 1827:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
        -: 1828:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
        -: 1829:	    state->deckCount[nextPlayer]++;
        -: 1830:	    state->discard[nextPlayer][i] = -1;
        -: 1831:	    state->discardCount[nextPlayer]--;
        -: 1832:	  }
        -: 1833:			    
        -: 1834:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1835:	} 
        -: 1836:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1837:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1838:	state->deckCount[nextPlayer]--;
        -: 1839:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1840:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1841:	state->deckCount[nextPlayer]--;
        -: 1842:	  }    
        -: 1843:		       
        -: 1844:	  if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
        -: 1845:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        -: 1846:	state->playedCardCount++;
        -: 1847:	tributeRevealedCards[1] = -1;
        -: 1848:	  }
        -: 1849:
        -: 1850:	  for (i = 0; i <= 2; i ++){
        -: 1851:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
        -: 1852:	  state->coins += 2;
        -: 1853:	}
        -: 1854:		    
        -: 1855:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
        -: 1856:	  drawCard(currentPlayer, state);
        -: 1857:	  drawCard(currentPlayer, state);
        -: 1858:	}
        -: 1859:	else{//Action Card
        -: 1860:	  state->numActions = state->numActions + 2;
        -: 1861:	}
        -: 1862:	  }
        -: 1863:	    
        -: 1864:	  return 0;
        -: 1865:}*/
        -: 1866:
        -: 1867:/*int playAmbassador(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos)
        -: 1868:{ 
        -: 1869:	int i;
        -: 1870:    int j = 0;		//used to check if player has enough cards to discard
        -: 1871:
        -: 1872:      if (choice2 > 2 || choice2 < 0)
        -: 1873:	{
        -: 1874:	  return -1;				
        -: 1875:	}
        -: 1876:
        -: 1877:      if (choice1 == handPos)
        -: 1878:	{
        -: 1879:	  return -1;
        -: 1880:	}
        -: 1881:
        -: 1882:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1883:	{
        -: 1884:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1885:	    {
        -: 1886:	      j++;
        -: 1887:	    }
        -: 1888:	}
        -: 1889:      if (j < choice2)
        -: 1890:	{
        -: 1891:	  return -1;				
        -: 1892:	}
        -: 1893:
        -: 1894:      if (DEBUG) 
        -: 1895:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1896:
        -: 1897:      //increase supply count for choosen card by amount being discarded
        -: 1898:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1899:			
        -: 1900:      //each other player gains a copy of revealed card
        -: 1901:      for (i = 0; i < state->numPlayers; i++)
        -: 1902:	{
        -: 1903:	  if (i != currentPlayer)
        -: 1904:	    {
        -: 1905:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1906:	    }
        -: 1907:	}
        -: 1908:
        -: 1909:      //discard played card from hand
        -: 1910:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1911:
        -: 1912:      //trash copies of cards returned to supply
        -: 1913:      for (j = 0; j < choice2; j++)
        -: 1914:	{
        -: 1915:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1916:	    {
        -: 1917:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1918:		{
        -: 1919:		  discardCard(i, currentPlayer, state, 1);
        -: 1920:		  break;
        -: 1921:		}
        -: 1922:	    }
        -: 1923:	}			
        -: 1924:
        -: 1925:      return 0;
        -: 1926:}*/
        -: 1927:
        -: 1928:/*int playCutpurse(int currentPlayer, struct gameState *state, int handPos)
        -: 1929:{	
        -: 1930:	int i, j, k;
        -: 1931:	  updateCoins(currentPlayer, state, 2);
        -: 1932:	  for (i = 0; i < state->numPlayers; i++)
        -: 1933:	{
        -: 1934:	  if (i != currentPlayer)
        -: 1935:	    {
        -: 1936:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1937:		{
        -: 1938:		  if (state->hand[i][j] == copper)
        -: 1939:		    {
        -: 1940:		      discardCard(j, i, state, 0);
        -: 1941:		      break;
        -: 1942:		    }
        -: 1943:		  if (j == state->handCount[i])
        -: 1944:		    {
        -: 1945:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1946:			{
        -: 1947:			  if (DEBUG)
        -: 1948:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1949:			}	
        -: 1950:		      break;
        -: 1951:		    }		
        -: 1952:		}
        -: 1953:					
        -: 1954:	    }
        -: 1955:				
        -: 1956:	}				
        -: 1957:
        -: 1958:  //discard played card from hand
        -: 1959:  discardCard(handPos, currentPlayer, state, 0);			
        -: 1960:
        -: 1961:  return 0;
        -: 1962:}*/
        -: 1963:
        -: 1964: /*int playEmbargo(int currentPlayer, struct gameState *state, int handPos, int choice1)
        -: 1965:{ 
        -: 1966: 	//+2 Coins
        -: 1967:     state->coins = state->coins + 2;
        -: 1968:			
        -: 1969:      //see if selected pile is in play
        -: 1970:      if ( state->supplyCount[choice1] == -1 )
        -: 1971:	{
        -: 1972:	  return -1;
        -: 1973:	}
        -: 1974:			
        -: 1975:      //add embargo token to selected supply pile
        -: 1976:      state->embargoTokens[choice1]++;
        -: 1977:			
        -: 1978:      //trash card
        -: 1979:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1980:      return 0;
        -: 1981: }*/
        -: 1982:
        -: 1983:/*int playOutpost(int currentPlayer, struct gameState *state, int handPos)
        -: 1984:{
        -: 1985: //set outpost flag
        -: 1986:  state->outpostPlayed++;
        -: 1987:		
        -: 1988:  //discard card
        -: 1989:  discardCard(handPos, currentPlayer, state, 0);
        -: 1990:  return 0;
        -: 1991:}*/
        -: 1992:
        -: 1993:/*int playSalvager(int currentPlayer, struct gameState *state, int handPos, int choice1)
        -: 1994:{
        -: 1995:	//+1 buy
        -: 1996:	  state->numBuys++;
        -: 1997:			
        -: 1998:	  if (choice1)
        -: 1999:	{
        -: 2000:	  //gain coins equal to trashed card
        -: 2001:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 2002:	  //trash card
        -: 2003:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 2004:	}
        -: 2005:			
        -: 2006:	  //discard card
        -: 2007:	  discardCard(handPos, currentPlayer, state, 0);
        -: 2008:	  return 0;
        -: 2009:}*/
        -: 2010:
function playSeaHag called 0 returned 0% blocks executed 0%
        -: 2011:int playSeaHag(int currentPlayer, struct gameState *state)
        -: 2012:{
        -: 2013:  	int i;
    #####: 2014:  	 for (i = 0; i < state->numPlayers+1; i++){ //INCORRECT - SHOULD BE i < state->numPlayers. THIS IS A BUG
branch  0 never executed
branch  1 never executed
    #####: 2015:		if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 2016:		  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
    #####: 2017:		  state->deckCount[i]--;
    #####: 2018:		  state->discardCount[i]++;
    #####: 2019:		  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 2020:		}
    #####: 2021:	  }
    #####: 2022:	return 0;
        -: 2023:}
        -: 2024:
        -: 2025:/*int playTreasureMap(int currentPlayer, struct gameState *state, int handPos)
        -: 2026:{
        -: 2027:	int i, index;
        -: 2028:      //search hand for another treasure_map
        -: 2029:      index = -1;
        -: 2030:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 2031:	{
        -: 2032:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 2033:	    {
        -: 2034:	      index = i;
        -: 2035:	      break;
        -: 2036:	    }
        -: 2037:	}
        -: 2038:      if (index > -1)
        -: 2039:	{
        -: 2040:	  //trash both treasure cards
        -: 2041:	  discardCard(handPos, currentPlayer, state, 1);
        -: 2042:	  discardCard(index, currentPlayer, state, 1);
        -: 2043:
        -: 2044:	  //gain 4 Gold cards
        -: 2045:	  for (i = 0; i < 4; i++)
        -: 2046:	    {
        -: 2047:	      gainCard(gold, state, 1, currentPlayer);
        -: 2048:	    }
        -: 2049:				
        -: 2050:	  //return success
        -: 2051:	  return 1;
        -: 2052:	}
        -: 2053:			
        -: 2054:      //no second treasure_map found in hand
        -: 2055:      return -1;
        -: 2056:}*/
        -: 2057:
        -: 2058://end of dominion.c
        -: 2059:
unittest4.c
TEST 1: 0 cost cards
TEST 1 SUCCESS
TEST 2: 2 cost cards
TEST 2 SUCCESS
TEST 3: 3 cost cards
TEST 3 SUCCESS
TEST 4: 4 cost cards
TEST 4 SUCCESS
TEST 5: 5 cost cards
TEST 5 SUCCESS
TEST 6: 6 cost cards
TEST 6 SUCCESS
TEST 7: 8 cost cards
TEST 7 SUCCESS
Function 'compare'
Lines executed:0.00% of 6
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:0.00% of 78
Branches executed:0.00% of 46
Taken at least once:0.00% of 46
No calls

Function 'shuffle'
Lines executed:0.00% of 18
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:0.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:0.00% of 24
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'getCost'
Lines executed:96.67% of 30
Branches executed:100.00% of 28
Taken at least once:96.43% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 256
Branches executed:0.00% of 181
Taken at least once:0.00% of 181
No calls

Function 'discardCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'gainCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'updateCoins'
Lines executed:0.00% of 14
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'playAdventurer'
Lines executed:0.00% of 18
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'playSmithy'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'playVillage'
Lines executed:0.00% of 4
No branches
No calls

Function 'playGreatHall'
Lines executed:0.00% of 4
No branches
No calls

Function 'playSeaHag'
Lines executed:0.00% of 9
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls

File 'dominion.c'
Lines executed:4.49% of 646
Branches executed:6.71% of 417
Taken at least once:6.47% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:// set NOISY_TEST to 0 to remove printfs from output
        -:    9:#define NOISY_TEST 1
        -:   10:
        -:   11:
function compare called 0 returned 0% blocks executed 0%
        -:   12:int compare(const void* a, const void* b) {
    #####:   13:  if (*(int*)a > *(int*)b)
branch  0 never executed
branch  1 never executed
    #####:   14:    return 1;
    #####:   15:  if (*(int*)a < *(int*)b)
branch  0 never executed
branch  1 never executed
    #####:   16:    return -1;
    #####:   17:  return 0;
    #####:   18:}
        -:   19:
function newGame called 0 returned 0% blocks executed 0%
        -:   20:struct gameState* newGame() {
    #####:   21:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   22:  return g;
        -:   23:}
        -:   24:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   25:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   26:		  int k8, int k9, int k10) {
    #####:   27:  int* k = malloc(10 * sizeof(int));
    #####:   28:  k[0] = k1;
    #####:   29:  k[1] = k2;
    #####:   30:  k[2] = k3;
    #####:   31:  k[3] = k4;
    #####:   32:  k[4] = k5;
    #####:   33:  k[5] = k6;
    #####:   34:  k[6] = k7;
    #####:   35:  k[7] = k8;
    #####:   36:  k[8] = k9;
    #####:   37:  k[9] = k10;
    #####:   38:  return k;
        -:   39:}
        -:   40:
function initializeGame called 0 returned 0% blocks executed 0%
        -:   41:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   42:		   struct gameState *state) {
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;			
        -:   47:  //set up random number generator
    #####:   48:  SelectStream(1);
    #####:   49:  PutSeed((long)randomSeed);
        -:   50:  
        -:   51:  //check number of players
    #####:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   53:    {
    #####:   54:      return -1;
        -:   55:    }
        -:   56:
        -:   57:  //set number of players
    #####:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
    #####:   61:  for (i = 0; i < 10; i++)
branch  0 never executed
branch  1 never executed
        -:   62:    {
    #####:   63:      for (j = 0; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:   64:        {
    #####:   65:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   66:	    {
    #####:   67:	      return -1;
        -:   68:	    }
    #####:   69:        }
    #####:   70:    }
        -:   71:
        -:   72:
        -:   73:  //initialize supply
        -:   74:  ///////////////////////////////
        -:   75:
        -:   76:  //set number of Curse cards
    #####:   77:  if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 10;
    #####:   80:    }
    #####:   81:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 20;
    #####:   84:    }
        -:   85:  else
        -:   86:    {
    #####:   87:      state->supplyCount[curse] = 30;
        -:   88:    }
        -:   89:
        -:   90:  //set number of Victory cards
    #####:   91:  if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   92:    {
    #####:   93:      state->supplyCount[estate] = 8;
    #####:   94:      state->supplyCount[duchy] = 8;
    #####:   95:      state->supplyCount[province] = 8;
    #####:   96:    }
        -:   97:  else
        -:   98:    {
    #####:   99:      state->supplyCount[estate] = 12;
    #####:  100:      state->supplyCount[duchy] = 12;
    #####:  101:      state->supplyCount[province] = 12;
        -:  102:    }
        -:  103:
        -:  104:  //set number of Treasure cards
    #####:  105:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  106:  state->supplyCount[silver] = 40;
    #####:  107:  state->supplyCount[gold] = 30;
        -:  108:
        -:  109:  //set number of Kingdom cards
    #####:  110:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 never executed
branch  1 never executed
        -:  111:    {
    #####:  112:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 never executed
branch  1 never executed
        -:  113:    	{
    #####:  114:    	  if (kingdomCards[j] == i)
branch  0 never executed
branch  1 never executed
        -:  115:    	    {
        -:  116:    	      //check if card is a 'Victory' Kingdom card
    #####:  117:    	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  118:          		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  119:          		    state->supplyCount[i] = 8; 
    #####:  120:          		  }
    #####:  121:          		  else{ state->supplyCount[i] = 12; }
    #####:  122:    		      }
        -:  123:    	      
        -:  124:            else{
    #####:  125:        		  state->supplyCount[i] = 10;
        -:  126:        		}
    #####:  127:    	      break;
        -:  128:  	       }
        -:  129:    	  else    //card is not in the set choosen for the game
        -:  130:    	    {
    #####:  131:    	      state->supplyCount[i] = -1;
        -:  132:    	    }
    #####:  133:  	}
        -:  134:
    #####:  135:    }
        -:  136:
        -:  137:  ////////////////////////
        -:  138:  //supply intilization complete
        -:  139:
        -:  140:  //set player decks
    #####:  141:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  142:    {
    #####:  143:      state->deckCount[i] = 0;
    #####:  144:      for (j = 0; j < 3; j++)
branch  0 never executed
branch  1 never executed
        -:  145:	{
    #####:  146:	  state->deck[i][j] = estate;
    #####:  147:	  state->deckCount[i]++;
    #####:  148:	}
    #####:  149:      for (j = 3; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:  150:	{
    #####:  151:	  state->deck[i][j] = copper;
    #####:  152:	  state->deckCount[i]++;		
    #####:  153:	}
    #####:  154:    }
        -:  155:
        -:  156:  //shuffle player decks
    #####:  157:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  158:    {
    #####:  159:      if ( shuffle(i, state) < 0 )
branch  0 never executed
branch  1 never executed
        -:  160:	{
    #####:  161:	  return -1;
        -:  162:	}
    #####:  163:    }
        -:  164:
        -:  165:  //draw player hands
    #####:  166:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  167:    {  
        -:  168:      //initialize hand size to zero
    #####:  169:      state->handCount[i] = 0;
    #####:  170:      state->discardCount[i] = 0;
        -:  171:      //draw 5 cards
        -:  172:      // for (j = 0; j < 5; j++)
        -:  173:      //	{
        -:  174:      //	  drawCard(i, state);
        -:  175:      //	}
    #####:  176:    }
        -:  177:  
        -:  178:  //set embargo tokens to 0 for all supply piles
    #####:  179:  for (i = 0; i <= treasure_map; i++)
branch  0 never executed
branch  1 never executed
        -:  180:    {
    #####:  181:      state->embargoTokens[i] = 0;
    #####:  182:    }
        -:  183:
        -:  184:  //initialize first player's turn
    #####:  185:  state->outpostPlayed = 0;
    #####:  186:  state->phase = 0;
    #####:  187:  state->numActions = 1;
    #####:  188:  state->numBuys = 1;
    #####:  189:  state->playedCardCount = 0;
    #####:  190:  state->whoseTurn = 0;
    #####:  191:  state->handCount[state->whoseTurn] = 0;
        -:  192:  //int it; move to top
        -:  193:
        -:  194:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  195:  for (it = 0; it < 5; it++){
branch  0 never executed
branch  1 never executed
    #####:  196:    drawCard(state->whoseTurn, state);
    #####:  197:  }
        -:  198:
    #####:  199:  updateCoins(state->whoseTurn, state, 0);
        -:  200:
    #####:  201:  return 0;
    #####:  202:}
        -:  203:
function shuffle called 0 returned 0% blocks executed 0%
        -:  204:int shuffle(int player, struct gameState *state) {
        -:  205: 
        -:  206:
        -:  207:  int newDeck[MAX_DECK];
    #####:  208:  int newDeckPos = 0;
        -:  209:  int card;
        -:  210:  int i;
        -:  211:
    #####:  212:  if (state->deckCount[player] < 1)
branch  0 never executed
branch  1 never executed
    #####:  213:    return -1;
    #####:  214:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  215:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  216:
    #####:  217:  while (state->deckCount[player] > 0) {
branch  0 never executed
branch  1 never executed
    #####:  218:    card = floor(Random() * state->deckCount[player]);
    #####:  219:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  220:    newDeckPos++;
    #####:  221:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 never executed
branch  1 never executed
    #####:  222:      state->deck[player][i] = state->deck[player][i+1];
    #####:  223:    }
    #####:  224:    state->deckCount[player]--;
        -:  225:  }
    #####:  226:  for (i = 0; i < newDeckPos; i++) {
branch  0 never executed
branch  1 never executed
    #####:  227:    state->deck[player][i] = newDeck[i];
    #####:  228:    state->deckCount[player]++;
    #####:  229:  }
        -:  230:
    #####:  231:  return 0;
    #####:  232:}
        -:  233:
function playCard called 0 returned 0% blocks executed 0%
        -:  234:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  235:{	
        -:  236:  int card;
    #####:  237:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  238:
        -:  239:  //check if it is the right phase
    #####:  240:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  241:    {
    #####:  242:      return -1;
        -:  243:    }
        -:  244:	
        -:  245:  //check if player has enough actions
    #####:  246:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  247:    {
    #####:  248:      return -1;
        -:  249:    }
        -:  250:	
        -:  251:  //get card played
    #####:  252:  card = handCard(handPos, state);
        -:  253:	
        -:  254:  //check if selected card is an action
    #####:  255:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  256:    {
    #####:  257:      return -1;
        -:  258:    }
        -:  259:	
        -:  260:  //play card
    #####:  261:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  262:    {
    #####:  263:      return -1;
        -:  264:    }
        -:  265:	
        -:  266:  //reduce number of actions
    #####:  267:  state->numActions--;
        -:  268:
        -:  269:  //update coins (Treasure cards may be added with card draws)
    #####:  270:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  271:	
    #####:  272:  return 0;
    #####:  273:}
        -:  274:
function buyCard called 0 returned 0% blocks executed 0%
        -:  275:int buyCard(int supplyPos, struct gameState *state) {
        -:  276:  int who;
        -:  277:  if (DEBUG){
        -:  278:    printf("Entering buyCard...\n");
        -:  279:  }
        -:  280:
        -:  281:  // I don't know what to do about the phase thing.
        -:  282:
    #####:  283:  who = state->whoseTurn;
        -:  284:
    #####:  285:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  286:    if (DEBUG)
        -:  287:      printf("You do not have any buys left\n");
    #####:  288:    return -1;
    #####:  289:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  290:    if (DEBUG)
        -:  291:      printf("There are not any of that type of card left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  294:    if (DEBUG) 
        -:  295:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  296:    return -1;
        -:  297:  } else {
    #####:  298:    state->phase=1;
        -:  299:    //state->supplyCount[supplyPos]--;
    #####:  300:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  301:  
    #####:  302:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  303:    state->numBuys--;
        -:  304:    if (DEBUG)
        -:  305:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  306:  }
        -:  307:
        -:  308:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  309:  //state->discardCount[who]++;
        -:  310:    
    #####:  311:  return 0;
    #####:  312:}
        -:  313:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  314:int numHandCards(struct gameState *state) {
    #####:  315:  return state->handCount[ whoseTurn(state) ];
        -:  316:}
        -:  317:
function handCard called 0 returned 0% blocks executed 0%
        -:  318:int handCard(int handPos, struct gameState *state) {
    #####:  319:  int currentPlayer = whoseTurn(state);
    #####:  320:  return state->hand[currentPlayer][handPos];
        -:  321:}
        -:  322:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  323:int supplyCount(int card, struct gameState *state) {
    #####:  324:  return state->supplyCount[card];
        -:  325:}
        -:  326:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  327:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  328:  int i;
    #####:  329:  int count = 0;
        -:  330:
    #####:  331:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  332:    {
    #####:  333:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  334:    }
        -:  335:
    #####:  336:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  337:    {
    #####:  338:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  339:    }
        -:  340:
    #####:  341:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  342:    {
    #####:  343:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  344:    }
        -:  345:
    #####:  346:  return count;
        -:  347:}
        -:  348:
function whoseTurn called 0 returned 0% blocks executed 0%
        -:  349:int whoseTurn(struct gameState *state) {
    #####:  350:  return state->whoseTurn;
        -:  351:}
        -:  352:
function endTurn called 0 returned 0% blocks executed 0%
        -:  353:int endTurn(struct gameState *state) {
        -:  354:  int k;
        -:  355:  int i;
    #####:  356:  int currentPlayer = whoseTurn(state);
        -:  357:  
        -:  358:  //Discard hand
    #####:  359:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  360:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  361:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  362:  }
    #####:  363:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  364:    
        -:  365:  //Code for determining the player
    #####:  366:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  367:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  368:  }
        -:  369:  else{
    #####:  370:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  371:  }
        -:  372:
    #####:  373:  state->outpostPlayed = 0;
    #####:  374:  state->phase = 0;
    #####:  375:  state->numActions = 1;
    #####:  376:  state->coins = 0;
    #####:  377:  state->numBuys = 1;
    #####:  378:  state->playedCardCount = 0;
    #####:  379:  state->handCount[state->whoseTurn] = 0;
        -:  380:
        -:  381:  //int k; move to top
        -:  382:  //Next player draws hand
    #####:  383:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  384:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  385:  }
        -:  386:
        -:  387:  //Update money
    #####:  388:  updateCoins(state->whoseTurn, state , 0);
        -:  389:
    #####:  390:  return 0;
        -:  391:}
        -:  392:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  393:int isGameOver(struct gameState *state) {
        -:  394:  int i;
        -:  395:  int j;
        -:  396:	
        -:  397:  //if stack of Province cards is empty, the game ends
    #####:  398:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  399:    {
    #####:  400:      return 1;
        -:  401:    }
        -:  402:
        -:  403:  //if three supply piles are at 0, the game ends
    #####:  404:  j = 0;
    #####:  405:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  406:    {
    #####:  407:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  408:	{
    #####:  409:	  j++;
    #####:  410:	}
    #####:  411:    }
    #####:  412:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  413:    {
    #####:  414:      return 1;
        -:  415:    }
        -:  416:
    #####:  417:  return 0;
    #####:  418:}
        -:  419:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  420:int scoreFor (int player, struct gameState *state) {
        -:  421:
        -:  422:  int i;
    #####:  423:  int score = 0;
        -:  424:  //score from hand
    #####:  425:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  426:    {
    #####:  427:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  433:    }
        -:  434:
        -:  435:  //score from discard
    #####:  436:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  437:    {
    #####:  438:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  444:    }
        -:  445:
        -:  446:  //score from deck
    #####:  447:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  448:    {
    #####:  449:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  455:    }
        -:  456:
    #####:  457:  return score;
        -:  458:}
        -:  459:
function getWinners called 0 returned 0% blocks executed 0%
        -:  460:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  461:  int i;	
        -:  462:  int j;
        -:  463:  int highScore;
        -:  464:  int currentPlayer;
        -:  465:
        -:  466:  //get score for each player
    #####:  467:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  468:    {
        -:  469:      //set unused player scores to -9999
    #####:  470:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  471:	{
    #####:  472:	  players[i] = -9999;
    #####:  473:	}
        -:  474:      else
        -:  475:	{
    #####:  476:	  players[i] = scoreFor (i, state);
        -:  477:	}
    #####:  478:    }
        -:  479:
        -:  480:  //find highest score
    #####:  481:  j = 0;
    #####:  482:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  483:    {
    #####:  484:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  485:	{
    #####:  486:	  j = i;
    #####:  487:	}
    #####:  488:    }
    #####:  489:  highScore = players[j];
        -:  490:
        -:  491:  //add 1 to players who had less turns
    #####:  492:  currentPlayer = whoseTurn(state);
    #####:  493:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  494:    {
    #####:  495:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  496:	{
    #####:  497:	  players[i]++;
    #####:  498:	}
    #####:  499:    }
        -:  500:
        -:  501:  //find new highest score
    #####:  502:  j = 0;
    #####:  503:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  504:    {
    #####:  505:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  506:	{
    #####:  507:	  j = i;
    #####:  508:	}
    #####:  509:    }
    #####:  510:  highScore = players[j];
        -:  511:
        -:  512:  //set winners in array to 1 and rest to 0
    #####:  513:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  514:    {
    #####:  515:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  516:	{
    #####:  517:	  players[i] = 1;
    #####:  518:	}
        -:  519:      else
        -:  520:	{
    #####:  521:	  players[i] = 0;
        -:  522:	}
    #####:  523:    }
        -:  524:
    #####:  525:  return 0;
        -:  526:}
        -:  527:
function drawCard called 0 returned 0% blocks executed 0%
        -:  528:int drawCard(int player, struct gameState *state)
        -:  529:{	
        -:  530:  int count;
        -:  531:  int deckCounter;
    #####:  532:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 never executed
branch  1 never executed
        -:  533:    
        -:  534:    //Step 1 Shuffle the discard pile back into a deck
        -:  535:    int i;
        -:  536:    //Move discard to deck
    #####:  537:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  538:      state->deck[player][i] = state->discard[player][i];
    #####:  539:      state->discard[player][i] = -1;
    #####:  540:    }
        -:  541:
    #####:  542:    state->deckCount[player] = state->discardCount[player];
    #####:  543:    state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:    //Shufffle the deck
    #####:  546:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  547:   
        -:  548:    if (DEBUG){//Debug statements
        -:  549:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:    }
        -:  551:    
    #####:  552:    state->discardCount[player] = 0;
        -:  553:
        -:  554:    //Step 2 Draw Card
    #####:  555:    count = state->handCount[player];//Get current player's hand count
        -:  556:    
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Current hand count: %d\n", count);
        -:  559:    }
        -:  560:    
    #####:  561:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
    #####:  563:    if (deckCounter == 0){
branch  0 never executed
branch  1 never executed
    #####:  564:      return -1;
        -:  565:    }
        -:  566:
    #####:  567:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  568:    state->deckCount[player]--;
    #####:  569:    state->handCount[player]++;//Increment hand count
    #####:  570:  }
        -:  571:
        -:  572:  else{
    #####:  573:    int count = state->handCount[player];//Get current hand count for player
        -:  574:    int deckCounter;
        -:  575:    if (DEBUG){//Debug statements
        -:  576:      printf("Current hand count: %d\n", count);
        -:  577:    }
        -:  578:
    #####:  579:    deckCounter = state->deckCount[player];//Create holder for the deck count
    #####:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    #####:  581:    state->deckCount[player]--;
    #####:  582:    state->handCount[player]++;//Increment hand count
        -:  583:  }
        -:  584:
    #####:  585:  return 0;
    #####:  586:}
        -:  587:
function getCost called 27 returned 100% blocks executed 96%
        -:  588:int getCost(int cardNumber)
        -:  589:{
       27:  590:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 0%
        -:  591:    {
        -:  592:    case curse:
        1:  593:      return 0;
        -:  594:    case estate:
        1:  595:      return 2;
        -:  596:    case duchy:
        1:  597:      return 5;
        -:  598:    case province:
        1:  599:      return 8;
        -:  600:    case copper:
        1:  601:      return 0;
        -:  602:    case silver:
        1:  603:      return 3;
        -:  604:    case gold:
        1:  605:      return 6;
        -:  606:    case adventurer:
        1:  607:      return 6;
        -:  608:    case council_room:
        1:  609:      return 5;
        -:  610:    case feast:
        1:  611:      return 4;
        -:  612:    case gardens:
        1:  613:      return 4;
        -:  614:    case mine:
        1:  615:      return 5;
        -:  616:    case remodel:
        1:  617:      return 4;
        -:  618:    case smithy:
        1:  619:      return 4;
        -:  620:    case village:
        1:  621:      return 3;
        -:  622:    case baron:
        1:  623:      return 4;
        -:  624:    case great_hall:
        1:  625:      return 3;
        -:  626:    case minion:
        1:  627:      return 5;
        -:  628:    case steward:
        1:  629:      return 3;
        -:  630:    case tribute:
        1:  631:      return 5;
        -:  632:    case ambassador:
        1:  633:      return 3;
        -:  634:    case cutpurse:
        1:  635:      return 4;
        -:  636:    case embargo: 
        1:  637:      return 2;
        -:  638:    case outpost:
        1:  639:      return 5;
        -:  640:    case salvager:
        1:  641:      return 4;
        -:  642:    case sea_hag:
        1:  643:      return 4;
        -:  644:    case treasure_map:
        1:  645:      return 4;
        -:  646:    }
        -:  647:	
    #####:  648:  return -1;
       27:  649:}
        -:  650:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  651:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  652:{
        -:  653:  int i;
        -:  654:  int j;
        -:  655:  int k;
        -:  656:  int x;
        -:  657:  int index;
    #####:  658:  int currentPlayer = whoseTurn(state);
    #####:  659:  int nextPlayer = currentPlayer + 1;
        -:  660:
    #####:  661:  int tributeRevealedCards[2] = {-1, -1};
        -:  662:  int temphand[MAX_HAND];// moved above the if statement
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  664:    nextPlayer = 0;
    #####:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:      return playAdventurer(state, currentPlayer);
        -:  673:
        -:  674:      /*while(drawntreasure<2){
        -:  675:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  676:	  shuffle(currentPlayer, state);
        -:  677:	}
        -:  678:	drawCard(currentPlayer, state);
        -:  679:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  680:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  681:	  drawntreasure++;
        -:  682:	else{
        -:  683:	  temphand[z]=cardDrawn;
        -:  684:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  685:	  z++;
        -:  686:	}
        -:  687:      }
        -:  688:      while(z-1>=0){
        -:  689:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  690:	z=z-1;
        -:  691:      }
        -:  692:      return 0;*/
        -:  693:			
        -:  694:    case council_room:
        -:  695:      //+4 Cards
    #####:  696:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  697:	{
    #####:  698:	  drawCard(currentPlayer, state);
    #####:  699:	}
        -:  700:			
        -:  701:      //+1 Buy
    #####:  702:      state->numBuys++;
        -:  703:			
        -:  704:      //Each other player draws a card
    #####:  705:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  706:	{
    #####:  707:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  708:	    {
    #####:  709:	      drawCard(i, state);
    #####:  710:	    }
    #####:  711:	}
        -:  712:			
        -:  713:      //put played card in played card pile
    #####:  714:      discardCard(handPos, currentPlayer, state, 0);
        -:  715:			
    #####:  716:      return 0;
        -:  717:			
        -:  718:    case feast:
        -:  719:      //gain card with cost up to 5
        -:  720:      //Backup hand
    #####:  721:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  722:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  723:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  724:      }
        -:  725:      //Backup hand
        -:  726:
        -:  727:      //Update Coins for Buy
    #####:  728:      updateCoins(currentPlayer, state, 5);
    #####:  729:      x = 1;//Condition to loop on
    #####:  730:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  731:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  732:	  if (DEBUG)
        -:  733:	    printf("None of that card left, sorry!\n");
        -:  734:
        -:  735:	  if (DEBUG){
        -:  736:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  737:	  }
    #####:  738:	}
    #####:  739:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  740:	  printf("That card is too expensive!\n");
        -:  741:
        -:  742:	  if (DEBUG){
        -:  743:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  744:	  }
    #####:  745:	}
        -:  746:	else{
        -:  747:
        -:  748:	  if (DEBUG){
        -:  749:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  750:	  }
        -:  751:
    #####:  752:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  753:	  x = 0;//No more buying cards
        -:  754:
        -:  755:	  if (DEBUG){
        -:  756:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  757:	  }
        -:  758:
        -:  759:	}
        -:  760:      }     
        -:  761:
        -:  762:      //Reset Hand
    #####:  763:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  764:	state->hand[currentPlayer][i] = temphand[i];
    #####:  765:	temphand[i] = -1;
    #####:  766:      }
        -:  767:      //Reset Hand
        -:  768:      			
    #####:  769:      return 0;
        -:  770:			
        -:  771:    case gardens:
    #####:  772:      return -1;
        -:  773:			
        -:  774:    case mine:
    #####:  775:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  776:
    #####:  777:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  778:	{
    #####:  779:	  return -1;
        -:  780:	}
        -:  781:		
    #####:  782:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:
    #####:  787:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      gainCard(choice2, state, 2, currentPlayer);
        -:  793:
        -:  794:      //discard card from hand
    #####:  795:      discardCard(handPos, currentPlayer, state, 0);
        -:  796:
        -:  797:      //discard trashed card
    #####:  798:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  799:	{
    #####:  800:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  801:	    {
    #####:  802:	      discardCard(i, currentPlayer, state, 0);			
    #####:  803:	      break;
        -:  804:	    }
    #####:  805:	}
        -:  806:			
    #####:  807:      return 0;
        -:  808:			
        -:  809:    case remodel:
    #####:  810:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  811:
    #####:  812:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  813:	{
    #####:  814:	  return -1;
        -:  815:	}
        -:  816:
    #####:  817:      gainCard(choice2, state, 0, currentPlayer);
        -:  818:
        -:  819:      //discard card from hand
    #####:  820:      discardCard(handPos, currentPlayer, state, 0);
        -:  821:
        -:  822:      //discard trashed card
    #####:  823:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  824:	{
    #####:  825:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  826:	    {
    #####:  827:	      discardCard(i, currentPlayer, state, 0);			
    #####:  828:	      break;
        -:  829:	    }
    #####:  830:	}
        -:  831:
        -:  832:
    #####:  833:      return 0;
        -:  834:		
        -:  835:    case smithy:
    #####:  836:      return playSmithy(currentPlayer, state, handPos);
        -:  837:      /*//+3 Cards
        -:  838:      for (i = 0; i < 3; i++)
        -:  839:	{
        -:  840:	  drawCard(currentPlayer, state);
        -:  841:	}
        -:  842:			
        -:  843:      //discard card from hand
        -:  844:      discardCard(handPos, currentPlayer, state, 0);
        -:  845:      return 0;*/
        -:  846:		
        -:  847:    case village:
    #####:  848:      return playVillage(currentPlayer, state, handPos);
        -:  849:      /*//+1 Card
        -:  850:      drawCard(currentPlayer, state);
        -:  851:			
        -:  852:      //+2 Actions
        -:  853:      state->numActions = state->numActions + 2;
        -:  854:			
        -:  855:      //discard played card from hand
        -:  856:      discardCard(handPos, currentPlayer, state, 0);
        -:  857:      return 0;*/
        -:  858:		
        -:  859:    case baron:
    #####:  860:      state->numBuys++;//Increase buys by 1!
    #####:  861:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  862:	int p = 0;//Iterator for hand!
    #####:  863:	int card_not_discarded = 1;//Flag for discard set!
    #####:  864:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  865:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  866:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  867:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  868:	    state->discardCount[currentPlayer]++;
    #####:  869:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  870:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  871:	    }
    #####:  872:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  873:	    state->handCount[currentPlayer]--;
    #####:  874:	    card_not_discarded = 0;//Exit the loop
    #####:  875:	  }
    #####:  876:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  877:	    if(DEBUG) {
        -:  878:	      printf("No estate cards in your hand, invalid choice\n");
        -:  879:	      printf("Must gain an estate if there are any\n");
        -:  880:	    }
    #####:  881:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  882:	      gainCard(estate, state, 0, currentPlayer);
    #####:  883:	      state->supplyCount[estate]--;//Decrement estates
    #####:  884:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  885:		isGameOver(state);
    #####:  886:	      }
    #####:  887:	    }
    #####:  888:	    card_not_discarded = 0;//Exit the loop
    #####:  889:	  }
        -:  890:			    
        -:  891:	  else{
    #####:  892:	    p++;//Next card
        -:  893:	  }
        -:  894:	}
    #####:  895:      }
        -:  896:			    
        -:  897:      else{
    #####:  898:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  899:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  900:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  901:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  902:	    isGameOver(state);
    #####:  903:	  }
    #####:  904:	}
        -:  905:      }
        -:  906:	    
        -:  907:      
    #####:  908:      return 0;
        -:  909:		
        -:  910:    case great_hall:
    #####:  911:      return playGreatHall(currentPlayer, state, handPos);
        -:  912:      /*//+1 Card
        -:  913:      drawCard(currentPlayer, state);
        -:  914:			
        -:  915:      //+1 Actions
        -:  916:      state->numActions++;
        -:  917:			
        -:  918:      //discard card from hand
        -:  919:      discardCard(handPos, currentPlayer, state, 0);
        -:  920:      return 0;*/
        -:  921:		
        -:  922:    case minion:
        -:  923:      //+1 action
    #####:  924:      state->numActions++;
        -:  925:			
        -:  926:      //discard card from hand
    #####:  927:      discardCard(handPos, currentPlayer, state, 0);
        -:  928:			
    #####:  929:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  930:	{
    #####:  931:	  state->coins = state->coins + 2;
    #####:  932:	}
        -:  933:			
    #####:  934:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  935:	{
        -:  936:	  //discard hand
    #####:  937:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  938:	    {
    #####:  939:	      discardCard(handPos, currentPlayer, state, 0);
        -:  940:	    }
        -:  941:				
        -:  942:	  //draw 4
    #####:  943:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  944:	    {
    #####:  945:	      drawCard(currentPlayer, state);
    #####:  946:	    }
        -:  947:				
        -:  948:	  //other players discard hand and redraw if hand size > 4
    #####:  949:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  950:	    {
    #####:  951:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  952:		{
    #####:  953:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  954:		    {
        -:  955:		      //discard hand
    #####:  956:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  957:			{
    #####:  958:			  discardCard(handPos, i, state, 0);
        -:  959:			}
        -:  960:							
        -:  961:		      //draw 4
    #####:  962:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  963:			{
    #####:  964:			  drawCard(i, state);
    #####:  965:			}
    #####:  966:		    }
    #####:  967:		}
    #####:  968:	    }
        -:  969:				
    #####:  970:	}
    #####:  971:      return 0;
        -:  972:		
        -:  973:    case steward:
    #####:  974:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  975:	{
        -:  976:	  //+2 cards
    #####:  977:	  drawCard(currentPlayer, state);
    #####:  978:	  drawCard(currentPlayer, state);
    #####:  979:	}
    #####:  980:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  981:	{
        -:  982:	  //+2 coins
    #####:  983:	  state->coins = state->coins + 2;
    #####:  984:	}
        -:  985:      else
        -:  986:	{
        -:  987:	  //trash 2 cards in hand
    #####:  988:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  989:	  discardCard(choice3, currentPlayer, state, 1);
        -:  990:	}
        -:  991:			
        -:  992:      //discard card from hand
    #####:  993:      discardCard(handPos, currentPlayer, state, 0);
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case tribute:
    #####:  997:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  998:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  999:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1000:	  state->deckCount[nextPlayer]--;
    #####: 1001:	}
    #####: 1002:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1003:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1004:	  state->discardCount[nextPlayer]--;
    #####: 1005:	}
        -: 1006:	else{
        -: 1007:	  //No Card to Reveal
        -: 1008:	  if (DEBUG){
        -: 1009:	    printf("No cards to reveal\n");
        -: 1010:	  }
        -: 1011:	}
    #####: 1012:      }
        -: 1013:	    
        -: 1014:      else{
    #####: 1015:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1016:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1017:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1018:	    state->deckCount[nextPlayer]++;
    #####: 1019:	    state->discard[nextPlayer][i] = -1;
    #####: 1020:	    state->discardCount[nextPlayer]--;
    #####: 1021:	  }
        -: 1022:			    
    #####: 1023:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1024:	} 
    #####: 1025:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1026:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1027:	state->deckCount[nextPlayer]--;
    #####: 1028:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1029:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1030:	state->deckCount[nextPlayer]--;
        -: 1031:      }    
        -: 1032:		       
    #####: 1033:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1034:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1035:	state->playedCardCount++;
    #####: 1036:	tributeRevealedCards[1] = -1;
    #####: 1037:      }
        -: 1038:
    #####: 1039:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1040:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1041:	  state->coins += 2;
    #####: 1042:	}
        -: 1043:		    
    #####: 1044:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1045:	  drawCard(currentPlayer, state);
    #####: 1046:	  drawCard(currentPlayer, state);
    #####: 1047:	}
        -: 1048:	else{//Action Card
    #####: 1049:	  state->numActions = state->numActions + 2;
        -: 1050:	}
    #####: 1051:      }
        -: 1052:	    
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case ambassador:
    #####: 1056:      j = 0;		//used to check if player has enough cards to discard
        -: 1057:
    #####: 1058:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1059:	{
    #####: 1060:	  return -1;				
        -: 1061:	}
        -: 1062:
    #####: 1063:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1064:	{
    #####: 1065:	  return -1;
        -: 1066:	}
        -: 1067:
    #####: 1068:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
    #####: 1070:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1071:	    {
    #####: 1072:	      j++;
    #####: 1073:	    }
    #####: 1074:	}
    #####: 1075:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1076:	{
    #####: 1077:	  return -1;				
        -: 1078:	}
        -: 1079:
        -: 1080:      if (DEBUG) 
        -: 1081:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1082:
        -: 1083:      //increase supply count for choosen card by amount being discarded
    #####: 1084:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1085:			
        -: 1086:      //each other player gains a copy of revealed card
    #####: 1087:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1088:	{
    #####: 1089:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1090:	    {
    #####: 1091:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1092:	    }
    #####: 1093:	}
        -: 1094:
        -: 1095:      //discard played card from hand
    #####: 1096:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1097:
        -: 1098:      //trash copies of cards returned to supply
    #####: 1099:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1100:	{
    #####: 1101:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1102:	    {
    #####: 1103:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1104:		{
    #####: 1105:		  discardCard(i, currentPlayer, state, 1);
    #####: 1106:		  break;
        -: 1107:		}
    #####: 1108:	    }
    #####: 1109:	}			
        -: 1110:
    #####: 1111:      return 0;
        -: 1112:		
        -: 1113:    case cutpurse:
        -: 1114:
    #####: 1115:      updateCoins(currentPlayer, state, 2);
    #####: 1116:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
    #####: 1118:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1119:	    {
    #####: 1120:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1121:		{
    #####: 1122:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1123:		    {
    #####: 1124:		      discardCard(j, i, state, 0);
    #####: 1125:		      break;
        -: 1126:		    }
    #####: 1127:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1128:		    {
    #####: 1129:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1130:			{
        -: 1131:			  if (DEBUG)
        -: 1132:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1133:			}	
    #####: 1134:		      break;
        -: 1135:		    }		
    #####: 1136:		}
        -: 1137:					
    #####: 1138:	    }
        -: 1139:				
    #####: 1140:	}				
        -: 1141:
        -: 1142:      //discard played card from hand
    #####: 1143:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1144:
    #####: 1145:      return 0;
        -: 1146:
        -: 1147:		
        -: 1148:    case embargo: 
        -: 1149:      //+2 Coins
    #####: 1150:      state->coins = state->coins + 2;
        -: 1151:			
        -: 1152:      //see if selected pile is in play
    #####: 1153:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1154:	{
    #####: 1155:	  return -1;
        -: 1156:	}
        -: 1157:			
        -: 1158:      //add embargo token to selected supply pile
    #####: 1159:      state->embargoTokens[choice1]++;
        -: 1160:			
        -: 1161:      //trash card
    #####: 1162:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1163:      return 0;
        -: 1164:		
        -: 1165:    case outpost:
        -: 1166:      //set outpost flag
    #####: 1167:      state->outpostPlayed++;
        -: 1168:			
        -: 1169:      //discard card
    #####: 1170:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1171:      return 0;
        -: 1172:		
        -: 1173:    case salvager:
        -: 1174:      //+1 buy
    #####: 1175:      state->numBuys++;
        -: 1176:			
    #####: 1177:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1178:        	{
        -: 1179:            //gain coins equal to trashed card
    #####: 1180:        	  state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1181:        	  //trash card
    #####: 1182:        	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1183:        	}
        -: 1184:        			
        -: 1185:      //discard card
    #####: 1186:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1187:      return 0;
        -: 1188:		
        -: 1189:    case sea_hag:
    #####: 1190:      return playSeaHag(currentPlayer, state);
        -: 1191:      /*for (i = 0; i < state->numPlayers+1; i++){ //INCORRECT - SHOULD BE i < state->numPlayers. THIS IS A BUG
        -: 1192:	if (i != currentPlayer){
        -: 1193:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        -: 1194:	  state->discardCount[i]++;
        -: 1195:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1196:	}
        -: 1197:      }
        -: 1198:      return 0;*/
        -: 1199:		
        -: 1200:    case treasure_map:
        -: 1201:      //search hand for another treasure_map
    #####: 1202:      index = -1;
    #####: 1203:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1204:	{
    #####: 1205:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1206:	    {
    #####: 1207:	      index = i;
    #####: 1208:	      break;
        -: 1209:	    }
    #####: 1210:	}
    #####: 1211:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1212:	{
        -: 1213:	  //trash both treasure cards
    #####: 1214:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1215:	  discardCard(index, currentPlayer, state, 1);
        -: 1216:
        -: 1217:	  //gain 4 Gold cards
    #####: 1218:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1219:	    {
    #####: 1220:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1221:	    }
        -: 1222:				
        -: 1223:	  //return success
    #####: 1224:	  return 1;
        -: 1225:	}
        -: 1226:			
        -: 1227:      //no second treasure_map found in hand
    #####: 1228:      return -1;
        -: 1229:    }
        -: 1230:	
    #####: 1231:  return -1;
    #####: 1232:}
        -: 1233:
        -: 1234:/*int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -: 1235:{
        -: 1236:  int i;
        -: 1237:  int j;
        -: 1238:  int k;
        -: 1239:  int x;
        -: 1240:  int index;
        -: 1241:  int currentPlayer = whoseTurn(state);
        -: 1242:  int nextPlayer = currentPlayer + 1;
        -: 1243:
        -: 1244:  //int tributeRevealedCards[2] = {-1, -1};
        -: 1245:  int temphand[MAX_HAND];// moved above the if statement
        -: 1246:  int drawntreasure=0;
        -: 1247:  //int cardDrawn;
        -: 1248:  int z = 0;// this is the counter for the temp hand
        -: 1249:  if (nextPlayer > (state->numPlayers - 1)){
        -: 1250:    nextPlayer = 0;
        -: 1251:  }
        -: 1252:  
        -: 1253:	
        -: 1254:  //uses switch to select card and perform actions
        -: 1255:  switch( card ) 
        -: 1256:    {
        -: 1257:    case adventurer: 
        -: 1258:	      return playAdventurer(&drawntreasure, state, currentPlayer, temphand, &z);
        -: 1259:			
        -: 1260:    case council_room:
        -: 1261:	     return playCouncilRoom(currentPlayer, state, handPos);
        -: 1262:			
        -: 1263:    case feast: //PASS int currentPlayer, struct* gameState state int temphand[], int choice1
        -: 1264:	     return playFeast(currentPlayer, state, temphand, handPos);
        -: 1265:			
        -: 1266:    case gardens:
        -: 1267:      	return playGardens();
        -: 1268:			
        -: 1269:    case mine: //PASS int currentPlayer, struct* gameState state, int choice1, int choice2, int handPos
        -: 1270:    	return playMine(currentPlayer, state, choice1, choice2, handPos);
        -: 1271:			
        -: 1272:    case remodel: // PASS int currentPlayer, struct* gameState state, int choice1, int choice2, int handPos	 
        -: 1273:    	return playRemodel(currentPlayer, state, choice1, choice2, handPos);  
        -: 1274:
        -: 1275:    case smithy: // PASS int currentPlayer, struct* gameState state, int handPos
        -: 1276:    	return playSmithy(currentPlayer, state, handPos);
        -: 1277:		
        -: 1278:    case village: // PASS int currentPlayer, struct gameState *state, int handPos
        -: 1279:    	return playVillage(currentPlayer, state, handPos);
        -: 1280:		
        -: 1281:    case baron: // int currentPlayer, struct gameState *state, int choice1
        -: 1282:    	return playBaron(currentPlayer, state, choice1);
        -: 1283:		
        -: 1284:    case great_hall:// int currentPlayer, struct gameState *state, int handPos 
        -: 1285:	    return playGreatHall(currentPlayer, state, handPos);
        -: 1286:		
        -: 1287:    case minion: // int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2
        -: 1288:    	return playMinion(currentPlayer, state, handPos, choice1, choice2);
        -: 1289:			
        -: 1290:    case steward: // int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3
        -: 1291:    	return playSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
        -: 1292:		
        -: 1293:    case tribute: // int currentPlayer, struct gameState *state, int nextPlayer
        -: 1294:    	return playTribute(currentPlayer, state, nextPlayer);
        -: 1295:		
        -: 1296:    case ambassador: // int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos
        -: 1297:	    return playAmbassador(currentPlayer, state, choice1, choice2, handPos);
        -: 1298:		
        -: 1299:    case cutpurse: // int currentPlayer, struct gameState *state, int handPos
        -: 1300:    	return playCutpurse(currentPlayer, state, handPos);
        -: 1301:		
        -: 1302:    case embargo: // int currentPlayer, struct gameState *state, int handPos, int choice1
        -: 1303:    	return playEmbargo(currentPlayer, state, handPos, choice1);
        -: 1304:		
        -: 1305:    case outpost: // int currentPlayer, struct gameState *state, int handPos
        -: 1306:    	return playOutpost(currentPlayer, state, handPos);
        -: 1307:
        -: 1308:    case salvager: // int currentPlayer, struct gameState *state, int handPos, int choice1
        -: 1309:    	return playSalvager(currentPlayer, state, handPos, choice1);
        -: 1310:		
        -: 1311:    case sea_hag: // int currentPlayer, struct gameState *state
        -: 1312:    	return playSeaHag(currentPlayer, state);
        -: 1313:		
        -: 1314:    case treasure_map: // int currentPlayer, struct gameState *state, int handPos
        -: 1315:    	return playTreasureMap(currentPlayer, state, handPos);
        -: 1316:
        -: 1317:	    }
        -: 1318:	
        -: 1319:  return -1;
        -: 1320:}*/
        -: 1321:
function discardCard called 0 returned 0% blocks executed 0%
        -: 1322:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1323:{
        -: 1324:	
        -: 1325:  //if card is not trashed, added to Played pile 
    #####: 1326:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1327:    {
        -: 1328:      //add card to played pile
    #####: 1329:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1330:      state->playedCardCount++;
    #####: 1331:    }
        -: 1332:	
        -: 1333:  //set played card to -1
    #####: 1334:  state->hand[currentPlayer][handPos] = -1;
        -: 1335:	
        -: 1336:  //remove card from player's hand
        -: 1337:  
    #####: 1338:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1339:    {
        -: 1340:      //reduce number of cards in hand
    #####: 1341:      state->handCount[currentPlayer]--;
    #####: 1342:    }
    #####: 1343:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1344:    {
        -: 1345:      //reduce number of cards in hand
    #####: 1346:      state->handCount[currentPlayer]--;
    #####: 1347:    }
        -: 1348:  else 	
        -: 1349:    {
        -: 1350:      //replace discarded card with last card in hand
    #####: 1351:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1352:      //set last card to -1
    #####: 1353:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1354:      //reduce number of cards in hand
    #####: 1355:      state->handCount[currentPlayer]--;
        -: 1356:    }
        -: 1357:	
    #####: 1358:  return 0;
        -: 1359:}
        -: 1360:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1361:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1362:{
        -: 1363:  //Note: supplyPos is enum of choosen card
        -: 1364:	
        -: 1365:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1366:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1367:    {
    #####: 1368:      return -1;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //added card for [whoseTurn] current player:
        -: 1372:  // toFlag = 0 : add to discard
        -: 1373:  // toFlag = 1 : add to deck
        -: 1374:  // toFlag = 2 : add to hand
        -: 1375:
    #####: 1376:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1377:    {
    #####: 1378:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1379:      state->deckCount[player]++;
    #####: 1380:    }
    #####: 1381:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1382:    {
    #####: 1383:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1384:      state->handCount[player]++;
    #####: 1385:    }
        -: 1386:  else
        -: 1387:    {
    #####: 1388:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1389:      state->discardCount[player]++;
        -: 1390:    }
        -: 1391:	
        -: 1392:  //decrease number in supply pile
    #####: 1393:  state->supplyCount[supplyPos]--;
        -: 1394:	 
    #####: 1395:  return 0;
    #####: 1396:}
        -: 1397:
function updateCoins called 0 returned 0% blocks executed 0%
        -: 1398:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1399:{
        -: 1400:  int i;
        -: 1401:	
        -: 1402:  //reset coin count
    #####: 1403:  state->coins = 0;
        -: 1404:
        -: 1405:  //add coins for each Treasure card in player's hand
    #####: 1406:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -: 1407:    {
    #####: 1408:      if (state->hand[player][i] == copper)
branch  0 never executed
branch  1 never executed
        -: 1409:	{
    #####: 1410:	  state->coins += 1;
    #####: 1411:	}
    #####: 1412:      else if (state->hand[player][i] == silver)
branch  0 never executed
branch  1 never executed
        -: 1413:	{
    #####: 1414:	  state->coins += 2;
    #####: 1415:	}
    #####: 1416:      else if (state->hand[player][i] == gold)
branch  0 never executed
branch  1 never executed
        -: 1417:	{
    #####: 1418:	  state->coins += 3;
    #####: 1419:	}	
    #####: 1420:    }	
        -: 1421:
        -: 1422:  //add bonus
    #####: 1423:  state->coins += bonus;
        -: 1424:
    #####: 1425:  return 0;
        -: 1426:}
        -: 1427:
        -: 1428:/************************************************************/
        -: 1429:/************************************************************/
        -: 1430:/************************************************************/
        -: 1431://new functions 4-12-17
        -: 1432:
function playAdventurer called 0 returned 0% blocks executed 0%
        -: 1433:int playAdventurer(struct gameState *state, int currentPlayer)
        -: 1434:{
        -: 1435:	int cardDrawn;
    #####: 1436:	int z = 0;
    #####: 1437:	int drawntreasure = 0;
        -: 1438:	int temphand[MAX_HAND];
        -: 1439:
    #####: 1440:	while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
        -: 1441:		
    #####: 1442:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1443:		  shuffle(currentPlayer, state);
    #####: 1444:		}
        -: 1445:		
    #####: 1446:    drawCard(currentPlayer, state);
    #####: 1447:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card. CORRECT
        -: 1448:		//cardDrawn = state->hand[currentPlayer][0]; //INCORRECT - this is a bug. cardDrawn should be last element in the hand, not first
        -: 1449:		
    #####: 1450:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1451:		  drawntreasure++;
    #####: 1452:    }
        -: 1453:		
        -: 1454:    else{
    #####: 1455:		  temphand[z]=cardDrawn;
    #####: 1456:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1457:		  z++;
        -: 1458:		}
        -: 1459:	}
        -: 1460:	 
    #####: 1461:  while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1462:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1463:		z=z-1;
        -: 1464:	 }
        -: 1465:	
    #####: 1466:  return 0;
        -: 1467:}
        -: 1468:
        -: 1469:/*int playCouncilRoom(int currentPlayer, struct gameState *state, int handPos)
        -: 1470:{
        -: 1471:	int i;	
        -: 1472:	//+4 Cards
        -: 1473:      for (i = 0; i < 4; i++)
        -: 1474:	{
        -: 1475:	  drawCard(currentPlayer, state);
        -: 1476:	}
        -: 1477:			
        -: 1478:      //+1 Buy
        -: 1479:      state->numBuys++;
        -: 1480:			
        -: 1481:      //Each other player draws a card
        -: 1482:      for (i = 0; i < state->numPlayers; i++)
        -: 1483:		{
        -: 1484:		  if ( i != currentPlayer )
        -: 1485:		    {
        -: 1486:		      drawCard(i, state);
        -: 1487:		    }
        -: 1488:		}
        -: 1489:				
        -: 1490:      //put played card in played card pile
        -: 1491:      discardCard(handPos, currentPlayer, state, 0);
        -: 1492:			
        -: 1493:      return 0;
        -: 1494:}*/
        -: 1495:
        -: 1496:/*int playFeast(int currentPlayer, struct gameState *state, int temphand[], int choice1)
        -: 1497:{
        -: 1498:	 //gain card with cost up to 5
        -: 1499:      //Backup hand
        -: 1500:	int i, x;
        -: 1501:
        -: 1502:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -: 1503:	temphand[i] = state->hand[currentPlayer][i];//Backup card
        -: 1504:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1505:      }
        -: 1506:      //Backup hand
        -: 1507:
        -: 1508:      //Update Coins for Buy
        -: 1509:      updateCoins(currentPlayer, state, 5);
        -: 1510:      x = 1;//Condition to loop on
        -: 1511:      while( x == 1) {//Buy one card
        -: 1512:	if (supplyCount(choice1, state) <= 0){
        -: 1513:	  if (DEBUG)
        -: 1514:	    printf("None of that card left, sorry!\n");
        -: 1515:
        -: 1516:	  if (DEBUG){
        -: 1517:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1518:	  }
        -: 1519:	}
        -: 1520:	else if (state->coins < getCost(choice1)){
        -: 1521:	  printf("That card is too expensive!\n");
        -: 1522:
        -: 1523:	  if (DEBUG){
        -: 1524:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1525:	  }
        -: 1526:	}
        -: 1527:	else{
        -: 1528:
        -: 1529:	  if (DEBUG){
        -: 1530:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1531:	  }
        -: 1532:
        -: 1533:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        -: 1534:	  x = 0;//No more buying cards
        -: 1535:
        -: 1536:	  if (DEBUG){
        -: 1537:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1538:	  }
        -: 1539:
        -: 1540:	}
        -: 1541:      }     
        -: 1542:
        -: 1543:      //Reset Hand
        -: 1544:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -: 1545:	state->hand[currentPlayer][i] = temphand[i];
        -: 1546:	temphand[i] = -1;
        -: 1547:      }
        -: 1548:      //Reset Hand
        -: 1549:      			
        -: 1550:      return 0;
        -: 1551:}*/
        -: 1552:
        -: 1553:/*int playGardens()
        -: 1554:{
        -: 1555:	return -1;
        -: 1556:}*/
        -: 1557:/*
        -: 1558: int playMine(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) 
        -: 1559: {
        -: 1560:     int i, j;
        -: 1561:
        -: 1562:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1563:
        -: 1564:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -: 1565:	{
        -: 1566:	  return -1;
        -: 1567:	}
        -: 1568:		
        -: 1569:      if (choice2 > treasure_map || choice2 < curse)
        -: 1570:	{
        -: 1571:	  return -1;
        -: 1572:	}
        -: 1573:
        -: 1574:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -: 1575:	{
        -: 1576:	  return -1;
        -: 1577:	}
        -: 1578:
        -: 1579:      gainCard(choice2, state, 2, currentPlayer);
        -: 1580:
        -: 1581:      //discard card from hand
        -: 1582:      discardCard(handPos, currentPlayer, state, 0);
        -: 1583:
        -: 1584:      //discard trashed card
        -: 1585:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1586:	{
        -: 1587:	  if (state->hand[currentPlayer][i] == j)
        -: 1588:	    {
        -: 1589:	      discardCard(i, currentPlayer, state, 0);			
        -: 1590:	      break;
        -: 1591:	    }
        -: 1592:	}
        -: 1593:			
        -: 1594:      return 0;
        -: 1595:}*/
        -: 1596:
        -: 1597:/*int playRemodel(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos)
        -: 1598:{
        -: 1599:     int i, j; 
        -: 1600:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1601:
        -: 1602:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1603:	{
        -: 1604:	  return -1;
        -: 1605:	}
        -: 1606:
        -: 1607:      gainCard(choice2, state, 0, currentPlayer);
        -: 1608:
        -: 1609:      //discard card from hand
        -: 1610:      discardCard(handPos, currentPlayer, state, 0);
        -: 1611:
        -: 1612:      //discard trashed card
        -: 1613:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1614:	{
        -: 1615:	  if (state->hand[currentPlayer][i] == j)
        -: 1616:	    {
        -: 1617:	      discardCard(i, currentPlayer, state, 0);			
        -: 1618:	      break;
        -: 1619:	    }
        -: 1620:	}
        -: 1621:
        -: 1622:
        -: 1623:      return 0;
        -: 1624:  }*/
        -: 1625:
function playSmithy called 0 returned 0% blocks executed 0%
        -: 1626:int playSmithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1627:{
        -: 1628:      //+3 Cards
        -: 1629:	int i;
    #####: 1630:      for (i = 0; i <= 3; i++) //INCORRECT, THIS IS A BUG. SHOULD BE i < 3 not i <= 3.
branch  0 never executed
branch  1 never executed
        -: 1631:    	{
    #####: 1632:    	  drawCard(currentPlayer, state);
    #####: 1633:    	}
        -: 1634:			
        -: 1635:      //discard card from hand
    #####: 1636:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1637:      return 0;
        -: 1638:}
        -: 1639:
function playVillage called 0 returned 0% blocks executed 0%
        -: 1640: int playVillage(int currentPlayer, struct gameState *state, int handPos)
        -: 1641: {
        -: 1642:      //+1 Card
    #####: 1643:      drawCard(currentPlayer, state);
        -: 1644:			
        -: 1645:      //+2 Actions
        -: 1646:      //state->numActions = state->numActions + 2;
    #####: 1647:      state->numActions = 2; //	INCORRECT - THIS IS A BUG. This resets numActions to 2 rather than adding 2 to it
        -: 1648:			
        -: 1649:      //discard played card from hand
    #####: 1650:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1651:      return 0;
        -: 1652:}
        -: 1653:
        -: 1654: /*int playBaron(int currentPlayer, struct gameState *state, int choice1)
        -: 1655: {
        -: 1656:      state->numBuys++;//Increase buys by 1!
        -: 1657:      if (choice1 > 0){//Boolean true or going to discard an estate
        -: 1658:	int p = 0;//Iterator for hand!
        -: 1659:	int card_not_discarded = 1;//Flag for discard set!
        -: 1660:	
        -: 1661:	while(card_not_discarded){
        -: 1662:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
        -: 1663:	    state->coins += 4;//Add 4 coins to the amount of coins
        -: 1664:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        -: 1665:	    state->discardCount[currentPlayer]++;
        -: 1666:	    
        -: 1667:	    for (;p < state->handCount[currentPlayer]; p++){
        -: 1668:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1669:	    }
        -: 1670:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        -: 1671:	    state->handCount[currentPlayer]--;
        -: 1672:	    card_not_discarded = 0;//Exit the loop
        -: 1673:	  }
        -: 1674:	 
        -: 1675:	  else if (p > state->handCount[currentPlayer]){
        -: 1676:	    if(DEBUG) {
        -: 1677:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1678:	      printf("Must gain an estate if there are any\n");
        -: 1679:	    }
        -: 1680:	    if (supplyCount(estate, state) > 0){
        -: 1681:	      gainCard(estate, state, 0, currentPlayer);
        -: 1682:	      state->supplyCount[estate]--;//Decrement estates
        -: 1683:	      if (supplyCount(estate, state) == 0){
        -: 1684:		isGameOver(state);
        -: 1685:	      }
        -: 1686:	    }
        -: 1687:	    card_not_discarded = 0;//Exit the loop
        -: 1688:	  }
        -: 1689:			    
        -: 1690:	  else{
        -: 1691:	    p++;//Next card
        -: 1692:	  }
        -: 1693:	}
        -: 1694:      }
        -: 1695:			    
        -: 1696:      else{
        -: 1697:	if (supplyCount(estate, state) > 0){
        -: 1698:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -: 1699:	  state->supplyCount[estate]--;//Decrement Estates
        -: 1700:	  if (supplyCount(estate, state) == 0){
        -: 1701:	    isGameOver(state);
        -: 1702:	  }
        -: 1703:	}
        -: 1704:      }
        -: 1705:	    
        -: 1706:      
        -: 1707:      return 0;
        -: 1708:  }*/
        -: 1709:
function playGreatHall called 0 returned 0% blocks executed 0%
        -: 1710:int playGreatHall(int currentPlayer, struct gameState *state, int handPos)
        -: 1711:{
        -: 1712:  //+1 Card
    #####: 1713:  drawCard(currentPlayer, state);
        -: 1714:		
        -: 1715:  //+1 Actions
    #####: 1716:  state->numActions++;
        -: 1717:		
        -: 1718:  //discard card from hand
    #####: 1719:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1720:  return 0;
        -: 1721:}
        -: 1722:
        -: 1723:/*int playMinion(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2)
        -: 1724:{
        -: 1725:  int i, j; 
        -: 1726: 
        -: 1727:  //+1 action
        -: 1728:  state->numActions++;
        -: 1729:		
        -: 1730:  //discard card from hand
        -: 1731:  discardCard(handPos, currentPlayer, state, 0);
        -: 1732:		
        -: 1733:  if (choice1)		//+2 coins
        -: 1734:{
        -: 1735:  state->coins = state->coins + 2;
        -: 1736:}
        -: 1737:		
        -: 1738:  else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1739:{
        -: 1740:  //discard hand
        -: 1741:  while(numHandCards(state) > 0)
        -: 1742:    {
        -: 1743:      discardCard(handPos, currentPlayer, state, 0);
        -: 1744:    }
        -: 1745:			
        -: 1746:  //draw 4
        -: 1747:  for (i = 0; i < 4; i++)
        -: 1748:    {
        -: 1749:      drawCard(currentPlayer, state);
        -: 1750:    }
        -: 1751:			
        -: 1752:  //other players discard hand and redraw if hand size > 4
        -: 1753:  for (i = 0; i < state->numPlayers; i++)
        -: 1754:    {
        -: 1755:      if (i != currentPlayer)
        -: 1756:	{
        -: 1757:	  if ( state->handCount[i] > 4 )
        -: 1758:	    {
        -: 1759:	      //discard hand
        -: 1760:	      while( state->handCount[i] > 0 )
        -: 1761:		{
        -: 1762:		  discardCard(handPos, i, state, 0);
        -: 1763:		}
        -: 1764:						
        -: 1765:	      //draw 4
        -: 1766:	      for (j = 0; j < 4; j++)
        -: 1767:		{
        -: 1768:		  drawCard(i, state);
        -: 1769:		}
        -: 1770:	    }
        -: 1771:	}
        -: 1772:    }
        -: 1773:			
        -: 1774:	}
        -: 1775:  return 0;
        -: 1776:}*/
        -: 1777:
        -: 1778:/*int playSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3)
        -: 1779:{
        -: 1780:	if (choice1 == 1)
        -: 1781:	{
        -: 1782:	  //+2 cards
        -: 1783:	  drawCard(currentPlayer, state);
        -: 1784:	  drawCard(currentPlayer, state);
        -: 1785:	}
        -: 1786:      else if (choice1 == 2)
        -: 1787:	{
        -: 1788:	  //+2 coins
        -: 1789:	  state->coins = state->coins + 2;
        -: 1790:	}
        -: 1791:      else
        -: 1792:	{
        -: 1793:	  //trash 2 cards in hand
        -: 1794:	  discardCard(choice2, currentPlayer, state, 1);
        -: 1795:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1796:	}
        -: 1797:			
        -: 1798:      //discard card from hand
        -: 1799:      discardCard(handPos, currentPlayer, state, 0);
        -: 1800:      return 0;
        -: 1801:}*/
        -: 1802:
        -: 1803:/*int playTribute(int currentPlayer, struct gameState *state, int nextPlayer)
        -: 1804:{  
        -: 1805:	int i; 
        -: 1806:	int tributeRevealedCards[2] = {-1, -1};
        -: 1807:
        -: 1808:	  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
        -: 1809:	if (state->deckCount[nextPlayer] > 0){
        -: 1810:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1811:	  state->deckCount[nextPlayer]--;
        -: 1812:	}
        -: 1813:	else if (state->discardCount[nextPlayer] > 0){
        -: 1814:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
        -: 1815:	  state->discardCount[nextPlayer]--;
        -: 1816:	}
        -: 1817:	else{
        -: 1818:	  //No Card to Reveal
        -: 1819:	  if (DEBUG){
        -: 1820:	    printf("No cards to reveal\n");
        -: 1821:	  }
        -: 1822:	}
        -: 1823:	  }
        -: 1824:	    
        -: 1825:	  else{
        -: 1826:	if (state->deckCount[nextPlayer] == 0){
        -: 1827:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
        -: 1828:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
        -: 1829:	    state->deckCount[nextPlayer]++;
        -: 1830:	    state->discard[nextPlayer][i] = -1;
        -: 1831:	    state->discardCount[nextPlayer]--;
        -: 1832:	  }
        -: 1833:			    
        -: 1834:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1835:	} 
        -: 1836:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1837:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1838:	state->deckCount[nextPlayer]--;
        -: 1839:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1840:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1841:	state->deckCount[nextPlayer]--;
        -: 1842:	  }    
        -: 1843:		       
        -: 1844:	  if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
        -: 1845:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        -: 1846:	state->playedCardCount++;
        -: 1847:	tributeRevealedCards[1] = -1;
        -: 1848:	  }
        -: 1849:
        -: 1850:	  for (i = 0; i <= 2; i ++){
        -: 1851:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
        -: 1852:	  state->coins += 2;
        -: 1853:	}
        -: 1854:		    
        -: 1855:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
        -: 1856:	  drawCard(currentPlayer, state);
        -: 1857:	  drawCard(currentPlayer, state);
        -: 1858:	}
        -: 1859:	else{//Action Card
        -: 1860:	  state->numActions = state->numActions + 2;
        -: 1861:	}
        -: 1862:	  }
        -: 1863:	    
        -: 1864:	  return 0;
        -: 1865:}*/
        -: 1866:
        -: 1867:/*int playAmbassador(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos)
        -: 1868:{ 
        -: 1869:	int i;
        -: 1870:    int j = 0;		//used to check if player has enough cards to discard
        -: 1871:
        -: 1872:      if (choice2 > 2 || choice2 < 0)
        -: 1873:	{
        -: 1874:	  return -1;				
        -: 1875:	}
        -: 1876:
        -: 1877:      if (choice1 == handPos)
        -: 1878:	{
        -: 1879:	  return -1;
        -: 1880:	}
        -: 1881:
        -: 1882:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1883:	{
        -: 1884:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1885:	    {
        -: 1886:	      j++;
        -: 1887:	    }
        -: 1888:	}
        -: 1889:      if (j < choice2)
        -: 1890:	{
        -: 1891:	  return -1;				
        -: 1892:	}
        -: 1893:
        -: 1894:      if (DEBUG) 
        -: 1895:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1896:
        -: 1897:      //increase supply count for choosen card by amount being discarded
        -: 1898:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1899:			
        -: 1900:      //each other player gains a copy of revealed card
        -: 1901:      for (i = 0; i < state->numPlayers; i++)
        -: 1902:	{
        -: 1903:	  if (i != currentPlayer)
        -: 1904:	    {
        -: 1905:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1906:	    }
        -: 1907:	}
        -: 1908:
        -: 1909:      //discard played card from hand
        -: 1910:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1911:
        -: 1912:      //trash copies of cards returned to supply
        -: 1913:      for (j = 0; j < choice2; j++)
        -: 1914:	{
        -: 1915:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1916:	    {
        -: 1917:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1918:		{
        -: 1919:		  discardCard(i, currentPlayer, state, 1);
        -: 1920:		  break;
        -: 1921:		}
        -: 1922:	    }
        -: 1923:	}			
        -: 1924:
        -: 1925:      return 0;
        -: 1926:}*/
        -: 1927:
        -: 1928:/*int playCutpurse(int currentPlayer, struct gameState *state, int handPos)
        -: 1929:{	
        -: 1930:	int i, j, k;
        -: 1931:	  updateCoins(currentPlayer, state, 2);
        -: 1932:	  for (i = 0; i < state->numPlayers; i++)
        -: 1933:	{
        -: 1934:	  if (i != currentPlayer)
        -: 1935:	    {
        -: 1936:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1937:		{
        -: 1938:		  if (state->hand[i][j] == copper)
        -: 1939:		    {
        -: 1940:		      discardCard(j, i, state, 0);
        -: 1941:		      break;
        -: 1942:		    }
        -: 1943:		  if (j == state->handCount[i])
        -: 1944:		    {
        -: 1945:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1946:			{
        -: 1947:			  if (DEBUG)
        -: 1948:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1949:			}	
        -: 1950:		      break;
        -: 1951:		    }		
        -: 1952:		}
        -: 1953:					
        -: 1954:	    }
        -: 1955:				
        -: 1956:	}				
        -: 1957:
        -: 1958:  //discard played card from hand
        -: 1959:  discardCard(handPos, currentPlayer, state, 0);			
        -: 1960:
        -: 1961:  return 0;
        -: 1962:}*/
        -: 1963:
        -: 1964: /*int playEmbargo(int currentPlayer, struct gameState *state, int handPos, int choice1)
        -: 1965:{ 
        -: 1966: 	//+2 Coins
        -: 1967:     state->coins = state->coins + 2;
        -: 1968:			
        -: 1969:      //see if selected pile is in play
        -: 1970:      if ( state->supplyCount[choice1] == -1 )
        -: 1971:	{
        -: 1972:	  return -1;
        -: 1973:	}
        -: 1974:			
        -: 1975:      //add embargo token to selected supply pile
        -: 1976:      state->embargoTokens[choice1]++;
        -: 1977:			
        -: 1978:      //trash card
        -: 1979:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1980:      return 0;
        -: 1981: }*/
        -: 1982:
        -: 1983:/*int playOutpost(int currentPlayer, struct gameState *state, int handPos)
        -: 1984:{
        -: 1985: //set outpost flag
        -: 1986:  state->outpostPlayed++;
        -: 1987:		
        -: 1988:  //discard card
        -: 1989:  discardCard(handPos, currentPlayer, state, 0);
        -: 1990:  return 0;
        -: 1991:}*/
        -: 1992:
        -: 1993:/*int playSalvager(int currentPlayer, struct gameState *state, int handPos, int choice1)
        -: 1994:{
        -: 1995:	//+1 buy
        -: 1996:	  state->numBuys++;
        -: 1997:			
        -: 1998:	  if (choice1)
        -: 1999:	{
        -: 2000:	  //gain coins equal to trashed card
        -: 2001:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 2002:	  //trash card
        -: 2003:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 2004:	}
        -: 2005:			
        -: 2006:	  //discard card
        -: 2007:	  discardCard(handPos, currentPlayer, state, 0);
        -: 2008:	  return 0;
        -: 2009:}*/
        -: 2010:
function playSeaHag called 0 returned 0% blocks executed 0%
        -: 2011:int playSeaHag(int currentPlayer, struct gameState *state)
        -: 2012:{
        -: 2013:  	int i;
    #####: 2014:  	 for (i = 0; i < state->numPlayers+1; i++){ //INCORRECT - SHOULD BE i < state->numPlayers. THIS IS A BUG
branch  0 never executed
branch  1 never executed
    #####: 2015:		if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 2016:		  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
    #####: 2017:		  state->deckCount[i]--;
    #####: 2018:		  state->discardCount[i]++;
    #####: 2019:		  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 2020:		}
    #####: 2021:	  }
    #####: 2022:	return 0;
        -: 2023:}
        -: 2024:
        -: 2025:/*int playTreasureMap(int currentPlayer, struct gameState *state, int handPos)
        -: 2026:{
        -: 2027:	int i, index;
        -: 2028:      //search hand for another treasure_map
        -: 2029:      index = -1;
        -: 2030:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 2031:	{
        -: 2032:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 2033:	    {
        -: 2034:	      index = i;
        -: 2035:	      break;
        -: 2036:	    }
        -: 2037:	}
        -: 2038:      if (index > -1)
        -: 2039:	{
        -: 2040:	  //trash both treasure cards
        -: 2041:	  discardCard(handPos, currentPlayer, state, 1);
        -: 2042:	  discardCard(index, currentPlayer, state, 1);
        -: 2043:
        -: 2044:	  //gain 4 Gold cards
        -: 2045:	  for (i = 0; i < 4; i++)
        -: 2046:	    {
        -: 2047:	      gainCard(gold, state, 1, currentPlayer);
        -: 2048:	    }
        -: 2049:				
        -: 2050:	  //return success
        -: 2051:	  return 1;
        -: 2052:	}
        -: 2053:			
        -: 2054:      //no second treasure_map found in hand
        -: 2055:      return -1;
        -: 2056:}*/
        -: 2057:
        -: 2058://end of dominion.c
        -: 2059:
cardtest1.c
TESTING outpost card
TEST 1: check outpostPlayed flag
TEST 1 SUCCESS
TEST 2: outpost card discarded
TEST 2 handPos[0]: SUCCESS
TEST 2 handPos[1]: SUCCESS
TEST 2 handPos[2]: SUCCESS
TEST 2 handPos[3]: SUCCESS
TEST 2 handPos[4]: SUCCESS
outpost card: PASS
Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:85.90% of 78
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
No calls

Function 'shuffle'
Lines executed:94.44% of 18
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:33.33% of 24
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:3.52% of 256
Branches executed:12.71% of 181
Taken at least once:1.10% of 181
No calls

Function 'discardCard'
Lines executed:86.67% of 15
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'gainCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'playAdventurer'
Lines executed:0.00% of 18
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'playSmithy'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'playVillage'
Lines executed:0.00% of 4
No branches
No calls

Function 'playGreatHall'
Lines executed:0.00% of 4
No branches
No calls

Function 'playSeaHag'
Lines executed:0.00% of 9
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls

File 'dominion.c'
Lines executed:20.12% of 646
Branches executed:22.78% of 417
Taken at least once:14.39% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:// set NOISY_TEST to 0 to remove printfs from output
        -:    9:#define NOISY_TEST 1
        -:   10:
        -:   11:
function compare called 28 returned 100% blocks executed 85%
        -:   12:int compare(const void* a, const void* b) {
       28:   13:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   14:    return 1;
       28:   15:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
       10:   16:    return -1;
       18:   17:  return 0;
       28:   18:}
        -:   19:
function newGame called 0 returned 0% blocks executed 0%
        -:   20:struct gameState* newGame() {
    #####:   21:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   22:  return g;
        -:   23:}
        -:   24:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   25:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   26:		  int k8, int k9, int k10) {
    #####:   27:  int* k = malloc(10 * sizeof(int));
    #####:   28:  k[0] = k1;
    #####:   29:  k[1] = k2;
    #####:   30:  k[2] = k3;
    #####:   31:  k[3] = k4;
    #####:   32:  k[4] = k5;
    #####:   33:  k[5] = k6;
    #####:   34:  k[6] = k7;
    #####:   35:  k[7] = k8;
    #####:   36:  k[8] = k9;
    #####:   37:  k[9] = k10;
    #####:   38:  return k;
        -:   39:}
        -:   40:
function initializeGame called 1 returned 100% blocks executed 87%
        -:   41:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   42:		   struct gameState *state) {
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;			
        -:   47:  //set up random number generator
        1:   48:  SelectStream(1);
        1:   49:  PutSeed((long)randomSeed);
        -:   50:  
        -:   51:  //check number of players
        2:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   53:    {
    #####:   54:      return -1;
        -:   55:    }
        -:   56:
        -:   57:  //set number of players
        1:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
       22:   61:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   62:    {
      220:   63:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   64:        {
      190:   65:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   66:	    {
    #####:   67:	      return -1;
        -:   68:	    }
      100:   69:        }
       10:   70:    }
        -:   71:
        -:   72:
        -:   73:  //initialize supply
        -:   74:  ///////////////////////////////
        -:   75:
        -:   76:  //set number of Curse cards
        1:   77:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 10;
        1:   80:    }
    #####:   81:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 20;
    #####:   84:    }
        -:   85:  else
        -:   86:    {
    #####:   87:      state->supplyCount[curse] = 30;
        -:   88:    }
        -:   89:
        -:   90:  //set number of Victory cards
        1:   91:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   92:    {
        1:   93:      state->supplyCount[estate] = 8;
        1:   94:      state->supplyCount[duchy] = 8;
        1:   95:      state->supplyCount[province] = 8;
        1:   96:    }
        -:   97:  else
        -:   98:    {
    #####:   99:      state->supplyCount[estate] = 12;
    #####:  100:      state->supplyCount[duchy] = 12;
    #####:  101:      state->supplyCount[province] = 12;
        -:  102:    }
        -:  103:
        -:  104:  //set number of Treasure cards
        1:  105:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  106:  state->supplyCount[silver] = 40;
        1:  107:  state->supplyCount[gold] = 30;
        -:  108:
        -:  109:  //set number of Kingdom cards
       42:  110:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  111:    {
      330:  112:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  113:    	{
      155:  114:    	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  115:    	    {
        -:  116:    	      //check if card is a 'Victory' Kingdom card
       19:  117:    	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens){
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        2:  118:          		  if (numPlayers == 2){ 
branch  0 taken 100%
branch  1 taken 0%
        2:  119:          		    state->supplyCount[i] = 8; 
        2:  120:          		  }
    #####:  121:          		  else{ state->supplyCount[i] = 12; }
        2:  122:    		      }
        -:  123:    	      
        -:  124:            else{
        8:  125:        		  state->supplyCount[i] = 10;
        -:  126:        		}
       10:  127:    	      break;
        -:  128:  	       }
        -:  129:    	  else    //card is not in the set choosen for the game
        -:  130:    	    {
      145:  131:    	      state->supplyCount[i] = -1;
        -:  132:    	    }
      145:  133:  	}
        -:  134:
       20:  135:    }
        -:  136:
        -:  137:  ////////////////////////
        -:  138:  //supply intilization complete
        -:  139:
        -:  140:  //set player decks
        6:  141:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  142:    {
        2:  143:      state->deckCount[i] = 0;
       16:  144:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  145:	{
        6:  146:	  state->deck[i][j] = estate;
        6:  147:	  state->deckCount[i]++;
        6:  148:	}
       32:  149:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  150:	{
       14:  151:	  state->deck[i][j] = copper;
       14:  152:	  state->deckCount[i]++;		
       14:  153:	}
        2:  154:    }
        -:  155:
        -:  156:  //shuffle player decks
        6:  157:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  158:    {
        2:  159:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  160:	{
    #####:  161:	  return -1;
        -:  162:	}
        2:  163:    }
        -:  164:
        -:  165:  //draw player hands
        6:  166:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  167:    {  
        -:  168:      //initialize hand size to zero
        2:  169:      state->handCount[i] = 0;
        2:  170:      state->discardCount[i] = 0;
        -:  171:      //draw 5 cards
        -:  172:      // for (j = 0; j < 5; j++)
        -:  173:      //	{
        -:  174:      //	  drawCard(i, state);
        -:  175:      //	}
        2:  176:    }
        -:  177:  
        -:  178:  //set embargo tokens to 0 for all supply piles
       56:  179:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  180:    {
       27:  181:      state->embargoTokens[i] = 0;
       27:  182:    }
        -:  183:
        -:  184:  //initialize first player's turn
        1:  185:  state->outpostPlayed = 0;
        1:  186:  state->phase = 0;
        1:  187:  state->numActions = 1;
        1:  188:  state->numBuys = 1;
        1:  189:  state->playedCardCount = 0;
        1:  190:  state->whoseTurn = 0;
        1:  191:  state->handCount[state->whoseTurn] = 0;
        -:  192:  //int it; move to top
        -:  193:
        -:  194:  //Moved draw cards to here, only drawing at the start of a turn
       12:  195:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
        5:  196:    drawCard(state->whoseTurn, state);
        5:  197:  }
        -:  198:
        1:  199:  updateCoins(state->whoseTurn, state, 0);
        -:  200:
        1:  201:  return 0;
        1:  202:}
        -:  203:
function shuffle called 2 returned 100% blocks executed 93%
        -:  204:int shuffle(int player, struct gameState *state) {
        -:  205: 
        -:  206:
        -:  207:  int newDeck[MAX_DECK];
        2:  208:  int newDeckPos = 0;
        -:  209:  int card;
        -:  210:  int i;
        -:  211:
        2:  212:  if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  213:    return -1;
        2:  214:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  215:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  216:
       44:  217:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
       20:  218:    card = floor(Random() * state->deckCount[player]);
       20:  219:    newDeck[newDeckPos] = state->deck[player][card];
       20:  220:    newDeckPos++;
      140:  221:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
       50:  222:      state->deck[player][i] = state->deck[player][i+1];
       50:  223:    }
       20:  224:    state->deckCount[player]--;
        -:  225:  }
       44:  226:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
       20:  227:    state->deck[player][i] = newDeck[i];
       20:  228:    state->deckCount[player]++;
       20:  229:  }
        -:  230:
        2:  231:  return 0;
        2:  232:}
        -:  233:
function playCard called 0 returned 0% blocks executed 0%
        -:  234:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  235:{	
        -:  236:  int card;
    #####:  237:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  238:
        -:  239:  //check if it is the right phase
    #####:  240:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  241:    {
    #####:  242:      return -1;
        -:  243:    }
        -:  244:	
        -:  245:  //check if player has enough actions
    #####:  246:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  247:    {
    #####:  248:      return -1;
        -:  249:    }
        -:  250:	
        -:  251:  //get card played
    #####:  252:  card = handCard(handPos, state);
        -:  253:	
        -:  254:  //check if selected card is an action
    #####:  255:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  256:    {
    #####:  257:      return -1;
        -:  258:    }
        -:  259:	
        -:  260:  //play card
    #####:  261:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  262:    {
    #####:  263:      return -1;
        -:  264:    }
        -:  265:	
        -:  266:  //reduce number of actions
    #####:  267:  state->numActions--;
        -:  268:
        -:  269:  //update coins (Treasure cards may be added with card draws)
    #####:  270:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  271:	
    #####:  272:  return 0;
    #####:  273:}
        -:  274:
function buyCard called 0 returned 0% blocks executed 0%
        -:  275:int buyCard(int supplyPos, struct gameState *state) {
        -:  276:  int who;
        -:  277:  if (DEBUG){
        -:  278:    printf("Entering buyCard...\n");
        -:  279:  }
        -:  280:
        -:  281:  // I don't know what to do about the phase thing.
        -:  282:
    #####:  283:  who = state->whoseTurn;
        -:  284:
    #####:  285:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  286:    if (DEBUG)
        -:  287:      printf("You do not have any buys left\n");
    #####:  288:    return -1;
    #####:  289:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  290:    if (DEBUG)
        -:  291:      printf("There are not any of that type of card left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  294:    if (DEBUG) 
        -:  295:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  296:    return -1;
        -:  297:  } else {
    #####:  298:    state->phase=1;
        -:  299:    //state->supplyCount[supplyPos]--;
    #####:  300:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  301:  
    #####:  302:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  303:    state->numBuys--;
        -:  304:    if (DEBUG)
        -:  305:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  306:  }
        -:  307:
        -:  308:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  309:  //state->discardCount[who]++;
        -:  310:    
    #####:  311:  return 0;
    #####:  312:}
        -:  313:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  314:int numHandCards(struct gameState *state) {
    #####:  315:  return state->handCount[ whoseTurn(state) ];
        -:  316:}
        -:  317:
function handCard called 0 returned 0% blocks executed 0%
        -:  318:int handCard(int handPos, struct gameState *state) {
    #####:  319:  int currentPlayer = whoseTurn(state);
    #####:  320:  return state->hand[currentPlayer][handPos];
        -:  321:}
        -:  322:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  323:int supplyCount(int card, struct gameState *state) {
    #####:  324:  return state->supplyCount[card];
        -:  325:}
        -:  326:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  327:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  328:  int i;
    #####:  329:  int count = 0;
        -:  330:
    #####:  331:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  332:    {
    #####:  333:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  334:    }
        -:  335:
    #####:  336:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  337:    {
    #####:  338:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  339:    }
        -:  340:
    #####:  341:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  342:    {
    #####:  343:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  344:    }
        -:  345:
    #####:  346:  return count;
        -:  347:}
        -:  348:
function whoseTurn called 6 returned 100% blocks executed 100%
        -:  349:int whoseTurn(struct gameState *state) {
        6:  350:  return state->whoseTurn;
        -:  351:}
        -:  352:
function endTurn called 0 returned 0% blocks executed 0%
        -:  353:int endTurn(struct gameState *state) {
        -:  354:  int k;
        -:  355:  int i;
    #####:  356:  int currentPlayer = whoseTurn(state);
        -:  357:  
        -:  358:  //Discard hand
    #####:  359:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  360:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  361:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  362:  }
    #####:  363:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  364:    
        -:  365:  //Code for determining the player
    #####:  366:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  367:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  368:  }
        -:  369:  else{
    #####:  370:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  371:  }
        -:  372:
    #####:  373:  state->outpostPlayed = 0;
    #####:  374:  state->phase = 0;
    #####:  375:  state->numActions = 1;
    #####:  376:  state->coins = 0;
    #####:  377:  state->numBuys = 1;
    #####:  378:  state->playedCardCount = 0;
    #####:  379:  state->handCount[state->whoseTurn] = 0;
        -:  380:
        -:  381:  //int k; move to top
        -:  382:  //Next player draws hand
    #####:  383:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  384:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  385:  }
        -:  386:
        -:  387:  //Update money
    #####:  388:  updateCoins(state->whoseTurn, state , 0);
        -:  389:
    #####:  390:  return 0;
        -:  391:}
        -:  392:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  393:int isGameOver(struct gameState *state) {
        -:  394:  int i;
        -:  395:  int j;
        -:  396:	
        -:  397:  //if stack of Province cards is empty, the game ends
    #####:  398:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  399:    {
    #####:  400:      return 1;
        -:  401:    }
        -:  402:
        -:  403:  //if three supply piles are at 0, the game ends
    #####:  404:  j = 0;
    #####:  405:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  406:    {
    #####:  407:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  408:	{
    #####:  409:	  j++;
    #####:  410:	}
    #####:  411:    }
    #####:  412:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  413:    {
    #####:  414:      return 1;
        -:  415:    }
        -:  416:
    #####:  417:  return 0;
    #####:  418:}
        -:  419:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  420:int scoreFor (int player, struct gameState *state) {
        -:  421:
        -:  422:  int i;
    #####:  423:  int score = 0;
        -:  424:  //score from hand
    #####:  425:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  426:    {
    #####:  427:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  433:    }
        -:  434:
        -:  435:  //score from discard
    #####:  436:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  437:    {
    #####:  438:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  444:    }
        -:  445:
        -:  446:  //score from deck
    #####:  447:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  448:    {
    #####:  449:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  455:    }
        -:  456:
    #####:  457:  return score;
        -:  458:}
        -:  459:
function getWinners called 0 returned 0% blocks executed 0%
        -:  460:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  461:  int i;	
        -:  462:  int j;
        -:  463:  int highScore;
        -:  464:  int currentPlayer;
        -:  465:
        -:  466:  //get score for each player
    #####:  467:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  468:    {
        -:  469:      //set unused player scores to -9999
    #####:  470:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  471:	{
    #####:  472:	  players[i] = -9999;
    #####:  473:	}
        -:  474:      else
        -:  475:	{
    #####:  476:	  players[i] = scoreFor (i, state);
        -:  477:	}
    #####:  478:    }
        -:  479:
        -:  480:  //find highest score
    #####:  481:  j = 0;
    #####:  482:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  483:    {
    #####:  484:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  485:	{
    #####:  486:	  j = i;
    #####:  487:	}
    #####:  488:    }
    #####:  489:  highScore = players[j];
        -:  490:
        -:  491:  //add 1 to players who had less turns
    #####:  492:  currentPlayer = whoseTurn(state);
    #####:  493:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  494:    {
    #####:  495:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  496:	{
    #####:  497:	  players[i]++;
    #####:  498:	}
    #####:  499:    }
        -:  500:
        -:  501:  //find new highest score
    #####:  502:  j = 0;
    #####:  503:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  504:    {
    #####:  505:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  506:	{
    #####:  507:	  j = i;
    #####:  508:	}
    #####:  509:    }
    #####:  510:  highScore = players[j];
        -:  511:
        -:  512:  //set winners in array to 1 and rest to 0
    #####:  513:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  514:    {
    #####:  515:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  516:	{
    #####:  517:	  players[i] = 1;
    #####:  518:	}
        -:  519:      else
        -:  520:	{
    #####:  521:	  players[i] = 0;
        -:  522:	}
    #####:  523:    }
        -:  524:
    #####:  525:  return 0;
        -:  526:}
        -:  527:
function drawCard called 5 returned 100% blocks executed 41%
        -:  528:int drawCard(int player, struct gameState *state)
        -:  529:{	
        -:  530:  int count;
        -:  531:  int deckCounter;
        5:  532:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0%
branch  1 taken 100%
        -:  533:    
        -:  534:    //Step 1 Shuffle the discard pile back into a deck
        -:  535:    int i;
        -:  536:    //Move discard to deck
    #####:  537:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  538:      state->deck[player][i] = state->discard[player][i];
    #####:  539:      state->discard[player][i] = -1;
    #####:  540:    }
        -:  541:
    #####:  542:    state->deckCount[player] = state->discardCount[player];
    #####:  543:    state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:    //Shufffle the deck
    #####:  546:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  547:   
        -:  548:    if (DEBUG){//Debug statements
        -:  549:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:    }
        -:  551:    
    #####:  552:    state->discardCount[player] = 0;
        -:  553:
        -:  554:    //Step 2 Draw Card
    #####:  555:    count = state->handCount[player];//Get current player's hand count
        -:  556:    
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Current hand count: %d\n", count);
        -:  559:    }
        -:  560:    
    #####:  561:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
    #####:  563:    if (deckCounter == 0){
branch  0 never executed
branch  1 never executed
    #####:  564:      return -1;
        -:  565:    }
        -:  566:
    #####:  567:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  568:    state->deckCount[player]--;
    #####:  569:    state->handCount[player]++;//Increment hand count
    #####:  570:  }
        -:  571:
        -:  572:  else{
        5:  573:    int count = state->handCount[player];//Get current hand count for player
        -:  574:    int deckCounter;
        -:  575:    if (DEBUG){//Debug statements
        -:  576:      printf("Current hand count: %d\n", count);
        -:  577:    }
        -:  578:
        5:  579:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  581:    state->deckCount[player]--;
        5:  582:    state->handCount[player]++;//Increment hand count
        -:  583:  }
        -:  584:
        5:  585:  return 0;
        5:  586:}
        -:  587:
function getCost called 0 returned 0% blocks executed 0%
        -:  588:int getCost(int cardNumber)
        -:  589:{
    #####:  590:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  591:    {
        -:  592:    case curse:
    #####:  593:      return 0;
        -:  594:    case estate:
    #####:  595:      return 2;
        -:  596:    case duchy:
    #####:  597:      return 5;
        -:  598:    case province:
    #####:  599:      return 8;
        -:  600:    case copper:
    #####:  601:      return 0;
        -:  602:    case silver:
    #####:  603:      return 3;
        -:  604:    case gold:
    #####:  605:      return 6;
        -:  606:    case adventurer:
    #####:  607:      return 6;
        -:  608:    case council_room:
    #####:  609:      return 5;
        -:  610:    case feast:
    #####:  611:      return 4;
        -:  612:    case gardens:
    #####:  613:      return 4;
        -:  614:    case mine:
    #####:  615:      return 5;
        -:  616:    case remodel:
    #####:  617:      return 4;
        -:  618:    case smithy:
    #####:  619:      return 4;
        -:  620:    case village:
    #####:  621:      return 3;
        -:  622:    case baron:
    #####:  623:      return 4;
        -:  624:    case great_hall:
    #####:  625:      return 3;
        -:  626:    case minion:
    #####:  627:      return 5;
        -:  628:    case steward:
    #####:  629:      return 3;
        -:  630:    case tribute:
    #####:  631:      return 5;
        -:  632:    case ambassador:
    #####:  633:      return 3;
        -:  634:    case cutpurse:
    #####:  635:      return 4;
        -:  636:    case embargo: 
    #####:  637:      return 2;
        -:  638:    case outpost:
    #####:  639:      return 5;
        -:  640:    case salvager:
    #####:  641:      return 4;
        -:  642:    case sea_hag:
    #####:  643:      return 4;
        -:  644:    case treasure_map:
    #####:  645:      return 4;
        -:  646:    }
        -:  647:	
    #####:  648:  return -1;
    #####:  649:}
        -:  650:
function cardEffect called 6 returned 100% blocks executed 2%
        -:  651:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  652:{
        -:  653:  int i;
        -:  654:  int j;
        -:  655:  int k;
        -:  656:  int x;
        -:  657:  int index;
        6:  658:  int currentPlayer = whoseTurn(state);
        6:  659:  int nextPlayer = currentPlayer + 1;
        -:  660:
        6:  661:  int tributeRevealedCards[2] = {-1, -1};
        -:  662:  int temphand[MAX_HAND];// moved above the if statement
        6:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0%
branch  1 taken 100%
    #####:  664:    nextPlayer = 0;
    #####:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
        6:  669:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 100%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:      return playAdventurer(state, currentPlayer);
        -:  673:
        -:  674:      /*while(drawntreasure<2){
        -:  675:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  676:	  shuffle(currentPlayer, state);
        -:  677:	}
        -:  678:	drawCard(currentPlayer, state);
        -:  679:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  680:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  681:	  drawntreasure++;
        -:  682:	else{
        -:  683:	  temphand[z]=cardDrawn;
        -:  684:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  685:	  z++;
        -:  686:	}
        -:  687:      }
        -:  688:      while(z-1>=0){
        -:  689:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  690:	z=z-1;
        -:  691:      }
        -:  692:      return 0;*/
        -:  693:			
        -:  694:    case council_room:
        -:  695:      //+4 Cards
    #####:  696:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  697:	{
    #####:  698:	  drawCard(currentPlayer, state);
    #####:  699:	}
        -:  700:			
        -:  701:      //+1 Buy
    #####:  702:      state->numBuys++;
        -:  703:			
        -:  704:      //Each other player draws a card
    #####:  705:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  706:	{
    #####:  707:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  708:	    {
    #####:  709:	      drawCard(i, state);
    #####:  710:	    }
    #####:  711:	}
        -:  712:			
        -:  713:      //put played card in played card pile
    #####:  714:      discardCard(handPos, currentPlayer, state, 0);
        -:  715:			
    #####:  716:      return 0;
        -:  717:			
        -:  718:    case feast:
        -:  719:      //gain card with cost up to 5
        -:  720:      //Backup hand
    #####:  721:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  722:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  723:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  724:      }
        -:  725:      //Backup hand
        -:  726:
        -:  727:      //Update Coins for Buy
    #####:  728:      updateCoins(currentPlayer, state, 5);
    #####:  729:      x = 1;//Condition to loop on
    #####:  730:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  731:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  732:	  if (DEBUG)
        -:  733:	    printf("None of that card left, sorry!\n");
        -:  734:
        -:  735:	  if (DEBUG){
        -:  736:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  737:	  }
    #####:  738:	}
    #####:  739:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  740:	  printf("That card is too expensive!\n");
        -:  741:
        -:  742:	  if (DEBUG){
        -:  743:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  744:	  }
    #####:  745:	}
        -:  746:	else{
        -:  747:
        -:  748:	  if (DEBUG){
        -:  749:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  750:	  }
        -:  751:
    #####:  752:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  753:	  x = 0;//No more buying cards
        -:  754:
        -:  755:	  if (DEBUG){
        -:  756:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  757:	  }
        -:  758:
        -:  759:	}
        -:  760:      }     
        -:  761:
        -:  762:      //Reset Hand
    #####:  763:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  764:	state->hand[currentPlayer][i] = temphand[i];
    #####:  765:	temphand[i] = -1;
    #####:  766:      }
        -:  767:      //Reset Hand
        -:  768:      			
    #####:  769:      return 0;
        -:  770:			
        -:  771:    case gardens:
    #####:  772:      return -1;
        -:  773:			
        -:  774:    case mine:
    #####:  775:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  776:
    #####:  777:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  778:	{
    #####:  779:	  return -1;
        -:  780:	}
        -:  781:		
    #####:  782:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:
    #####:  787:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      gainCard(choice2, state, 2, currentPlayer);
        -:  793:
        -:  794:      //discard card from hand
    #####:  795:      discardCard(handPos, currentPlayer, state, 0);
        -:  796:
        -:  797:      //discard trashed card
    #####:  798:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  799:	{
    #####:  800:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  801:	    {
    #####:  802:	      discardCard(i, currentPlayer, state, 0);			
    #####:  803:	      break;
        -:  804:	    }
    #####:  805:	}
        -:  806:			
    #####:  807:      return 0;
        -:  808:			
        -:  809:    case remodel:
    #####:  810:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  811:
    #####:  812:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  813:	{
    #####:  814:	  return -1;
        -:  815:	}
        -:  816:
    #####:  817:      gainCard(choice2, state, 0, currentPlayer);
        -:  818:
        -:  819:      //discard card from hand
    #####:  820:      discardCard(handPos, currentPlayer, state, 0);
        -:  821:
        -:  822:      //discard trashed card
    #####:  823:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  824:	{
    #####:  825:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  826:	    {
    #####:  827:	      discardCard(i, currentPlayer, state, 0);			
    #####:  828:	      break;
        -:  829:	    }
    #####:  830:	}
        -:  831:
        -:  832:
    #####:  833:      return 0;
        -:  834:		
        -:  835:    case smithy:
    #####:  836:      return playSmithy(currentPlayer, state, handPos);
        -:  837:      /*//+3 Cards
        -:  838:      for (i = 0; i < 3; i++)
        -:  839:	{
        -:  840:	  drawCard(currentPlayer, state);
        -:  841:	}
        -:  842:			
        -:  843:      //discard card from hand
        -:  844:      discardCard(handPos, currentPlayer, state, 0);
        -:  845:      return 0;*/
        -:  846:		
        -:  847:    case village:
    #####:  848:      return playVillage(currentPlayer, state, handPos);
        -:  849:      /*//+1 Card
        -:  850:      drawCard(currentPlayer, state);
        -:  851:			
        -:  852:      //+2 Actions
        -:  853:      state->numActions = state->numActions + 2;
        -:  854:			
        -:  855:      //discard played card from hand
        -:  856:      discardCard(handPos, currentPlayer, state, 0);
        -:  857:      return 0;*/
        -:  858:		
        -:  859:    case baron:
    #####:  860:      state->numBuys++;//Increase buys by 1!
    #####:  861:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  862:	int p = 0;//Iterator for hand!
    #####:  863:	int card_not_discarded = 1;//Flag for discard set!
    #####:  864:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  865:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  866:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  867:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  868:	    state->discardCount[currentPlayer]++;
    #####:  869:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  870:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  871:	    }
    #####:  872:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  873:	    state->handCount[currentPlayer]--;
    #####:  874:	    card_not_discarded = 0;//Exit the loop
    #####:  875:	  }
    #####:  876:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  877:	    if(DEBUG) {
        -:  878:	      printf("No estate cards in your hand, invalid choice\n");
        -:  879:	      printf("Must gain an estate if there are any\n");
        -:  880:	    }
    #####:  881:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  882:	      gainCard(estate, state, 0, currentPlayer);
    #####:  883:	      state->supplyCount[estate]--;//Decrement estates
    #####:  884:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  885:		isGameOver(state);
    #####:  886:	      }
    #####:  887:	    }
    #####:  888:	    card_not_discarded = 0;//Exit the loop
    #####:  889:	  }
        -:  890:			    
        -:  891:	  else{
    #####:  892:	    p++;//Next card
        -:  893:	  }
        -:  894:	}
    #####:  895:      }
        -:  896:			    
        -:  897:      else{
    #####:  898:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  899:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  900:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  901:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  902:	    isGameOver(state);
    #####:  903:	  }
    #####:  904:	}
        -:  905:      }
        -:  906:	    
        -:  907:      
    #####:  908:      return 0;
        -:  909:		
        -:  910:    case great_hall:
    #####:  911:      return playGreatHall(currentPlayer, state, handPos);
        -:  912:      /*//+1 Card
        -:  913:      drawCard(currentPlayer, state);
        -:  914:			
        -:  915:      //+1 Actions
        -:  916:      state->numActions++;
        -:  917:			
        -:  918:      //discard card from hand
        -:  919:      discardCard(handPos, currentPlayer, state, 0);
        -:  920:      return 0;*/
        -:  921:		
        -:  922:    case minion:
        -:  923:      //+1 action
    #####:  924:      state->numActions++;
        -:  925:			
        -:  926:      //discard card from hand
    #####:  927:      discardCard(handPos, currentPlayer, state, 0);
        -:  928:			
    #####:  929:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  930:	{
    #####:  931:	  state->coins = state->coins + 2;
    #####:  932:	}
        -:  933:			
    #####:  934:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  935:	{
        -:  936:	  //discard hand
    #####:  937:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  938:	    {
    #####:  939:	      discardCard(handPos, currentPlayer, state, 0);
        -:  940:	    }
        -:  941:				
        -:  942:	  //draw 4
    #####:  943:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  944:	    {
    #####:  945:	      drawCard(currentPlayer, state);
    #####:  946:	    }
        -:  947:				
        -:  948:	  //other players discard hand and redraw if hand size > 4
    #####:  949:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  950:	    {
    #####:  951:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  952:		{
    #####:  953:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  954:		    {
        -:  955:		      //discard hand
    #####:  956:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  957:			{
    #####:  958:			  discardCard(handPos, i, state, 0);
        -:  959:			}
        -:  960:							
        -:  961:		      //draw 4
    #####:  962:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  963:			{
    #####:  964:			  drawCard(i, state);
    #####:  965:			}
    #####:  966:		    }
    #####:  967:		}
    #####:  968:	    }
        -:  969:				
    #####:  970:	}
    #####:  971:      return 0;
        -:  972:		
        -:  973:    case steward:
    #####:  974:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  975:	{
        -:  976:	  //+2 cards
    #####:  977:	  drawCard(currentPlayer, state);
    #####:  978:	  drawCard(currentPlayer, state);
    #####:  979:	}
    #####:  980:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  981:	{
        -:  982:	  //+2 coins
    #####:  983:	  state->coins = state->coins + 2;
    #####:  984:	}
        -:  985:      else
        -:  986:	{
        -:  987:	  //trash 2 cards in hand
    #####:  988:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  989:	  discardCard(choice3, currentPlayer, state, 1);
        -:  990:	}
        -:  991:			
        -:  992:      //discard card from hand
    #####:  993:      discardCard(handPos, currentPlayer, state, 0);
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case tribute:
    #####:  997:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  998:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  999:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1000:	  state->deckCount[nextPlayer]--;
    #####: 1001:	}
    #####: 1002:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1003:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1004:	  state->discardCount[nextPlayer]--;
    #####: 1005:	}
        -: 1006:	else{
        -: 1007:	  //No Card to Reveal
        -: 1008:	  if (DEBUG){
        -: 1009:	    printf("No cards to reveal\n");
        -: 1010:	  }
        -: 1011:	}
    #####: 1012:      }
        -: 1013:	    
        -: 1014:      else{
    #####: 1015:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1016:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1017:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1018:	    state->deckCount[nextPlayer]++;
    #####: 1019:	    state->discard[nextPlayer][i] = -1;
    #####: 1020:	    state->discardCount[nextPlayer]--;
    #####: 1021:	  }
        -: 1022:			    
    #####: 1023:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1024:	} 
    #####: 1025:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1026:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1027:	state->deckCount[nextPlayer]--;
    #####: 1028:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1029:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1030:	state->deckCount[nextPlayer]--;
        -: 1031:      }    
        -: 1032:		       
    #####: 1033:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1034:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1035:	state->playedCardCount++;
    #####: 1036:	tributeRevealedCards[1] = -1;
    #####: 1037:      }
        -: 1038:
    #####: 1039:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1040:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1041:	  state->coins += 2;
    #####: 1042:	}
        -: 1043:		    
    #####: 1044:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1045:	  drawCard(currentPlayer, state);
    #####: 1046:	  drawCard(currentPlayer, state);
    #####: 1047:	}
        -: 1048:	else{//Action Card
    #####: 1049:	  state->numActions = state->numActions + 2;
        -: 1050:	}
    #####: 1051:      }
        -: 1052:	    
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case ambassador:
    #####: 1056:      j = 0;		//used to check if player has enough cards to discard
        -: 1057:
    #####: 1058:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1059:	{
    #####: 1060:	  return -1;				
        -: 1061:	}
        -: 1062:
    #####: 1063:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1064:	{
    #####: 1065:	  return -1;
        -: 1066:	}
        -: 1067:
    #####: 1068:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
    #####: 1070:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1071:	    {
    #####: 1072:	      j++;
    #####: 1073:	    }
    #####: 1074:	}
    #####: 1075:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1076:	{
    #####: 1077:	  return -1;				
        -: 1078:	}
        -: 1079:
        -: 1080:      if (DEBUG) 
        -: 1081:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1082:
        -: 1083:      //increase supply count for choosen card by amount being discarded
    #####: 1084:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1085:			
        -: 1086:      //each other player gains a copy of revealed card
    #####: 1087:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1088:	{
    #####: 1089:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1090:	    {
    #####: 1091:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1092:	    }
    #####: 1093:	}
        -: 1094:
        -: 1095:      //discard played card from hand
    #####: 1096:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1097:
        -: 1098:      //trash copies of cards returned to supply
    #####: 1099:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1100:	{
    #####: 1101:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1102:	    {
    #####: 1103:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1104:		{
    #####: 1105:		  discardCard(i, currentPlayer, state, 1);
    #####: 1106:		  break;
        -: 1107:		}
    #####: 1108:	    }
    #####: 1109:	}			
        -: 1110:
    #####: 1111:      return 0;
        -: 1112:		
        -: 1113:    case cutpurse:
        -: 1114:
    #####: 1115:      updateCoins(currentPlayer, state, 2);
    #####: 1116:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
    #####: 1118:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1119:	    {
    #####: 1120:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1121:		{
    #####: 1122:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1123:		    {
    #####: 1124:		      discardCard(j, i, state, 0);
    #####: 1125:		      break;
        -: 1126:		    }
    #####: 1127:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1128:		    {
    #####: 1129:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1130:			{
        -: 1131:			  if (DEBUG)
        -: 1132:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1133:			}	
    #####: 1134:		      break;
        -: 1135:		    }		
    #####: 1136:		}
        -: 1137:					
    #####: 1138:	    }
        -: 1139:				
    #####: 1140:	}				
        -: 1141:
        -: 1142:      //discard played card from hand
    #####: 1143:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1144:
    #####: 1145:      return 0;
        -: 1146:
        -: 1147:		
        -: 1148:    case embargo: 
        -: 1149:      //+2 Coins
    #####: 1150:      state->coins = state->coins + 2;
        -: 1151:			
        -: 1152:      //see if selected pile is in play
    #####: 1153:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1154:	{
    #####: 1155:	  return -1;
        -: 1156:	}
        -: 1157:			
        -: 1158:      //add embargo token to selected supply pile
    #####: 1159:      state->embargoTokens[choice1]++;
        -: 1160:			
        -: 1161:      //trash card
    #####: 1162:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1163:      return 0;
        -: 1164:		
        -: 1165:    case outpost:
        -: 1166:      //set outpost flag
        6: 1167:      state->outpostPlayed++;
        -: 1168:			
        -: 1169:      //discard card
        6: 1170:      discardCard(handPos, currentPlayer, state, 0);
        6: 1171:      return 0;
        -: 1172:		
        -: 1173:    case salvager:
        -: 1174:      //+1 buy
    #####: 1175:      state->numBuys++;
        -: 1176:			
    #####: 1177:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1178:        	{
        -: 1179:            //gain coins equal to trashed card
    #####: 1180:        	  state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1181:        	  //trash card
    #####: 1182:        	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1183:        	}
        -: 1184:        			
        -: 1185:      //discard card
    #####: 1186:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1187:      return 0;
        -: 1188:		
        -: 1189:    case sea_hag:
    #####: 1190:      return playSeaHag(currentPlayer, state);
        -: 1191:      /*for (i = 0; i < state->numPlayers+1; i++){ //INCORRECT - SHOULD BE i < state->numPlayers. THIS IS A BUG
        -: 1192:	if (i != currentPlayer){
        -: 1193:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        -: 1194:	  state->discardCount[i]++;
        -: 1195:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1196:	}
        -: 1197:      }
        -: 1198:      return 0;*/
        -: 1199:		
        -: 1200:    case treasure_map:
        -: 1201:      //search hand for another treasure_map
    #####: 1202:      index = -1;
    #####: 1203:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1204:	{
    #####: 1205:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1206:	    {
    #####: 1207:	      index = i;
    #####: 1208:	      break;
        -: 1209:	    }
    #####: 1210:	}
    #####: 1211:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1212:	{
        -: 1213:	  //trash both treasure cards
    #####: 1214:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1215:	  discardCard(index, currentPlayer, state, 1);
        -: 1216:
        -: 1217:	  //gain 4 Gold cards
    #####: 1218:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1219:	    {
    #####: 1220:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1221:	    }
        -: 1222:				
        -: 1223:	  //return success
    #####: 1224:	  return 1;
        -: 1225:	}
        -: 1226:			
        -: 1227:      //no second treasure_map found in hand
    #####: 1228:      return -1;
        -: 1229:    }
        -: 1230:	
    #####: 1231:  return -1;
        6: 1232:}
        -: 1233:
        -: 1234:/*int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -: 1235:{
        -: 1236:  int i;
        -: 1237:  int j;
        -: 1238:  int k;
        -: 1239:  int x;
        -: 1240:  int index;
        -: 1241:  int currentPlayer = whoseTurn(state);
        -: 1242:  int nextPlayer = currentPlayer + 1;
        -: 1243:
        -: 1244:  //int tributeRevealedCards[2] = {-1, -1};
        -: 1245:  int temphand[MAX_HAND];// moved above the if statement
        -: 1246:  int drawntreasure=0;
        -: 1247:  //int cardDrawn;
        -: 1248:  int z = 0;// this is the counter for the temp hand
        -: 1249:  if (nextPlayer > (state->numPlayers - 1)){
        -: 1250:    nextPlayer = 0;
        -: 1251:  }
        -: 1252:  
        -: 1253:	
        -: 1254:  //uses switch to select card and perform actions
        -: 1255:  switch( card ) 
        -: 1256:    {
        -: 1257:    case adventurer: 
        -: 1258:	      return playAdventurer(&drawntreasure, state, currentPlayer, temphand, &z);
        -: 1259:			
        -: 1260:    case council_room:
        -: 1261:	     return playCouncilRoom(currentPlayer, state, handPos);
        -: 1262:			
        -: 1263:    case feast: //PASS int currentPlayer, struct* gameState state int temphand[], int choice1
        -: 1264:	     return playFeast(currentPlayer, state, temphand, handPos);
        -: 1265:			
        -: 1266:    case gardens:
        -: 1267:      	return playGardens();
        -: 1268:			
        -: 1269:    case mine: //PASS int currentPlayer, struct* gameState state, int choice1, int choice2, int handPos
        -: 1270:    	return playMine(currentPlayer, state, choice1, choice2, handPos);
        -: 1271:			
        -: 1272:    case remodel: // PASS int currentPlayer, struct* gameState state, int choice1, int choice2, int handPos	 
        -: 1273:    	return playRemodel(currentPlayer, state, choice1, choice2, handPos);  
        -: 1274:
        -: 1275:    case smithy: // PASS int currentPlayer, struct* gameState state, int handPos
        -: 1276:    	return playSmithy(currentPlayer, state, handPos);
        -: 1277:		
        -: 1278:    case village: // PASS int currentPlayer, struct gameState *state, int handPos
        -: 1279:    	return playVillage(currentPlayer, state, handPos);
        -: 1280:		
        -: 1281:    case baron: // int currentPlayer, struct gameState *state, int choice1
        -: 1282:    	return playBaron(currentPlayer, state, choice1);
        -: 1283:		
        -: 1284:    case great_hall:// int currentPlayer, struct gameState *state, int handPos 
        -: 1285:	    return playGreatHall(currentPlayer, state, handPos);
        -: 1286:		
        -: 1287:    case minion: // int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2
        -: 1288:    	return playMinion(currentPlayer, state, handPos, choice1, choice2);
        -: 1289:			
        -: 1290:    case steward: // int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3
        -: 1291:    	return playSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
        -: 1292:		
        -: 1293:    case tribute: // int currentPlayer, struct gameState *state, int nextPlayer
        -: 1294:    	return playTribute(currentPlayer, state, nextPlayer);
        -: 1295:		
        -: 1296:    case ambassador: // int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos
        -: 1297:	    return playAmbassador(currentPlayer, state, choice1, choice2, handPos);
        -: 1298:		
        -: 1299:    case cutpurse: // int currentPlayer, struct gameState *state, int handPos
        -: 1300:    	return playCutpurse(currentPlayer, state, handPos);
        -: 1301:		
        -: 1302:    case embargo: // int currentPlayer, struct gameState *state, int handPos, int choice1
        -: 1303:    	return playEmbargo(currentPlayer, state, handPos, choice1);
        -: 1304:		
        -: 1305:    case outpost: // int currentPlayer, struct gameState *state, int handPos
        -: 1306:    	return playOutpost(currentPlayer, state, handPos);
        -: 1307:
        -: 1308:    case salvager: // int currentPlayer, struct gameState *state, int handPos, int choice1
        -: 1309:    	return playSalvager(currentPlayer, state, handPos, choice1);
        -: 1310:		
        -: 1311:    case sea_hag: // int currentPlayer, struct gameState *state
        -: 1312:    	return playSeaHag(currentPlayer, state);
        -: 1313:		
        -: 1314:    case treasure_map: // int currentPlayer, struct gameState *state, int handPos
        -: 1315:    	return playTreasureMap(currentPlayer, state, handPos);
        -: 1316:
        -: 1317:	    }
        -: 1318:	
        -: 1319:  return -1;
        -: 1320:}*/
        -: 1321:
function discardCard called 6 returned 100% blocks executed 90%
        -: 1322:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1323:{
        -: 1324:	
        -: 1325:  //if card is not trashed, added to Played pile 
        6: 1326:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1327:    {
        -: 1328:      //add card to played pile
        6: 1329:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        6: 1330:      state->playedCardCount++;
        6: 1331:    }
        -: 1332:	
        -: 1333:  //set played card to -1
        6: 1334:  state->hand[currentPlayer][handPos] = -1;
        -: 1335:	
        -: 1336:  //remove card from player's hand
        -: 1337:  
        6: 1338:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 17%
branch  1 taken 83%
        -: 1339:    {
        -: 1340:      //reduce number of cards in hand
        1: 1341:      state->handCount[currentPlayer]--;
        1: 1342:    }
        5: 1343:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1344:    {
        -: 1345:      //reduce number of cards in hand
    #####: 1346:      state->handCount[currentPlayer]--;
    #####: 1347:    }
        -: 1348:  else 	
        -: 1349:    {
        -: 1350:      //replace discarded card with last card in hand
        5: 1351:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1352:      //set last card to -1
        5: 1353:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1354:      //reduce number of cards in hand
        5: 1355:      state->handCount[currentPlayer]--;
        -: 1356:    }
        -: 1357:	
        6: 1358:  return 0;
        -: 1359:}
        -: 1360:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1361:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1362:{
        -: 1363:  //Note: supplyPos is enum of choosen card
        -: 1364:	
        -: 1365:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1366:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1367:    {
    #####: 1368:      return -1;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //added card for [whoseTurn] current player:
        -: 1372:  // toFlag = 0 : add to discard
        -: 1373:  // toFlag = 1 : add to deck
        -: 1374:  // toFlag = 2 : add to hand
        -: 1375:
    #####: 1376:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1377:    {
    #####: 1378:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1379:      state->deckCount[player]++;
    #####: 1380:    }
    #####: 1381:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1382:    {
    #####: 1383:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1384:      state->handCount[player]++;
    #####: 1385:    }
        -: 1386:  else
        -: 1387:    {
    #####: 1388:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1389:      state->discardCount[player]++;
        -: 1390:    }
        -: 1391:	
        -: 1392:  //decrease number in supply pile
    #####: 1393:  state->supplyCount[supplyPos]--;
        -: 1394:	 
    #####: 1395:  return 0;
    #####: 1396:}
        -: 1397:
function updateCoins called 1 returned 100% blocks executed 85%
        -: 1398:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1399:{
        -: 1400:  int i;
        -: 1401:	
        -: 1402:  //reset coin count
        1: 1403:  state->coins = 0;
        -: 1404:
        -: 1405:  //add coins for each Treasure card in player's hand
       12: 1406:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1407:    {
        5: 1408:      if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1409:	{
        4: 1410:	  state->coins += 1;
        4: 1411:	}
        1: 1412:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1413:	{
    #####: 1414:	  state->coins += 2;
    #####: 1415:	}
        1: 1416:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1417:	{
    #####: 1418:	  state->coins += 3;
    #####: 1419:	}	
        5: 1420:    }	
        -: 1421:
        -: 1422:  //add bonus
        1: 1423:  state->coins += bonus;
        -: 1424:
        1: 1425:  return 0;
        -: 1426:}
        -: 1427:
        -: 1428:/************************************************************/
        -: 1429:/************************************************************/
        -: 1430:/************************************************************/
        -: 1431://new functions 4-12-17
        -: 1432:
function playAdventurer called 0 returned 0% blocks executed 0%
        -: 1433:int playAdventurer(struct gameState *state, int currentPlayer)
        -: 1434:{
        -: 1435:	int cardDrawn;
    #####: 1436:	int z = 0;
    #####: 1437:	int drawntreasure = 0;
        -: 1438:	int temphand[MAX_HAND];
        -: 1439:
    #####: 1440:	while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
        -: 1441:		
    #####: 1442:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1443:		  shuffle(currentPlayer, state);
    #####: 1444:		}
        -: 1445:		
    #####: 1446:    drawCard(currentPlayer, state);
    #####: 1447:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card. CORRECT
        -: 1448:		//cardDrawn = state->hand[currentPlayer][0]; //INCORRECT - this is a bug. cardDrawn should be last element in the hand, not first
        -: 1449:		
    #####: 1450:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1451:		  drawntreasure++;
    #####: 1452:    }
        -: 1453:		
        -: 1454:    else{
    #####: 1455:		  temphand[z]=cardDrawn;
    #####: 1456:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1457:		  z++;
        -: 1458:		}
        -: 1459:	}
        -: 1460:	 
    #####: 1461:  while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1462:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1463:		z=z-1;
        -: 1464:	 }
        -: 1465:	
    #####: 1466:  return 0;
        -: 1467:}
        -: 1468:
        -: 1469:/*int playCouncilRoom(int currentPlayer, struct gameState *state, int handPos)
        -: 1470:{
        -: 1471:	int i;	
        -: 1472:	//+4 Cards
        -: 1473:      for (i = 0; i < 4; i++)
        -: 1474:	{
        -: 1475:	  drawCard(currentPlayer, state);
        -: 1476:	}
        -: 1477:			
        -: 1478:      //+1 Buy
        -: 1479:      state->numBuys++;
        -: 1480:			
        -: 1481:      //Each other player draws a card
        -: 1482:      for (i = 0; i < state->numPlayers; i++)
        -: 1483:		{
        -: 1484:		  if ( i != currentPlayer )
        -: 1485:		    {
        -: 1486:		      drawCard(i, state);
        -: 1487:		    }
        -: 1488:		}
        -: 1489:				
        -: 1490:      //put played card in played card pile
        -: 1491:      discardCard(handPos, currentPlayer, state, 0);
        -: 1492:			
        -: 1493:      return 0;
        -: 1494:}*/
        -: 1495:
        -: 1496:/*int playFeast(int currentPlayer, struct gameState *state, int temphand[], int choice1)
        -: 1497:{
        -: 1498:	 //gain card with cost up to 5
        -: 1499:      //Backup hand
        -: 1500:	int i, x;
        -: 1501:
        -: 1502:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -: 1503:	temphand[i] = state->hand[currentPlayer][i];//Backup card
        -: 1504:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1505:      }
        -: 1506:      //Backup hand
        -: 1507:
        -: 1508:      //Update Coins for Buy
        -: 1509:      updateCoins(currentPlayer, state, 5);
        -: 1510:      x = 1;//Condition to loop on
        -: 1511:      while( x == 1) {//Buy one card
        -: 1512:	if (supplyCount(choice1, state) <= 0){
        -: 1513:	  if (DEBUG)
        -: 1514:	    printf("None of that card left, sorry!\n");
        -: 1515:
        -: 1516:	  if (DEBUG){
        -: 1517:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1518:	  }
        -: 1519:	}
        -: 1520:	else if (state->coins < getCost(choice1)){
        -: 1521:	  printf("That card is too expensive!\n");
        -: 1522:
        -: 1523:	  if (DEBUG){
        -: 1524:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1525:	  }
        -: 1526:	}
        -: 1527:	else{
        -: 1528:
        -: 1529:	  if (DEBUG){
        -: 1530:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1531:	  }
        -: 1532:
        -: 1533:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        -: 1534:	  x = 0;//No more buying cards
        -: 1535:
        -: 1536:	  if (DEBUG){
        -: 1537:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1538:	  }
        -: 1539:
        -: 1540:	}
        -: 1541:      }     
        -: 1542:
        -: 1543:      //Reset Hand
        -: 1544:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -: 1545:	state->hand[currentPlayer][i] = temphand[i];
        -: 1546:	temphand[i] = -1;
        -: 1547:      }
        -: 1548:      //Reset Hand
        -: 1549:      			
        -: 1550:      return 0;
        -: 1551:}*/
        -: 1552:
        -: 1553:/*int playGardens()
        -: 1554:{
        -: 1555:	return -1;
        -: 1556:}*/
        -: 1557:/*
        -: 1558: int playMine(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) 
        -: 1559: {
        -: 1560:     int i, j;
        -: 1561:
        -: 1562:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1563:
        -: 1564:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -: 1565:	{
        -: 1566:	  return -1;
        -: 1567:	}
        -: 1568:		
        -: 1569:      if (choice2 > treasure_map || choice2 < curse)
        -: 1570:	{
        -: 1571:	  return -1;
        -: 1572:	}
        -: 1573:
        -: 1574:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -: 1575:	{
        -: 1576:	  return -1;
        -: 1577:	}
        -: 1578:
        -: 1579:      gainCard(choice2, state, 2, currentPlayer);
        -: 1580:
        -: 1581:      //discard card from hand
        -: 1582:      discardCard(handPos, currentPlayer, state, 0);
        -: 1583:
        -: 1584:      //discard trashed card
        -: 1585:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1586:	{
        -: 1587:	  if (state->hand[currentPlayer][i] == j)
        -: 1588:	    {
        -: 1589:	      discardCard(i, currentPlayer, state, 0);			
        -: 1590:	      break;
        -: 1591:	    }
        -: 1592:	}
        -: 1593:			
        -: 1594:      return 0;
        -: 1595:}*/
        -: 1596:
        -: 1597:/*int playRemodel(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos)
        -: 1598:{
        -: 1599:     int i, j; 
        -: 1600:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1601:
        -: 1602:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1603:	{
        -: 1604:	  return -1;
        -: 1605:	}
        -: 1606:
        -: 1607:      gainCard(choice2, state, 0, currentPlayer);
        -: 1608:
        -: 1609:      //discard card from hand
        -: 1610:      discardCard(handPos, currentPlayer, state, 0);
        -: 1611:
        -: 1612:      //discard trashed card
        -: 1613:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1614:	{
        -: 1615:	  if (state->hand[currentPlayer][i] == j)
        -: 1616:	    {
        -: 1617:	      discardCard(i, currentPlayer, state, 0);			
        -: 1618:	      break;
        -: 1619:	    }
        -: 1620:	}
        -: 1621:
        -: 1622:
        -: 1623:      return 0;
        -: 1624:  }*/
        -: 1625:
function playSmithy called 0 returned 0% blocks executed 0%
        -: 1626:int playSmithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1627:{
        -: 1628:      //+3 Cards
        -: 1629:	int i;
    #####: 1630:      for (i = 0; i <= 3; i++) //INCORRECT, THIS IS A BUG. SHOULD BE i < 3 not i <= 3.
branch  0 never executed
branch  1 never executed
        -: 1631:    	{
    #####: 1632:    	  drawCard(currentPlayer, state);
    #####: 1633:    	}
        -: 1634:			
        -: 1635:      //discard card from hand
    #####: 1636:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1637:      return 0;
        -: 1638:}
        -: 1639:
function playVillage called 0 returned 0% blocks executed 0%
        -: 1640: int playVillage(int currentPlayer, struct gameState *state, int handPos)
        -: 1641: {
        -: 1642:      //+1 Card
    #####: 1643:      drawCard(currentPlayer, state);
        -: 1644:			
        -: 1645:      //+2 Actions
        -: 1646:      //state->numActions = state->numActions + 2;
    #####: 1647:      state->numActions = 2; //	INCORRECT - THIS IS A BUG. This resets numActions to 2 rather than adding 2 to it
        -: 1648:			
        -: 1649:      //discard played card from hand
    #####: 1650:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1651:      return 0;
        -: 1652:}
        -: 1653:
        -: 1654: /*int playBaron(int currentPlayer, struct gameState *state, int choice1)
        -: 1655: {
        -: 1656:      state->numBuys++;//Increase buys by 1!
        -: 1657:      if (choice1 > 0){//Boolean true or going to discard an estate
        -: 1658:	int p = 0;//Iterator for hand!
        -: 1659:	int card_not_discarded = 1;//Flag for discard set!
        -: 1660:	
        -: 1661:	while(card_not_discarded){
        -: 1662:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
        -: 1663:	    state->coins += 4;//Add 4 coins to the amount of coins
        -: 1664:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        -: 1665:	    state->discardCount[currentPlayer]++;
        -: 1666:	    
        -: 1667:	    for (;p < state->handCount[currentPlayer]; p++){
        -: 1668:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1669:	    }
        -: 1670:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        -: 1671:	    state->handCount[currentPlayer]--;
        -: 1672:	    card_not_discarded = 0;//Exit the loop
        -: 1673:	  }
        -: 1674:	 
        -: 1675:	  else if (p > state->handCount[currentPlayer]){
        -: 1676:	    if(DEBUG) {
        -: 1677:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1678:	      printf("Must gain an estate if there are any\n");
        -: 1679:	    }
        -: 1680:	    if (supplyCount(estate, state) > 0){
        -: 1681:	      gainCard(estate, state, 0, currentPlayer);
        -: 1682:	      state->supplyCount[estate]--;//Decrement estates
        -: 1683:	      if (supplyCount(estate, state) == 0){
        -: 1684:		isGameOver(state);
        -: 1685:	      }
        -: 1686:	    }
        -: 1687:	    card_not_discarded = 0;//Exit the loop
        -: 1688:	  }
        -: 1689:			    
        -: 1690:	  else{
        -: 1691:	    p++;//Next card
        -: 1692:	  }
        -: 1693:	}
        -: 1694:      }
        -: 1695:			    
        -: 1696:      else{
        -: 1697:	if (supplyCount(estate, state) > 0){
        -: 1698:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -: 1699:	  state->supplyCount[estate]--;//Decrement Estates
        -: 1700:	  if (supplyCount(estate, state) == 0){
        -: 1701:	    isGameOver(state);
        -: 1702:	  }
        -: 1703:	}
        -: 1704:      }
        -: 1705:	    
        -: 1706:      
        -: 1707:      return 0;
        -: 1708:  }*/
        -: 1709:
function playGreatHall called 0 returned 0% blocks executed 0%
        -: 1710:int playGreatHall(int currentPlayer, struct gameState *state, int handPos)
        -: 1711:{
        -: 1712:  //+1 Card
    #####: 1713:  drawCard(currentPlayer, state);
        -: 1714:		
        -: 1715:  //+1 Actions
    #####: 1716:  state->numActions++;
        -: 1717:		
        -: 1718:  //discard card from hand
    #####: 1719:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1720:  return 0;
        -: 1721:}
        -: 1722:
        -: 1723:/*int playMinion(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2)
        -: 1724:{
        -: 1725:  int i, j; 
        -: 1726: 
        -: 1727:  //+1 action
        -: 1728:  state->numActions++;
        -: 1729:		
        -: 1730:  //discard card from hand
        -: 1731:  discardCard(handPos, currentPlayer, state, 0);
        -: 1732:		
        -: 1733:  if (choice1)		//+2 coins
        -: 1734:{
        -: 1735:  state->coins = state->coins + 2;
        -: 1736:}
        -: 1737:		
        -: 1738:  else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1739:{
        -: 1740:  //discard hand
        -: 1741:  while(numHandCards(state) > 0)
        -: 1742:    {
        -: 1743:      discardCard(handPos, currentPlayer, state, 0);
        -: 1744:    }
        -: 1745:			
        -: 1746:  //draw 4
        -: 1747:  for (i = 0; i < 4; i++)
        -: 1748:    {
        -: 1749:      drawCard(currentPlayer, state);
        -: 1750:    }
        -: 1751:			
        -: 1752:  //other players discard hand and redraw if hand size > 4
        -: 1753:  for (i = 0; i < state->numPlayers; i++)
        -: 1754:    {
        -: 1755:      if (i != currentPlayer)
        -: 1756:	{
        -: 1757:	  if ( state->handCount[i] > 4 )
        -: 1758:	    {
        -: 1759:	      //discard hand
        -: 1760:	      while( state->handCount[i] > 0 )
        -: 1761:		{
        -: 1762:		  discardCard(handPos, i, state, 0);
        -: 1763:		}
        -: 1764:						
        -: 1765:	      //draw 4
        -: 1766:	      for (j = 0; j < 4; j++)
        -: 1767:		{
        -: 1768:		  drawCard(i, state);
        -: 1769:		}
        -: 1770:	    }
        -: 1771:	}
        -: 1772:    }
        -: 1773:			
        -: 1774:	}
        -: 1775:  return 0;
        -: 1776:}*/
        -: 1777:
        -: 1778:/*int playSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3)
        -: 1779:{
        -: 1780:	if (choice1 == 1)
        -: 1781:	{
        -: 1782:	  //+2 cards
        -: 1783:	  drawCard(currentPlayer, state);
        -: 1784:	  drawCard(currentPlayer, state);
        -: 1785:	}
        -: 1786:      else if (choice1 == 2)
        -: 1787:	{
        -: 1788:	  //+2 coins
        -: 1789:	  state->coins = state->coins + 2;
        -: 1790:	}
        -: 1791:      else
        -: 1792:	{
        -: 1793:	  //trash 2 cards in hand
        -: 1794:	  discardCard(choice2, currentPlayer, state, 1);
        -: 1795:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1796:	}
        -: 1797:			
        -: 1798:      //discard card from hand
        -: 1799:      discardCard(handPos, currentPlayer, state, 0);
        -: 1800:      return 0;
        -: 1801:}*/
        -: 1802:
        -: 1803:/*int playTribute(int currentPlayer, struct gameState *state, int nextPlayer)
        -: 1804:{  
        -: 1805:	int i; 
        -: 1806:	int tributeRevealedCards[2] = {-1, -1};
        -: 1807:
        -: 1808:	  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
        -: 1809:	if (state->deckCount[nextPlayer] > 0){
        -: 1810:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1811:	  state->deckCount[nextPlayer]--;
        -: 1812:	}
        -: 1813:	else if (state->discardCount[nextPlayer] > 0){
        -: 1814:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
        -: 1815:	  state->discardCount[nextPlayer]--;
        -: 1816:	}
        -: 1817:	else{
        -: 1818:	  //No Card to Reveal
        -: 1819:	  if (DEBUG){
        -: 1820:	    printf("No cards to reveal\n");
        -: 1821:	  }
        -: 1822:	}
        -: 1823:	  }
        -: 1824:	    
        -: 1825:	  else{
        -: 1826:	if (state->deckCount[nextPlayer] == 0){
        -: 1827:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
        -: 1828:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
        -: 1829:	    state->deckCount[nextPlayer]++;
        -: 1830:	    state->discard[nextPlayer][i] = -1;
        -: 1831:	    state->discardCount[nextPlayer]--;
        -: 1832:	  }
        -: 1833:			    
        -: 1834:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1835:	} 
        -: 1836:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1837:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1838:	state->deckCount[nextPlayer]--;
        -: 1839:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1840:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1841:	state->deckCount[nextPlayer]--;
        -: 1842:	  }    
        -: 1843:		       
        -: 1844:	  if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
        -: 1845:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        -: 1846:	state->playedCardCount++;
        -: 1847:	tributeRevealedCards[1] = -1;
        -: 1848:	  }
        -: 1849:
        -: 1850:	  for (i = 0; i <= 2; i ++){
        -: 1851:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
        -: 1852:	  state->coins += 2;
        -: 1853:	}
        -: 1854:		    
        -: 1855:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
        -: 1856:	  drawCard(currentPlayer, state);
        -: 1857:	  drawCard(currentPlayer, state);
        -: 1858:	}
        -: 1859:	else{//Action Card
        -: 1860:	  state->numActions = state->numActions + 2;
        -: 1861:	}
        -: 1862:	  }
        -: 1863:	    
        -: 1864:	  return 0;
        -: 1865:}*/
        -: 1866:
        -: 1867:/*int playAmbassador(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos)
        -: 1868:{ 
        -: 1869:	int i;
        -: 1870:    int j = 0;		//used to check if player has enough cards to discard
        -: 1871:
        -: 1872:      if (choice2 > 2 || choice2 < 0)
        -: 1873:	{
        -: 1874:	  return -1;				
        -: 1875:	}
        -: 1876:
        -: 1877:      if (choice1 == handPos)
        -: 1878:	{
        -: 1879:	  return -1;
        -: 1880:	}
        -: 1881:
        -: 1882:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1883:	{
        -: 1884:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1885:	    {
        -: 1886:	      j++;
        -: 1887:	    }
        -: 1888:	}
        -: 1889:      if (j < choice2)
        -: 1890:	{
        -: 1891:	  return -1;				
        -: 1892:	}
        -: 1893:
        -: 1894:      if (DEBUG) 
        -: 1895:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1896:
        -: 1897:      //increase supply count for choosen card by amount being discarded
        -: 1898:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1899:			
        -: 1900:      //each other player gains a copy of revealed card
        -: 1901:      for (i = 0; i < state->numPlayers; i++)
        -: 1902:	{
        -: 1903:	  if (i != currentPlayer)
        -: 1904:	    {
        -: 1905:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1906:	    }
        -: 1907:	}
        -: 1908:
        -: 1909:      //discard played card from hand
        -: 1910:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1911:
        -: 1912:      //trash copies of cards returned to supply
        -: 1913:      for (j = 0; j < choice2; j++)
        -: 1914:	{
        -: 1915:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1916:	    {
        -: 1917:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1918:		{
        -: 1919:		  discardCard(i, currentPlayer, state, 1);
        -: 1920:		  break;
        -: 1921:		}
        -: 1922:	    }
        -: 1923:	}			
        -: 1924:
        -: 1925:      return 0;
        -: 1926:}*/
        -: 1927:
        -: 1928:/*int playCutpurse(int currentPlayer, struct gameState *state, int handPos)
        -: 1929:{	
        -: 1930:	int i, j, k;
        -: 1931:	  updateCoins(currentPlayer, state, 2);
        -: 1932:	  for (i = 0; i < state->numPlayers; i++)
        -: 1933:	{
        -: 1934:	  if (i != currentPlayer)
        -: 1935:	    {
        -: 1936:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1937:		{
        -: 1938:		  if (state->hand[i][j] == copper)
        -: 1939:		    {
        -: 1940:		      discardCard(j, i, state, 0);
        -: 1941:		      break;
        -: 1942:		    }
        -: 1943:		  if (j == state->handCount[i])
        -: 1944:		    {
        -: 1945:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1946:			{
        -: 1947:			  if (DEBUG)
        -: 1948:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1949:			}	
        -: 1950:		      break;
        -: 1951:		    }		
        -: 1952:		}
        -: 1953:					
        -: 1954:	    }
        -: 1955:				
        -: 1956:	}				
        -: 1957:
        -: 1958:  //discard played card from hand
        -: 1959:  discardCard(handPos, currentPlayer, state, 0);			
        -: 1960:
        -: 1961:  return 0;
        -: 1962:}*/
        -: 1963:
        -: 1964: /*int playEmbargo(int currentPlayer, struct gameState *state, int handPos, int choice1)
        -: 1965:{ 
        -: 1966: 	//+2 Coins
        -: 1967:     state->coins = state->coins + 2;
        -: 1968:			
        -: 1969:      //see if selected pile is in play
        -: 1970:      if ( state->supplyCount[choice1] == -1 )
        -: 1971:	{
        -: 1972:	  return -1;
        -: 1973:	}
        -: 1974:			
        -: 1975:      //add embargo token to selected supply pile
        -: 1976:      state->embargoTokens[choice1]++;
        -: 1977:			
        -: 1978:      //trash card
        -: 1979:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1980:      return 0;
        -: 1981: }*/
        -: 1982:
        -: 1983:/*int playOutpost(int currentPlayer, struct gameState *state, int handPos)
        -: 1984:{
        -: 1985: //set outpost flag
        -: 1986:  state->outpostPlayed++;
        -: 1987:		
        -: 1988:  //discard card
        -: 1989:  discardCard(handPos, currentPlayer, state, 0);
        -: 1990:  return 0;
        -: 1991:}*/
        -: 1992:
        -: 1993:/*int playSalvager(int currentPlayer, struct gameState *state, int handPos, int choice1)
        -: 1994:{
        -: 1995:	//+1 buy
        -: 1996:	  state->numBuys++;
        -: 1997:			
        -: 1998:	  if (choice1)
        -: 1999:	{
        -: 2000:	  //gain coins equal to trashed card
        -: 2001:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 2002:	  //trash card
        -: 2003:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 2004:	}
        -: 2005:			
        -: 2006:	  //discard card
        -: 2007:	  discardCard(handPos, currentPlayer, state, 0);
        -: 2008:	  return 0;
        -: 2009:}*/
        -: 2010:
function playSeaHag called 0 returned 0% blocks executed 0%
        -: 2011:int playSeaHag(int currentPlayer, struct gameState *state)
        -: 2012:{
        -: 2013:  	int i;
    #####: 2014:  	 for (i = 0; i < state->numPlayers+1; i++){ //INCORRECT - SHOULD BE i < state->numPlayers. THIS IS A BUG
branch  0 never executed
branch  1 never executed
    #####: 2015:		if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 2016:		  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
    #####: 2017:		  state->deckCount[i]--;
    #####: 2018:		  state->discardCount[i]++;
    #####: 2019:		  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 2020:		}
    #####: 2021:	  }
    #####: 2022:	return 0;
        -: 2023:}
        -: 2024:
        -: 2025:/*int playTreasureMap(int currentPlayer, struct gameState *state, int handPos)
        -: 2026:{
        -: 2027:	int i, index;
        -: 2028:      //search hand for another treasure_map
        -: 2029:      index = -1;
        -: 2030:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 2031:	{
        -: 2032:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 2033:	    {
        -: 2034:	      index = i;
        -: 2035:	      break;
        -: 2036:	    }
        -: 2037:	}
        -: 2038:      if (index > -1)
        -: 2039:	{
        -: 2040:	  //trash both treasure cards
        -: 2041:	  discardCard(handPos, currentPlayer, state, 1);
        -: 2042:	  discardCard(index, currentPlayer, state, 1);
        -: 2043:
        -: 2044:	  //gain 4 Gold cards
        -: 2045:	  for (i = 0; i < 4; i++)
        -: 2046:	    {
        -: 2047:	      gainCard(gold, state, 1, currentPlayer);
        -: 2048:	    }
        -: 2049:				
        -: 2050:	  //return success
        -: 2051:	  return 1;
        -: 2052:	}
        -: 2053:			
        -: 2054:      //no second treasure_map found in hand
        -: 2055:      return -1;
        -: 2056:}*/
        -: 2057:
        -: 2058://end of dominion.c
        -: 2059:
cardtest2.c
TESTING smithy card
	TEST handPos[0] FAILURE: handCount: 8	expected: 7
TEST handPos[0] FALURE
	TEST handPos[1] FAILURE: handCount: 8	expected: 7
	TEST handPos[1] FAILURE: hand contains smithy card after call: 1	expected: 0
TEST handPos[1] FALURE
	TEST handPos[2] FAILURE: handCount: 8	expected: 7
	TEST handPos[2] FAILURE: hand contains smithy card after call: 1	expected: 0
TEST handPos[2] FALURE
	TEST handPos[3] FAILURE: handCount: 8	expected: 7
	TEST handPos[3] FAILURE: hand contains smithy card after call: 1	expected: 0
TEST handPos[3] FALURE
	TEST handPos[4] FAILURE: handCount: 8	expected: 7
	TEST handPos[4] FAILURE: hand contains smithy card after call: 1	expected: 0
TEST handPos[4] FALURE
smithy card: FAIL
Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:85.90% of 78
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
No calls

Function 'shuffle'
Lines executed:94.44% of 18
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:0.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:33.33% of 24
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 256
Branches executed:0.00% of 181
Taken at least once:0.00% of 181
No calls

Function 'discardCard'
Lines executed:73.33% of 15
Branches executed:100.00% of 6
Taken at least once:50.00% of 6
No calls

Function 'gainCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'playAdventurer'
Lines executed:0.00% of 18
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'playSmithy'
Lines executed:100.00% of 5
Branches executed:100.00% of 2
Taken at least once:100.00% of 2
No calls

Function 'playVillage'
Lines executed:0.00% of 4
No branches
No calls

Function 'playGreatHall'
Lines executed:0.00% of 4
No branches
No calls

Function 'playSeaHag'
Lines executed:0.00% of 9
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls

File 'dominion.c'
Lines executed:19.04% of 646
Branches executed:17.75% of 417
Taken at least once:14.15% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:// set NOISY_TEST to 0 to remove printfs from output
        -:    9:#define NOISY_TEST 1
        -:   10:
        -:   11:
function compare called 28 returned 100% blocks executed 85%
        -:   12:int compare(const void* a, const void* b) {
       28:   13:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   14:    return 1;
       28:   15:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
       10:   16:    return -1;
       18:   17:  return 0;
       28:   18:}
        -:   19:
function newGame called 0 returned 0% blocks executed 0%
        -:   20:struct gameState* newGame() {
    #####:   21:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   22:  return g;
        -:   23:}
        -:   24:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   25:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   26:		  int k8, int k9, int k10) {
    #####:   27:  int* k = malloc(10 * sizeof(int));
    #####:   28:  k[0] = k1;
    #####:   29:  k[1] = k2;
    #####:   30:  k[2] = k3;
    #####:   31:  k[3] = k4;
    #####:   32:  k[4] = k5;
    #####:   33:  k[5] = k6;
    #####:   34:  k[6] = k7;
    #####:   35:  k[7] = k8;
    #####:   36:  k[8] = k9;
    #####:   37:  k[9] = k10;
    #####:   38:  return k;
        -:   39:}
        -:   40:
function initializeGame called 1 returned 100% blocks executed 87%
        -:   41:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   42:		   struct gameState *state) {
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;			
        -:   47:  //set up random number generator
        1:   48:  SelectStream(1);
        1:   49:  PutSeed((long)randomSeed);
        -:   50:  
        -:   51:  //check number of players
        2:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   53:    {
    #####:   54:      return -1;
        -:   55:    }
        -:   56:
        -:   57:  //set number of players
        1:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
       22:   61:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   62:    {
      220:   63:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   64:        {
      190:   65:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   66:	    {
    #####:   67:	      return -1;
        -:   68:	    }
      100:   69:        }
       10:   70:    }
        -:   71:
        -:   72:
        -:   73:  //initialize supply
        -:   74:  ///////////////////////////////
        -:   75:
        -:   76:  //set number of Curse cards
        1:   77:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 10;
        1:   80:    }
    #####:   81:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 20;
    #####:   84:    }
        -:   85:  else
        -:   86:    {
    #####:   87:      state->supplyCount[curse] = 30;
        -:   88:    }
        -:   89:
        -:   90:  //set number of Victory cards
        1:   91:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   92:    {
        1:   93:      state->supplyCount[estate] = 8;
        1:   94:      state->supplyCount[duchy] = 8;
        1:   95:      state->supplyCount[province] = 8;
        1:   96:    }
        -:   97:  else
        -:   98:    {
    #####:   99:      state->supplyCount[estate] = 12;
    #####:  100:      state->supplyCount[duchy] = 12;
    #####:  101:      state->supplyCount[province] = 12;
        -:  102:    }
        -:  103:
        -:  104:  //set number of Treasure cards
        1:  105:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  106:  state->supplyCount[silver] = 40;
        1:  107:  state->supplyCount[gold] = 30;
        -:  108:
        -:  109:  //set number of Kingdom cards
       42:  110:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  111:    {
      330:  112:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  113:    	{
      155:  114:    	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  115:    	    {
        -:  116:    	      //check if card is a 'Victory' Kingdom card
       19:  117:    	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens){
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        2:  118:          		  if (numPlayers == 2){ 
branch  0 taken 100%
branch  1 taken 0%
        2:  119:          		    state->supplyCount[i] = 8; 
        2:  120:          		  }
    #####:  121:          		  else{ state->supplyCount[i] = 12; }
        2:  122:    		      }
        -:  123:    	      
        -:  124:            else{
        8:  125:        		  state->supplyCount[i] = 10;
        -:  126:        		}
       10:  127:    	      break;
        -:  128:  	       }
        -:  129:    	  else    //card is not in the set choosen for the game
        -:  130:    	    {
      145:  131:    	      state->supplyCount[i] = -1;
        -:  132:    	    }
      145:  133:  	}
        -:  134:
       20:  135:    }
        -:  136:
        -:  137:  ////////////////////////
        -:  138:  //supply intilization complete
        -:  139:
        -:  140:  //set player decks
        6:  141:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  142:    {
        2:  143:      state->deckCount[i] = 0;
       16:  144:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  145:	{
        6:  146:	  state->deck[i][j] = estate;
        6:  147:	  state->deckCount[i]++;
        6:  148:	}
       32:  149:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  150:	{
       14:  151:	  state->deck[i][j] = copper;
       14:  152:	  state->deckCount[i]++;		
       14:  153:	}
        2:  154:    }
        -:  155:
        -:  156:  //shuffle player decks
        6:  157:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  158:    {
        2:  159:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  160:	{
    #####:  161:	  return -1;
        -:  162:	}
        2:  163:    }
        -:  164:
        -:  165:  //draw player hands
        6:  166:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  167:    {  
        -:  168:      //initialize hand size to zero
        2:  169:      state->handCount[i] = 0;
        2:  170:      state->discardCount[i] = 0;
        -:  171:      //draw 5 cards
        -:  172:      // for (j = 0; j < 5; j++)
        -:  173:      //	{
        -:  174:      //	  drawCard(i, state);
        -:  175:      //	}
        2:  176:    }
        -:  177:  
        -:  178:  //set embargo tokens to 0 for all supply piles
       56:  179:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  180:    {
       27:  181:      state->embargoTokens[i] = 0;
       27:  182:    }
        -:  183:
        -:  184:  //initialize first player's turn
        1:  185:  state->outpostPlayed = 0;
        1:  186:  state->phase = 0;
        1:  187:  state->numActions = 1;
        1:  188:  state->numBuys = 1;
        1:  189:  state->playedCardCount = 0;
        1:  190:  state->whoseTurn = 0;
        1:  191:  state->handCount[state->whoseTurn] = 0;
        -:  192:  //int it; move to top
        -:  193:
        -:  194:  //Moved draw cards to here, only drawing at the start of a turn
       12:  195:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
        5:  196:    drawCard(state->whoseTurn, state);
        5:  197:  }
        -:  198:
        1:  199:  updateCoins(state->whoseTurn, state, 0);
        -:  200:
        1:  201:  return 0;
        1:  202:}
        -:  203:
function shuffle called 2 returned 100% blocks executed 93%
        -:  204:int shuffle(int player, struct gameState *state) {
        -:  205: 
        -:  206:
        -:  207:  int newDeck[MAX_DECK];
        2:  208:  int newDeckPos = 0;
        -:  209:  int card;
        -:  210:  int i;
        -:  211:
        2:  212:  if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  213:    return -1;
        2:  214:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  215:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  216:
       44:  217:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
       20:  218:    card = floor(Random() * state->deckCount[player]);
       20:  219:    newDeck[newDeckPos] = state->deck[player][card];
       20:  220:    newDeckPos++;
      140:  221:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
       50:  222:      state->deck[player][i] = state->deck[player][i+1];
       50:  223:    }
       20:  224:    state->deckCount[player]--;
        -:  225:  }
       44:  226:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
       20:  227:    state->deck[player][i] = newDeck[i];
       20:  228:    state->deckCount[player]++;
       20:  229:  }
        -:  230:
        2:  231:  return 0;
        2:  232:}
        -:  233:
function playCard called 0 returned 0% blocks executed 0%
        -:  234:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  235:{	
        -:  236:  int card;
    #####:  237:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  238:
        -:  239:  //check if it is the right phase
    #####:  240:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  241:    {
    #####:  242:      return -1;
        -:  243:    }
        -:  244:	
        -:  245:  //check if player has enough actions
    #####:  246:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  247:    {
    #####:  248:      return -1;
        -:  249:    }
        -:  250:	
        -:  251:  //get card played
    #####:  252:  card = handCard(handPos, state);
        -:  253:	
        -:  254:  //check if selected card is an action
    #####:  255:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  256:    {
    #####:  257:      return -1;
        -:  258:    }
        -:  259:	
        -:  260:  //play card
    #####:  261:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  262:    {
    #####:  263:      return -1;
        -:  264:    }
        -:  265:	
        -:  266:  //reduce number of actions
    #####:  267:  state->numActions--;
        -:  268:
        -:  269:  //update coins (Treasure cards may be added with card draws)
    #####:  270:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  271:	
    #####:  272:  return 0;
    #####:  273:}
        -:  274:
function buyCard called 0 returned 0% blocks executed 0%
        -:  275:int buyCard(int supplyPos, struct gameState *state) {
        -:  276:  int who;
        -:  277:  if (DEBUG){
        -:  278:    printf("Entering buyCard...\n");
        -:  279:  }
        -:  280:
        -:  281:  // I don't know what to do about the phase thing.
        -:  282:
    #####:  283:  who = state->whoseTurn;
        -:  284:
    #####:  285:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  286:    if (DEBUG)
        -:  287:      printf("You do not have any buys left\n");
    #####:  288:    return -1;
    #####:  289:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  290:    if (DEBUG)
        -:  291:      printf("There are not any of that type of card left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  294:    if (DEBUG) 
        -:  295:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  296:    return -1;
        -:  297:  } else {
    #####:  298:    state->phase=1;
        -:  299:    //state->supplyCount[supplyPos]--;
    #####:  300:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  301:  
    #####:  302:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  303:    state->numBuys--;
        -:  304:    if (DEBUG)
        -:  305:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  306:  }
        -:  307:
        -:  308:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  309:  //state->discardCount[who]++;
        -:  310:    
    #####:  311:  return 0;
    #####:  312:}
        -:  313:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  314:int numHandCards(struct gameState *state) {
    #####:  315:  return state->handCount[ whoseTurn(state) ];
        -:  316:}
        -:  317:
function handCard called 0 returned 0% blocks executed 0%
        -:  318:int handCard(int handPos, struct gameState *state) {
    #####:  319:  int currentPlayer = whoseTurn(state);
    #####:  320:  return state->hand[currentPlayer][handPos];
        -:  321:}
        -:  322:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  323:int supplyCount(int card, struct gameState *state) {
    #####:  324:  return state->supplyCount[card];
        -:  325:}
        -:  326:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  327:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  328:  int i;
    #####:  329:  int count = 0;
        -:  330:
    #####:  331:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  332:    {
    #####:  333:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  334:    }
        -:  335:
    #####:  336:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  337:    {
    #####:  338:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  339:    }
        -:  340:
    #####:  341:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  342:    {
    #####:  343:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  344:    }
        -:  345:
    #####:  346:  return count;
        -:  347:}
        -:  348:
function whoseTurn called 0 returned 0% blocks executed 0%
        -:  349:int whoseTurn(struct gameState *state) {
    #####:  350:  return state->whoseTurn;
        -:  351:}
        -:  352:
function endTurn called 0 returned 0% blocks executed 0%
        -:  353:int endTurn(struct gameState *state) {
        -:  354:  int k;
        -:  355:  int i;
    #####:  356:  int currentPlayer = whoseTurn(state);
        -:  357:  
        -:  358:  //Discard hand
    #####:  359:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  360:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  361:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  362:  }
    #####:  363:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  364:    
        -:  365:  //Code for determining the player
    #####:  366:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  367:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  368:  }
        -:  369:  else{
    #####:  370:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  371:  }
        -:  372:
    #####:  373:  state->outpostPlayed = 0;
    #####:  374:  state->phase = 0;
    #####:  375:  state->numActions = 1;
    #####:  376:  state->coins = 0;
    #####:  377:  state->numBuys = 1;
    #####:  378:  state->playedCardCount = 0;
    #####:  379:  state->handCount[state->whoseTurn] = 0;
        -:  380:
        -:  381:  //int k; move to top
        -:  382:  //Next player draws hand
    #####:  383:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  384:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  385:  }
        -:  386:
        -:  387:  //Update money
    #####:  388:  updateCoins(state->whoseTurn, state , 0);
        -:  389:
    #####:  390:  return 0;
        -:  391:}
        -:  392:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  393:int isGameOver(struct gameState *state) {
        -:  394:  int i;
        -:  395:  int j;
        -:  396:	
        -:  397:  //if stack of Province cards is empty, the game ends
    #####:  398:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  399:    {
    #####:  400:      return 1;
        -:  401:    }
        -:  402:
        -:  403:  //if three supply piles are at 0, the game ends
    #####:  404:  j = 0;
    #####:  405:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  406:    {
    #####:  407:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  408:	{
    #####:  409:	  j++;
    #####:  410:	}
    #####:  411:    }
    #####:  412:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  413:    {
    #####:  414:      return 1;
        -:  415:    }
        -:  416:
    #####:  417:  return 0;
    #####:  418:}
        -:  419:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  420:int scoreFor (int player, struct gameState *state) {
        -:  421:
        -:  422:  int i;
    #####:  423:  int score = 0;
        -:  424:  //score from hand
    #####:  425:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  426:    {
    #####:  427:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  433:    }
        -:  434:
        -:  435:  //score from discard
    #####:  436:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  437:    {
    #####:  438:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  444:    }
        -:  445:
        -:  446:  //score from deck
    #####:  447:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  448:    {
    #####:  449:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  455:    }
        -:  456:
    #####:  457:  return score;
        -:  458:}
        -:  459:
function getWinners called 0 returned 0% blocks executed 0%
        -:  460:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  461:  int i;	
        -:  462:  int j;
        -:  463:  int highScore;
        -:  464:  int currentPlayer;
        -:  465:
        -:  466:  //get score for each player
    #####:  467:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  468:    {
        -:  469:      //set unused player scores to -9999
    #####:  470:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  471:	{
    #####:  472:	  players[i] = -9999;
    #####:  473:	}
        -:  474:      else
        -:  475:	{
    #####:  476:	  players[i] = scoreFor (i, state);
        -:  477:	}
    #####:  478:    }
        -:  479:
        -:  480:  //find highest score
    #####:  481:  j = 0;
    #####:  482:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  483:    {
    #####:  484:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  485:	{
    #####:  486:	  j = i;
    #####:  487:	}
    #####:  488:    }
    #####:  489:  highScore = players[j];
        -:  490:
        -:  491:  //add 1 to players who had less turns
    #####:  492:  currentPlayer = whoseTurn(state);
    #####:  493:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  494:    {
    #####:  495:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  496:	{
    #####:  497:	  players[i]++;
    #####:  498:	}
    #####:  499:    }
        -:  500:
        -:  501:  //find new highest score
    #####:  502:  j = 0;
    #####:  503:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  504:    {
    #####:  505:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  506:	{
    #####:  507:	  j = i;
    #####:  508:	}
    #####:  509:    }
    #####:  510:  highScore = players[j];
        -:  511:
        -:  512:  //set winners in array to 1 and rest to 0
    #####:  513:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  514:    {
    #####:  515:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  516:	{
    #####:  517:	  players[i] = 1;
    #####:  518:	}
        -:  519:      else
        -:  520:	{
    #####:  521:	  players[i] = 0;
        -:  522:	}
    #####:  523:    }
        -:  524:
    #####:  525:  return 0;
        -:  526:}
        -:  527:
function drawCard called 25 returned 100% blocks executed 41%
        -:  528:int drawCard(int player, struct gameState *state)
        -:  529:{	
        -:  530:  int count;
        -:  531:  int deckCounter;
       25:  532:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0%
branch  1 taken 100%
        -:  533:    
        -:  534:    //Step 1 Shuffle the discard pile back into a deck
        -:  535:    int i;
        -:  536:    //Move discard to deck
    #####:  537:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  538:      state->deck[player][i] = state->discard[player][i];
    #####:  539:      state->discard[player][i] = -1;
    #####:  540:    }
        -:  541:
    #####:  542:    state->deckCount[player] = state->discardCount[player];
    #####:  543:    state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:    //Shufffle the deck
    #####:  546:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  547:   
        -:  548:    if (DEBUG){//Debug statements
        -:  549:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:    }
        -:  551:    
    #####:  552:    state->discardCount[player] = 0;
        -:  553:
        -:  554:    //Step 2 Draw Card
    #####:  555:    count = state->handCount[player];//Get current player's hand count
        -:  556:    
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Current hand count: %d\n", count);
        -:  559:    }
        -:  560:    
    #####:  561:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
    #####:  563:    if (deckCounter == 0){
branch  0 never executed
branch  1 never executed
    #####:  564:      return -1;
        -:  565:    }
        -:  566:
    #####:  567:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  568:    state->deckCount[player]--;
    #####:  569:    state->handCount[player]++;//Increment hand count
    #####:  570:  }
        -:  571:
        -:  572:  else{
       25:  573:    int count = state->handCount[player];//Get current hand count for player
        -:  574:    int deckCounter;
        -:  575:    if (DEBUG){//Debug statements
        -:  576:      printf("Current hand count: %d\n", count);
        -:  577:    }
        -:  578:
       25:  579:    deckCounter = state->deckCount[player];//Create holder for the deck count
       25:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       25:  581:    state->deckCount[player]--;
       25:  582:    state->handCount[player]++;//Increment hand count
        -:  583:  }
        -:  584:
       25:  585:  return 0;
       25:  586:}
        -:  587:
function getCost called 0 returned 0% blocks executed 0%
        -:  588:int getCost(int cardNumber)
        -:  589:{
    #####:  590:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  591:    {
        -:  592:    case curse:
    #####:  593:      return 0;
        -:  594:    case estate:
    #####:  595:      return 2;
        -:  596:    case duchy:
    #####:  597:      return 5;
        -:  598:    case province:
    #####:  599:      return 8;
        -:  600:    case copper:
    #####:  601:      return 0;
        -:  602:    case silver:
    #####:  603:      return 3;
        -:  604:    case gold:
    #####:  605:      return 6;
        -:  606:    case adventurer:
    #####:  607:      return 6;
        -:  608:    case council_room:
    #####:  609:      return 5;
        -:  610:    case feast:
    #####:  611:      return 4;
        -:  612:    case gardens:
    #####:  613:      return 4;
        -:  614:    case mine:
    #####:  615:      return 5;
        -:  616:    case remodel:
    #####:  617:      return 4;
        -:  618:    case smithy:
    #####:  619:      return 4;
        -:  620:    case village:
    #####:  621:      return 3;
        -:  622:    case baron:
    #####:  623:      return 4;
        -:  624:    case great_hall:
    #####:  625:      return 3;
        -:  626:    case minion:
    #####:  627:      return 5;
        -:  628:    case steward:
    #####:  629:      return 3;
        -:  630:    case tribute:
    #####:  631:      return 5;
        -:  632:    case ambassador:
    #####:  633:      return 3;
        -:  634:    case cutpurse:
    #####:  635:      return 4;
        -:  636:    case embargo: 
    #####:  637:      return 2;
        -:  638:    case outpost:
    #####:  639:      return 5;
        -:  640:    case salvager:
    #####:  641:      return 4;
        -:  642:    case sea_hag:
    #####:  643:      return 4;
        -:  644:    case treasure_map:
    #####:  645:      return 4;
        -:  646:    }
        -:  647:	
    #####:  648:  return -1;
    #####:  649:}
        -:  650:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  651:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  652:{
        -:  653:  int i;
        -:  654:  int j;
        -:  655:  int k;
        -:  656:  int x;
        -:  657:  int index;
    #####:  658:  int currentPlayer = whoseTurn(state);
    #####:  659:  int nextPlayer = currentPlayer + 1;
        -:  660:
    #####:  661:  int tributeRevealedCards[2] = {-1, -1};
        -:  662:  int temphand[MAX_HAND];// moved above the if statement
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  664:    nextPlayer = 0;
    #####:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
    #####:  669:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:      return playAdventurer(state, currentPlayer);
        -:  673:
        -:  674:      /*while(drawntreasure<2){
        -:  675:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  676:	  shuffle(currentPlayer, state);
        -:  677:	}
        -:  678:	drawCard(currentPlayer, state);
        -:  679:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  680:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  681:	  drawntreasure++;
        -:  682:	else{
        -:  683:	  temphand[z]=cardDrawn;
        -:  684:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  685:	  z++;
        -:  686:	}
        -:  687:      }
        -:  688:      while(z-1>=0){
        -:  689:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  690:	z=z-1;
        -:  691:      }
        -:  692:      return 0;*/
        -:  693:			
        -:  694:    case council_room:
        -:  695:      //+4 Cards
    #####:  696:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  697:	{
    #####:  698:	  drawCard(currentPlayer, state);
    #####:  699:	}
        -:  700:			
        -:  701:      //+1 Buy
    #####:  702:      state->numBuys++;
        -:  703:			
        -:  704:      //Each other player draws a card
    #####:  705:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  706:	{
    #####:  707:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  708:	    {
    #####:  709:	      drawCard(i, state);
    #####:  710:	    }
    #####:  711:	}
        -:  712:			
        -:  713:      //put played card in played card pile
    #####:  714:      discardCard(handPos, currentPlayer, state, 0);
        -:  715:			
    #####:  716:      return 0;
        -:  717:			
        -:  718:    case feast:
        -:  719:      //gain card with cost up to 5
        -:  720:      //Backup hand
    #####:  721:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  722:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  723:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  724:      }
        -:  725:      //Backup hand
        -:  726:
        -:  727:      //Update Coins for Buy
    #####:  728:      updateCoins(currentPlayer, state, 5);
    #####:  729:      x = 1;//Condition to loop on
    #####:  730:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  731:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  732:	  if (DEBUG)
        -:  733:	    printf("None of that card left, sorry!\n");
        -:  734:
        -:  735:	  if (DEBUG){
        -:  736:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  737:	  }
    #####:  738:	}
    #####:  739:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  740:	  printf("That card is too expensive!\n");
        -:  741:
        -:  742:	  if (DEBUG){
        -:  743:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  744:	  }
    #####:  745:	}
        -:  746:	else{
        -:  747:
        -:  748:	  if (DEBUG){
        -:  749:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  750:	  }
        -:  751:
    #####:  752:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  753:	  x = 0;//No more buying cards
        -:  754:
        -:  755:	  if (DEBUG){
        -:  756:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  757:	  }
        -:  758:
        -:  759:	}
        -:  760:      }     
        -:  761:
        -:  762:      //Reset Hand
    #####:  763:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  764:	state->hand[currentPlayer][i] = temphand[i];
    #####:  765:	temphand[i] = -1;
    #####:  766:      }
        -:  767:      //Reset Hand
        -:  768:      			
    #####:  769:      return 0;
        -:  770:			
        -:  771:    case gardens:
    #####:  772:      return -1;
        -:  773:			
        -:  774:    case mine:
    #####:  775:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  776:
    #####:  777:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  778:	{
    #####:  779:	  return -1;
        -:  780:	}
        -:  781:		
    #####:  782:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:
    #####:  787:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      gainCard(choice2, state, 2, currentPlayer);
        -:  793:
        -:  794:      //discard card from hand
    #####:  795:      discardCard(handPos, currentPlayer, state, 0);
        -:  796:
        -:  797:      //discard trashed card
    #####:  798:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  799:	{
    #####:  800:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  801:	    {
    #####:  802:	      discardCard(i, currentPlayer, state, 0);			
    #####:  803:	      break;
        -:  804:	    }
    #####:  805:	}
        -:  806:			
    #####:  807:      return 0;
        -:  808:			
        -:  809:    case remodel:
    #####:  810:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  811:
    #####:  812:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  813:	{
    #####:  814:	  return -1;
        -:  815:	}
        -:  816:
    #####:  817:      gainCard(choice2, state, 0, currentPlayer);
        -:  818:
        -:  819:      //discard card from hand
    #####:  820:      discardCard(handPos, currentPlayer, state, 0);
        -:  821:
        -:  822:      //discard trashed card
    #####:  823:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  824:	{
    #####:  825:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  826:	    {
    #####:  827:	      discardCard(i, currentPlayer, state, 0);			
    #####:  828:	      break;
        -:  829:	    }
    #####:  830:	}
        -:  831:
        -:  832:
    #####:  833:      return 0;
        -:  834:		
        -:  835:    case smithy:
    #####:  836:      return playSmithy(currentPlayer, state, handPos);
        -:  837:      /*//+3 Cards
        -:  838:      for (i = 0; i < 3; i++)
        -:  839:	{
        -:  840:	  drawCard(currentPlayer, state);
        -:  841:	}
        -:  842:			
        -:  843:      //discard card from hand
        -:  844:      discardCard(handPos, currentPlayer, state, 0);
        -:  845:      return 0;*/
        -:  846:		
        -:  847:    case village:
    #####:  848:      return playVillage(currentPlayer, state, handPos);
        -:  849:      /*//+1 Card
        -:  850:      drawCard(currentPlayer, state);
        -:  851:			
        -:  852:      //+2 Actions
        -:  853:      state->numActions = state->numActions + 2;
        -:  854:			
        -:  855:      //discard played card from hand
        -:  856:      discardCard(handPos, currentPlayer, state, 0);
        -:  857:      return 0;*/
        -:  858:		
        -:  859:    case baron:
    #####:  860:      state->numBuys++;//Increase buys by 1!
    #####:  861:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  862:	int p = 0;//Iterator for hand!
    #####:  863:	int card_not_discarded = 1;//Flag for discard set!
    #####:  864:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  865:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  866:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  867:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  868:	    state->discardCount[currentPlayer]++;
    #####:  869:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  870:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  871:	    }
    #####:  872:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  873:	    state->handCount[currentPlayer]--;
    #####:  874:	    card_not_discarded = 0;//Exit the loop
    #####:  875:	  }
    #####:  876:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  877:	    if(DEBUG) {
        -:  878:	      printf("No estate cards in your hand, invalid choice\n");
        -:  879:	      printf("Must gain an estate if there are any\n");
        -:  880:	    }
    #####:  881:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  882:	      gainCard(estate, state, 0, currentPlayer);
    #####:  883:	      state->supplyCount[estate]--;//Decrement estates
    #####:  884:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  885:		isGameOver(state);
    #####:  886:	      }
    #####:  887:	    }
    #####:  888:	    card_not_discarded = 0;//Exit the loop
    #####:  889:	  }
        -:  890:			    
        -:  891:	  else{
    #####:  892:	    p++;//Next card
        -:  893:	  }
        -:  894:	}
    #####:  895:      }
        -:  896:			    
        -:  897:      else{
    #####:  898:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  899:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  900:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  901:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  902:	    isGameOver(state);
    #####:  903:	  }
    #####:  904:	}
        -:  905:      }
        -:  906:	    
        -:  907:      
    #####:  908:      return 0;
        -:  909:		
        -:  910:    case great_hall:
    #####:  911:      return playGreatHall(currentPlayer, state, handPos);
        -:  912:      /*//+1 Card
        -:  913:      drawCard(currentPlayer, state);
        -:  914:			
        -:  915:      //+1 Actions
        -:  916:      state->numActions++;
        -:  917:			
        -:  918:      //discard card from hand
        -:  919:      discardCard(handPos, currentPlayer, state, 0);
        -:  920:      return 0;*/
        -:  921:		
        -:  922:    case minion:
        -:  923:      //+1 action
    #####:  924:      state->numActions++;
        -:  925:			
        -:  926:      //discard card from hand
    #####:  927:      discardCard(handPos, currentPlayer, state, 0);
        -:  928:			
    #####:  929:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  930:	{
    #####:  931:	  state->coins = state->coins + 2;
    #####:  932:	}
        -:  933:			
    #####:  934:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  935:	{
        -:  936:	  //discard hand
    #####:  937:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  938:	    {
    #####:  939:	      discardCard(handPos, currentPlayer, state, 0);
        -:  940:	    }
        -:  941:				
        -:  942:	  //draw 4
    #####:  943:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  944:	    {
    #####:  945:	      drawCard(currentPlayer, state);
    #####:  946:	    }
        -:  947:				
        -:  948:	  //other players discard hand and redraw if hand size > 4
    #####:  949:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  950:	    {
    #####:  951:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  952:		{
    #####:  953:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  954:		    {
        -:  955:		      //discard hand
    #####:  956:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  957:			{
    #####:  958:			  discardCard(handPos, i, state, 0);
        -:  959:			}
        -:  960:							
        -:  961:		      //draw 4
    #####:  962:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  963:			{
    #####:  964:			  drawCard(i, state);
    #####:  965:			}
    #####:  966:		    }
    #####:  967:		}
    #####:  968:	    }
        -:  969:				
    #####:  970:	}
    #####:  971:      return 0;
        -:  972:		
        -:  973:    case steward:
    #####:  974:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  975:	{
        -:  976:	  //+2 cards
    #####:  977:	  drawCard(currentPlayer, state);
    #####:  978:	  drawCard(currentPlayer, state);
    #####:  979:	}
    #####:  980:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  981:	{
        -:  982:	  //+2 coins
    #####:  983:	  state->coins = state->coins + 2;
    #####:  984:	}
        -:  985:      else
        -:  986:	{
        -:  987:	  //trash 2 cards in hand
    #####:  988:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  989:	  discardCard(choice3, currentPlayer, state, 1);
        -:  990:	}
        -:  991:			
        -:  992:      //discard card from hand
    #####:  993:      discardCard(handPos, currentPlayer, state, 0);
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case tribute:
    #####:  997:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  998:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  999:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1000:	  state->deckCount[nextPlayer]--;
    #####: 1001:	}
    #####: 1002:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1003:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1004:	  state->discardCount[nextPlayer]--;
    #####: 1005:	}
        -: 1006:	else{
        -: 1007:	  //No Card to Reveal
        -: 1008:	  if (DEBUG){
        -: 1009:	    printf("No cards to reveal\n");
        -: 1010:	  }
        -: 1011:	}
    #####: 1012:      }
        -: 1013:	    
        -: 1014:      else{
    #####: 1015:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1016:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1017:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1018:	    state->deckCount[nextPlayer]++;
    #####: 1019:	    state->discard[nextPlayer][i] = -1;
    #####: 1020:	    state->discardCount[nextPlayer]--;
    #####: 1021:	  }
        -: 1022:			    
    #####: 1023:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1024:	} 
    #####: 1025:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1026:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1027:	state->deckCount[nextPlayer]--;
    #####: 1028:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1029:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1030:	state->deckCount[nextPlayer]--;
        -: 1031:      }    
        -: 1032:		       
    #####: 1033:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1034:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1035:	state->playedCardCount++;
    #####: 1036:	tributeRevealedCards[1] = -1;
    #####: 1037:      }
        -: 1038:
    #####: 1039:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1040:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1041:	  state->coins += 2;
    #####: 1042:	}
        -: 1043:		    
    #####: 1044:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1045:	  drawCard(currentPlayer, state);
    #####: 1046:	  drawCard(currentPlayer, state);
    #####: 1047:	}
        -: 1048:	else{//Action Card
    #####: 1049:	  state->numActions = state->numActions + 2;
        -: 1050:	}
    #####: 1051:      }
        -: 1052:	    
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case ambassador:
    #####: 1056:      j = 0;		//used to check if player has enough cards to discard
        -: 1057:
    #####: 1058:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1059:	{
    #####: 1060:	  return -1;				
        -: 1061:	}
        -: 1062:
    #####: 1063:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1064:	{
    #####: 1065:	  return -1;
        -: 1066:	}
        -: 1067:
    #####: 1068:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
    #####: 1070:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1071:	    {
    #####: 1072:	      j++;
    #####: 1073:	    }
    #####: 1074:	}
    #####: 1075:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1076:	{
    #####: 1077:	  return -1;				
        -: 1078:	}
        -: 1079:
        -: 1080:      if (DEBUG) 
        -: 1081:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1082:
        -: 1083:      //increase supply count for choosen card by amount being discarded
    #####: 1084:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1085:			
        -: 1086:      //each other player gains a copy of revealed card
    #####: 1087:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1088:	{
    #####: 1089:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1090:	    {
    #####: 1091:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1092:	    }
    #####: 1093:	}
        -: 1094:
        -: 1095:      //discard played card from hand
    #####: 1096:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1097:
        -: 1098:      //trash copies of cards returned to supply
    #####: 1099:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1100:	{
    #####: 1101:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1102:	    {
    #####: 1103:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1104:		{
    #####: 1105:		  discardCard(i, currentPlayer, state, 1);
    #####: 1106:		  break;
        -: 1107:		}
    #####: 1108:	    }
    #####: 1109:	}			
        -: 1110:
    #####: 1111:      return 0;
        -: 1112:		
        -: 1113:    case cutpurse:
        -: 1114:
    #####: 1115:      updateCoins(currentPlayer, state, 2);
    #####: 1116:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
    #####: 1118:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1119:	    {
    #####: 1120:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1121:		{
    #####: 1122:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1123:		    {
    #####: 1124:		      discardCard(j, i, state, 0);
    #####: 1125:		      break;
        -: 1126:		    }
    #####: 1127:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1128:		    {
    #####: 1129:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1130:			{
        -: 1131:			  if (DEBUG)
        -: 1132:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1133:			}	
    #####: 1134:		      break;
        -: 1135:		    }		
    #####: 1136:		}
        -: 1137:					
    #####: 1138:	    }
        -: 1139:				
    #####: 1140:	}				
        -: 1141:
        -: 1142:      //discard played card from hand
    #####: 1143:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1144:
    #####: 1145:      return 0;
        -: 1146:
        -: 1147:		
        -: 1148:    case embargo: 
        -: 1149:      //+2 Coins
    #####: 1150:      state->coins = state->coins + 2;
        -: 1151:			
        -: 1152:      //see if selected pile is in play
    #####: 1153:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1154:	{
    #####: 1155:	  return -1;
        -: 1156:	}
        -: 1157:			
        -: 1158:      //add embargo token to selected supply pile
    #####: 1159:      state->embargoTokens[choice1]++;
        -: 1160:			
        -: 1161:      //trash card
    #####: 1162:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1163:      return 0;
        -: 1164:		
        -: 1165:    case outpost:
        -: 1166:      //set outpost flag
    #####: 1167:      state->outpostPlayed++;
        -: 1168:			
        -: 1169:      //discard card
    #####: 1170:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1171:      return 0;
        -: 1172:		
        -: 1173:    case salvager:
        -: 1174:      //+1 buy
    #####: 1175:      state->numBuys++;
        -: 1176:			
    #####: 1177:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1178:        	{
        -: 1179:            //gain coins equal to trashed card
    #####: 1180:        	  state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1181:        	  //trash card
    #####: 1182:        	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1183:        	}
        -: 1184:        			
        -: 1185:      //discard card
    #####: 1186:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1187:      return 0;
        -: 1188:		
        -: 1189:    case sea_hag:
    #####: 1190:      return playSeaHag(currentPlayer, state);
        -: 1191:      /*for (i = 0; i < state->numPlayers+1; i++){ //INCORRECT - SHOULD BE i < state->numPlayers. THIS IS A BUG
        -: 1192:	if (i != currentPlayer){
        -: 1193:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        -: 1194:	  state->discardCount[i]++;
        -: 1195:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1196:	}
        -: 1197:      }
        -: 1198:      return 0;*/
        -: 1199:		
        -: 1200:    case treasure_map:
        -: 1201:      //search hand for another treasure_map
    #####: 1202:      index = -1;
    #####: 1203:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1204:	{
    #####: 1205:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1206:	    {
    #####: 1207:	      index = i;
    #####: 1208:	      break;
        -: 1209:	    }
    #####: 1210:	}
    #####: 1211:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1212:	{
        -: 1213:	  //trash both treasure cards
    #####: 1214:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1215:	  discardCard(index, currentPlayer, state, 1);
        -: 1216:
        -: 1217:	  //gain 4 Gold cards
    #####: 1218:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1219:	    {
    #####: 1220:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1221:	    }
        -: 1222:				
        -: 1223:	  //return success
    #####: 1224:	  return 1;
        -: 1225:	}
        -: 1226:			
        -: 1227:      //no second treasure_map found in hand
    #####: 1228:      return -1;
        -: 1229:    }
        -: 1230:	
    #####: 1231:  return -1;
    #####: 1232:}
        -: 1233:
        -: 1234:/*int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -: 1235:{
        -: 1236:  int i;
        -: 1237:  int j;
        -: 1238:  int k;
        -: 1239:  int x;
        -: 1240:  int index;
        -: 1241:  int currentPlayer = whoseTurn(state);
        -: 1242:  int nextPlayer = currentPlayer + 1;
        -: 1243:
        -: 1244:  //int tributeRevealedCards[2] = {-1, -1};
        -: 1245:  int temphand[MAX_HAND];// moved above the if statement
        -: 1246:  int drawntreasure=0;
        -: 1247:  //int cardDrawn;
        -: 1248:  int z = 0;// this is the counter for the temp hand
        -: 1249:  if (nextPlayer > (state->numPlayers - 1)){
        -: 1250:    nextPlayer = 0;
        -: 1251:  }
        -: 1252:  
        -: 1253:	
        -: 1254:  //uses switch to select card and perform actions
        -: 1255:  switch( card ) 
        -: 1256:    {
        -: 1257:    case adventurer: 
        -: 1258:	      return playAdventurer(&drawntreasure, state, currentPlayer, temphand, &z);
        -: 1259:			
        -: 1260:    case council_room:
        -: 1261:	     return playCouncilRoom(currentPlayer, state, handPos);
        -: 1262:			
        -: 1263:    case feast: //PASS int currentPlayer, struct* gameState state int temphand[], int choice1
        -: 1264:	     return playFeast(currentPlayer, state, temphand, handPos);
        -: 1265:			
        -: 1266:    case gardens:
        -: 1267:      	return playGardens();
        -: 1268:			
        -: 1269:    case mine: //PASS int currentPlayer, struct* gameState state, int choice1, int choice2, int handPos
        -: 1270:    	return playMine(currentPlayer, state, choice1, choice2, handPos);
        -: 1271:			
        -: 1272:    case remodel: // PASS int currentPlayer, struct* gameState state, int choice1, int choice2, int handPos	 
        -: 1273:    	return playRemodel(currentPlayer, state, choice1, choice2, handPos);  
        -: 1274:
        -: 1275:    case smithy: // PASS int currentPlayer, struct* gameState state, int handPos
        -: 1276:    	return playSmithy(currentPlayer, state, handPos);
        -: 1277:		
        -: 1278:    case village: // PASS int currentPlayer, struct gameState *state, int handPos
        -: 1279:    	return playVillage(currentPlayer, state, handPos);
        -: 1280:		
        -: 1281:    case baron: // int currentPlayer, struct gameState *state, int choice1
        -: 1282:    	return playBaron(currentPlayer, state, choice1);
        -: 1283:		
        -: 1284:    case great_hall:// int currentPlayer, struct gameState *state, int handPos 
        -: 1285:	    return playGreatHall(currentPlayer, state, handPos);
        -: 1286:		
        -: 1287:    case minion: // int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2
        -: 1288:    	return playMinion(currentPlayer, state, handPos, choice1, choice2);
        -: 1289:			
        -: 1290:    case steward: // int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3
        -: 1291:    	return playSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
        -: 1292:		
        -: 1293:    case tribute: // int currentPlayer, struct gameState *state, int nextPlayer
        -: 1294:    	return playTribute(currentPlayer, state, nextPlayer);
        -: 1295:		
        -: 1296:    case ambassador: // int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos
        -: 1297:	    return playAmbassador(currentPlayer, state, choice1, choice2, handPos);
        -: 1298:		
        -: 1299:    case cutpurse: // int currentPlayer, struct gameState *state, int handPos
        -: 1300:    	return playCutpurse(currentPlayer, state, handPos);
        -: 1301:		
        -: 1302:    case embargo: // int currentPlayer, struct gameState *state, int handPos, int choice1
        -: 1303:    	return playEmbargo(currentPlayer, state, handPos, choice1);
        -: 1304:		
        -: 1305:    case outpost: // int currentPlayer, struct gameState *state, int handPos
        -: 1306:    	return playOutpost(currentPlayer, state, handPos);
        -: 1307:
        -: 1308:    case salvager: // int currentPlayer, struct gameState *state, int handPos, int choice1
        -: 1309:    	return playSalvager(currentPlayer, state, handPos, choice1);
        -: 1310:		
        -: 1311:    case sea_hag: // int currentPlayer, struct gameState *state
        -: 1312:    	return playSeaHag(currentPlayer, state);
        -: 1313:		
        -: 1314:    case treasure_map: // int currentPlayer, struct gameState *state, int handPos
        -: 1315:    	return playTreasureMap(currentPlayer, state, handPos);
        -: 1316:
        -: 1317:	    }
        -: 1318:	
        -: 1319:  return -1;
        -: 1320:}*/
        -: 1321:
function discardCard called 5 returned 100% blocks executed 80%
        -: 1322:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1323:{
        -: 1324:	
        -: 1325:  //if card is not trashed, added to Played pile 
        5: 1326:  if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1327:    {
        -: 1328:      //add card to played pile
        5: 1329:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        5: 1330:      state->playedCardCount++;
        5: 1331:    }
        -: 1332:	
        -: 1333:  //set played card to -1
        5: 1334:  state->hand[currentPlayer][handPos] = -1;
        -: 1335:	
        -: 1336:  //remove card from player's hand
        -: 1337:  
        5: 1338:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1339:    {
        -: 1340:      //reduce number of cards in hand
    #####: 1341:      state->handCount[currentPlayer]--;
    #####: 1342:    }
        5: 1343:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1344:    {
        -: 1345:      //reduce number of cards in hand
    #####: 1346:      state->handCount[currentPlayer]--;
    #####: 1347:    }
        -: 1348:  else 	
        -: 1349:    {
        -: 1350:      //replace discarded card with last card in hand
        5: 1351:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1352:      //set last card to -1
        5: 1353:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1354:      //reduce number of cards in hand
        5: 1355:      state->handCount[currentPlayer]--;
        -: 1356:    }
        -: 1357:	
        5: 1358:  return 0;
        -: 1359:}
        -: 1360:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1361:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1362:{
        -: 1363:  //Note: supplyPos is enum of choosen card
        -: 1364:	
        -: 1365:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1366:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1367:    {
    #####: 1368:      return -1;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //added card for [whoseTurn] current player:
        -: 1372:  // toFlag = 0 : add to discard
        -: 1373:  // toFlag = 1 : add to deck
        -: 1374:  // toFlag = 2 : add to hand
        -: 1375:
    #####: 1376:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1377:    {
    #####: 1378:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1379:      state->deckCount[player]++;
    #####: 1380:    }
    #####: 1381:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1382:    {
    #####: 1383:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1384:      state->handCount[player]++;
    #####: 1385:    }
        -: 1386:  else
        -: 1387:    {
    #####: 1388:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1389:      state->discardCount[player]++;
        -: 1390:    }
        -: 1391:	
        -: 1392:  //decrease number in supply pile
    #####: 1393:  state->supplyCount[supplyPos]--;
        -: 1394:	 
    #####: 1395:  return 0;
    #####: 1396:}
        -: 1397:
function updateCoins called 1 returned 100% blocks executed 85%
        -: 1398:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1399:{
        -: 1400:  int i;
        -: 1401:	
        -: 1402:  //reset coin count
        1: 1403:  state->coins = 0;
        -: 1404:
        -: 1405:  //add coins for each Treasure card in player's hand
       12: 1406:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1407:    {
        5: 1408:      if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1409:	{
        4: 1410:	  state->coins += 1;
        4: 1411:	}
        1: 1412:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1413:	{
    #####: 1414:	  state->coins += 2;
    #####: 1415:	}
        1: 1416:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1417:	{
    #####: 1418:	  state->coins += 3;
    #####: 1419:	}	
        5: 1420:    }	
        -: 1421:
        -: 1422:  //add bonus
        1: 1423:  state->coins += bonus;
        -: 1424:
        1: 1425:  return 0;
        -: 1426:}
        -: 1427:
        -: 1428:/************************************************************/
        -: 1429:/************************************************************/
        -: 1430:/************************************************************/
        -: 1431://new functions 4-12-17
        -: 1432:
function playAdventurer called 0 returned 0% blocks executed 0%
        -: 1433:int playAdventurer(struct gameState *state, int currentPlayer)
        -: 1434:{
        -: 1435:	int cardDrawn;
    #####: 1436:	int z = 0;
    #####: 1437:	int drawntreasure = 0;
        -: 1438:	int temphand[MAX_HAND];
        -: 1439:
    #####: 1440:	while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
        -: 1441:		
    #####: 1442:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1443:		  shuffle(currentPlayer, state);
    #####: 1444:		}
        -: 1445:		
    #####: 1446:    drawCard(currentPlayer, state);
    #####: 1447:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card. CORRECT
        -: 1448:		//cardDrawn = state->hand[currentPlayer][0]; //INCORRECT - this is a bug. cardDrawn should be last element in the hand, not first
        -: 1449:		
    #####: 1450:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1451:		  drawntreasure++;
    #####: 1452:    }
        -: 1453:		
        -: 1454:    else{
    #####: 1455:		  temphand[z]=cardDrawn;
    #####: 1456:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1457:		  z++;
        -: 1458:		}
        -: 1459:	}
        -: 1460:	 
    #####: 1461:  while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1462:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1463:		z=z-1;
        -: 1464:	 }
        -: 1465:	
    #####: 1466:  return 0;
        -: 1467:}
        -: 1468:
        -: 1469:/*int playCouncilRoom(int currentPlayer, struct gameState *state, int handPos)
        -: 1470:{
        -: 1471:	int i;	
        -: 1472:	//+4 Cards
        -: 1473:      for (i = 0; i < 4; i++)
        -: 1474:	{
        -: 1475:	  drawCard(currentPlayer, state);
        -: 1476:	}
        -: 1477:			
        -: 1478:      //+1 Buy
        -: 1479:      state->numBuys++;
        -: 1480:			
        -: 1481:      //Each other player draws a card
        -: 1482:      for (i = 0; i < state->numPlayers; i++)
        -: 1483:		{
        -: 1484:		  if ( i != currentPlayer )
        -: 1485:		    {
        -: 1486:		      drawCard(i, state);
        -: 1487:		    }
        -: 1488:		}
        -: 1489:				
        -: 1490:      //put played card in played card pile
        -: 1491:      discardCard(handPos, currentPlayer, state, 0);
        -: 1492:			
        -: 1493:      return 0;
        -: 1494:}*/
        -: 1495:
        -: 1496:/*int playFeast(int currentPlayer, struct gameState *state, int temphand[], int choice1)
        -: 1497:{
        -: 1498:	 //gain card with cost up to 5
        -: 1499:      //Backup hand
        -: 1500:	int i, x;
        -: 1501:
        -: 1502:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -: 1503:	temphand[i] = state->hand[currentPlayer][i];//Backup card
        -: 1504:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1505:      }
        -: 1506:      //Backup hand
        -: 1507:
        -: 1508:      //Update Coins for Buy
        -: 1509:      updateCoins(currentPlayer, state, 5);
        -: 1510:      x = 1;//Condition to loop on
        -: 1511:      while( x == 1) {//Buy one card
        -: 1512:	if (supplyCount(choice1, state) <= 0){
        -: 1513:	  if (DEBUG)
        -: 1514:	    printf("None of that card left, sorry!\n");
        -: 1515:
        -: 1516:	  if (DEBUG){
        -: 1517:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1518:	  }
        -: 1519:	}
        -: 1520:	else if (state->coins < getCost(choice1)){
        -: 1521:	  printf("That card is too expensive!\n");
        -: 1522:
        -: 1523:	  if (DEBUG){
        -: 1524:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1525:	  }
        -: 1526:	}
        -: 1527:	else{
        -: 1528:
        -: 1529:	  if (DEBUG){
        -: 1530:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1531:	  }
        -: 1532:
        -: 1533:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        -: 1534:	  x = 0;//No more buying cards
        -: 1535:
        -: 1536:	  if (DEBUG){
        -: 1537:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1538:	  }
        -: 1539:
        -: 1540:	}
        -: 1541:      }     
        -: 1542:
        -: 1543:      //Reset Hand
        -: 1544:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -: 1545:	state->hand[currentPlayer][i] = temphand[i];
        -: 1546:	temphand[i] = -1;
        -: 1547:      }
        -: 1548:      //Reset Hand
        -: 1549:      			
        -: 1550:      return 0;
        -: 1551:}*/
        -: 1552:
        -: 1553:/*int playGardens()
        -: 1554:{
        -: 1555:	return -1;
        -: 1556:}*/
        -: 1557:/*
        -: 1558: int playMine(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) 
        -: 1559: {
        -: 1560:     int i, j;
        -: 1561:
        -: 1562:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1563:
        -: 1564:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -: 1565:	{
        -: 1566:	  return -1;
        -: 1567:	}
        -: 1568:		
        -: 1569:      if (choice2 > treasure_map || choice2 < curse)
        -: 1570:	{
        -: 1571:	  return -1;
        -: 1572:	}
        -: 1573:
        -: 1574:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -: 1575:	{
        -: 1576:	  return -1;
        -: 1577:	}
        -: 1578:
        -: 1579:      gainCard(choice2, state, 2, currentPlayer);
        -: 1580:
        -: 1581:      //discard card from hand
        -: 1582:      discardCard(handPos, currentPlayer, state, 0);
        -: 1583:
        -: 1584:      //discard trashed card
        -: 1585:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1586:	{
        -: 1587:	  if (state->hand[currentPlayer][i] == j)
        -: 1588:	    {
        -: 1589:	      discardCard(i, currentPlayer, state, 0);			
        -: 1590:	      break;
        -: 1591:	    }
        -: 1592:	}
        -: 1593:			
        -: 1594:      return 0;
        -: 1595:}*/
        -: 1596:
        -: 1597:/*int playRemodel(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos)
        -: 1598:{
        -: 1599:     int i, j; 
        -: 1600:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1601:
        -: 1602:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1603:	{
        -: 1604:	  return -1;
        -: 1605:	}
        -: 1606:
        -: 1607:      gainCard(choice2, state, 0, currentPlayer);
        -: 1608:
        -: 1609:      //discard card from hand
        -: 1610:      discardCard(handPos, currentPlayer, state, 0);
        -: 1611:
        -: 1612:      //discard trashed card
        -: 1613:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1614:	{
        -: 1615:	  if (state->hand[currentPlayer][i] == j)
        -: 1616:	    {
        -: 1617:	      discardCard(i, currentPlayer, state, 0);			
        -: 1618:	      break;
        -: 1619:	    }
        -: 1620:	}
        -: 1621:
        -: 1622:
        -: 1623:      return 0;
        -: 1624:  }*/
        -: 1625:
function playSmithy called 5 returned 100% blocks executed 100%
        -: 1626:int playSmithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1627:{
        -: 1628:      //+3 Cards
        -: 1629:	int i;
       50: 1630:      for (i = 0; i <= 3; i++) //INCORRECT, THIS IS A BUG. SHOULD BE i < 3 not i <= 3.
branch  0 taken 80%
branch  1 taken 20%
        -: 1631:    	{
       20: 1632:    	  drawCard(currentPlayer, state);
       20: 1633:    	}
        -: 1634:			
        -: 1635:      //discard card from hand
        5: 1636:      discardCard(handPos, currentPlayer, state, 0);
        5: 1637:      return 0;
        -: 1638:}
        -: 1639:
function playVillage called 0 returned 0% blocks executed 0%
        -: 1640: int playVillage(int currentPlayer, struct gameState *state, int handPos)
        -: 1641: {
        -: 1642:      //+1 Card
    #####: 1643:      drawCard(currentPlayer, state);
        -: 1644:			
        -: 1645:      //+2 Actions
        -: 1646:      //state->numActions = state->numActions + 2;
    #####: 1647:      state->numActions = 2; //	INCORRECT - THIS IS A BUG. This resets numActions to 2 rather than adding 2 to it
        -: 1648:			
        -: 1649:      //discard played card from hand
    #####: 1650:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1651:      return 0;
        -: 1652:}
        -: 1653:
        -: 1654: /*int playBaron(int currentPlayer, struct gameState *state, int choice1)
        -: 1655: {
        -: 1656:      state->numBuys++;//Increase buys by 1!
        -: 1657:      if (choice1 > 0){//Boolean true or going to discard an estate
        -: 1658:	int p = 0;//Iterator for hand!
        -: 1659:	int card_not_discarded = 1;//Flag for discard set!
        -: 1660:	
        -: 1661:	while(card_not_discarded){
        -: 1662:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
        -: 1663:	    state->coins += 4;//Add 4 coins to the amount of coins
        -: 1664:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        -: 1665:	    state->discardCount[currentPlayer]++;
        -: 1666:	    
        -: 1667:	    for (;p < state->handCount[currentPlayer]; p++){
        -: 1668:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1669:	    }
        -: 1670:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        -: 1671:	    state->handCount[currentPlayer]--;
        -: 1672:	    card_not_discarded = 0;//Exit the loop
        -: 1673:	  }
        -: 1674:	 
        -: 1675:	  else if (p > state->handCount[currentPlayer]){
        -: 1676:	    if(DEBUG) {
        -: 1677:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1678:	      printf("Must gain an estate if there are any\n");
        -: 1679:	    }
        -: 1680:	    if (supplyCount(estate, state) > 0){
        -: 1681:	      gainCard(estate, state, 0, currentPlayer);
        -: 1682:	      state->supplyCount[estate]--;//Decrement estates
        -: 1683:	      if (supplyCount(estate, state) == 0){
        -: 1684:		isGameOver(state);
        -: 1685:	      }
        -: 1686:	    }
        -: 1687:	    card_not_discarded = 0;//Exit the loop
        -: 1688:	  }
        -: 1689:			    
        -: 1690:	  else{
        -: 1691:	    p++;//Next card
        -: 1692:	  }
        -: 1693:	}
        -: 1694:      }
        -: 1695:			    
        -: 1696:      else{
        -: 1697:	if (supplyCount(estate, state) > 0){
        -: 1698:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -: 1699:	  state->supplyCount[estate]--;//Decrement Estates
        -: 1700:	  if (supplyCount(estate, state) == 0){
        -: 1701:	    isGameOver(state);
        -: 1702:	  }
        -: 1703:	}
        -: 1704:      }
        -: 1705:	    
        -: 1706:      
        -: 1707:      return 0;
        -: 1708:  }*/
        -: 1709:
function playGreatHall called 0 returned 0% blocks executed 0%
        -: 1710:int playGreatHall(int currentPlayer, struct gameState *state, int handPos)
        -: 1711:{
        -: 1712:  //+1 Card
    #####: 1713:  drawCard(currentPlayer, state);
        -: 1714:		
        -: 1715:  //+1 Actions
    #####: 1716:  state->numActions++;
        -: 1717:		
        -: 1718:  //discard card from hand
    #####: 1719:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1720:  return 0;
        -: 1721:}
        -: 1722:
        -: 1723:/*int playMinion(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2)
        -: 1724:{
        -: 1725:  int i, j; 
        -: 1726: 
        -: 1727:  //+1 action
        -: 1728:  state->numActions++;
        -: 1729:		
        -: 1730:  //discard card from hand
        -: 1731:  discardCard(handPos, currentPlayer, state, 0);
        -: 1732:		
        -: 1733:  if (choice1)		//+2 coins
        -: 1734:{
        -: 1735:  state->coins = state->coins + 2;
        -: 1736:}
        -: 1737:		
        -: 1738:  else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1739:{
        -: 1740:  //discard hand
        -: 1741:  while(numHandCards(state) > 0)
        -: 1742:    {
        -: 1743:      discardCard(handPos, currentPlayer, state, 0);
        -: 1744:    }
        -: 1745:			
        -: 1746:  //draw 4
        -: 1747:  for (i = 0; i < 4; i++)
        -: 1748:    {
        -: 1749:      drawCard(currentPlayer, state);
        -: 1750:    }
        -: 1751:			
        -: 1752:  //other players discard hand and redraw if hand size > 4
        -: 1753:  for (i = 0; i < state->numPlayers; i++)
        -: 1754:    {
        -: 1755:      if (i != currentPlayer)
        -: 1756:	{
        -: 1757:	  if ( state->handCount[i] > 4 )
        -: 1758:	    {
        -: 1759:	      //discard hand
        -: 1760:	      while( state->handCount[i] > 0 )
        -: 1761:		{
        -: 1762:		  discardCard(handPos, i, state, 0);
        -: 1763:		}
        -: 1764:						
        -: 1765:	      //draw 4
        -: 1766:	      for (j = 0; j < 4; j++)
        -: 1767:		{
        -: 1768:		  drawCard(i, state);
        -: 1769:		}
        -: 1770:	    }
        -: 1771:	}
        -: 1772:    }
        -: 1773:			
        -: 1774:	}
        -: 1775:  return 0;
        -: 1776:}*/
        -: 1777:
        -: 1778:/*int playSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3)
        -: 1779:{
        -: 1780:	if (choice1 == 1)
        -: 1781:	{
        -: 1782:	  //+2 cards
        -: 1783:	  drawCard(currentPlayer, state);
        -: 1784:	  drawCard(currentPlayer, state);
        -: 1785:	}
        -: 1786:      else if (choice1 == 2)
        -: 1787:	{
        -: 1788:	  //+2 coins
        -: 1789:	  state->coins = state->coins + 2;
        -: 1790:	}
        -: 1791:      else
        -: 1792:	{
        -: 1793:	  //trash 2 cards in hand
        -: 1794:	  discardCard(choice2, currentPlayer, state, 1);
        -: 1795:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1796:	}
        -: 1797:			
        -: 1798:      //discard card from hand
        -: 1799:      discardCard(handPos, currentPlayer, state, 0);
        -: 1800:      return 0;
        -: 1801:}*/
        -: 1802:
        -: 1803:/*int playTribute(int currentPlayer, struct gameState *state, int nextPlayer)
        -: 1804:{  
        -: 1805:	int i; 
        -: 1806:	int tributeRevealedCards[2] = {-1, -1};
        -: 1807:
        -: 1808:	  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
        -: 1809:	if (state->deckCount[nextPlayer] > 0){
        -: 1810:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1811:	  state->deckCount[nextPlayer]--;
        -: 1812:	}
        -: 1813:	else if (state->discardCount[nextPlayer] > 0){
        -: 1814:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
        -: 1815:	  state->discardCount[nextPlayer]--;
        -: 1816:	}
        -: 1817:	else{
        -: 1818:	  //No Card to Reveal
        -: 1819:	  if (DEBUG){
        -: 1820:	    printf("No cards to reveal\n");
        -: 1821:	  }
        -: 1822:	}
        -: 1823:	  }
        -: 1824:	    
        -: 1825:	  else{
        -: 1826:	if (state->deckCount[nextPlayer] == 0){
        -: 1827:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
        -: 1828:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
        -: 1829:	    state->deckCount[nextPlayer]++;
        -: 1830:	    state->discard[nextPlayer][i] = -1;
        -: 1831:	    state->discardCount[nextPlayer]--;
        -: 1832:	  }
        -: 1833:			    
        -: 1834:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1835:	} 
        -: 1836:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1837:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1838:	state->deckCount[nextPlayer]--;
        -: 1839:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1840:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1841:	state->deckCount[nextPlayer]--;
        -: 1842:	  }    
        -: 1843:		       
        -: 1844:	  if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
        -: 1845:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        -: 1846:	state->playedCardCount++;
        -: 1847:	tributeRevealedCards[1] = -1;
        -: 1848:	  }
        -: 1849:
        -: 1850:	  for (i = 0; i <= 2; i ++){
        -: 1851:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
        -: 1852:	  state->coins += 2;
        -: 1853:	}
        -: 1854:		    
        -: 1855:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
        -: 1856:	  drawCard(currentPlayer, state);
        -: 1857:	  drawCard(currentPlayer, state);
        -: 1858:	}
        -: 1859:	else{//Action Card
        -: 1860:	  state->numActions = state->numActions + 2;
        -: 1861:	}
        -: 1862:	  }
        -: 1863:	    
        -: 1864:	  return 0;
        -: 1865:}*/
        -: 1866:
        -: 1867:/*int playAmbassador(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos)
        -: 1868:{ 
        -: 1869:	int i;
        -: 1870:    int j = 0;		//used to check if player has enough cards to discard
        -: 1871:
        -: 1872:      if (choice2 > 2 || choice2 < 0)
        -: 1873:	{
        -: 1874:	  return -1;				
        -: 1875:	}
        -: 1876:
        -: 1877:      if (choice1 == handPos)
        -: 1878:	{
        -: 1879:	  return -1;
        -: 1880:	}
        -: 1881:
        -: 1882:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1883:	{
        -: 1884:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1885:	    {
        -: 1886:	      j++;
        -: 1887:	    }
        -: 1888:	}
        -: 1889:      if (j < choice2)
        -: 1890:	{
        -: 1891:	  return -1;				
        -: 1892:	}
        -: 1893:
        -: 1894:      if (DEBUG) 
        -: 1895:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1896:
        -: 1897:      //increase supply count for choosen card by amount being discarded
        -: 1898:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1899:			
        -: 1900:      //each other player gains a copy of revealed card
        -: 1901:      for (i = 0; i < state->numPlayers; i++)
        -: 1902:	{
        -: 1903:	  if (i != currentPlayer)
        -: 1904:	    {
        -: 1905:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1906:	    }
        -: 1907:	}
        -: 1908:
        -: 1909:      //discard played card from hand
        -: 1910:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1911:
        -: 1912:      //trash copies of cards returned to supply
        -: 1913:      for (j = 0; j < choice2; j++)
        -: 1914:	{
        -: 1915:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1916:	    {
        -: 1917:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1918:		{
        -: 1919:		  discardCard(i, currentPlayer, state, 1);
        -: 1920:		  break;
        -: 1921:		}
        -: 1922:	    }
        -: 1923:	}			
        -: 1924:
        -: 1925:      return 0;
        -: 1926:}*/
        -: 1927:
        -: 1928:/*int playCutpurse(int currentPlayer, struct gameState *state, int handPos)
        -: 1929:{	
        -: 1930:	int i, j, k;
        -: 1931:	  updateCoins(currentPlayer, state, 2);
        -: 1932:	  for (i = 0; i < state->numPlayers; i++)
        -: 1933:	{
        -: 1934:	  if (i != currentPlayer)
        -: 1935:	    {
        -: 1936:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1937:		{
        -: 1938:		  if (state->hand[i][j] == copper)
        -: 1939:		    {
        -: 1940:		      discardCard(j, i, state, 0);
        -: 1941:		      break;
        -: 1942:		    }
        -: 1943:		  if (j == state->handCount[i])
        -: 1944:		    {
        -: 1945:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1946:			{
        -: 1947:			  if (DEBUG)
        -: 1948:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1949:			}	
        -: 1950:		      break;
        -: 1951:		    }		
        -: 1952:		}
        -: 1953:					
        -: 1954:	    }
        -: 1955:				
        -: 1956:	}				
        -: 1957:
        -: 1958:  //discard played card from hand
        -: 1959:  discardCard(handPos, currentPlayer, state, 0);			
        -: 1960:
        -: 1961:  return 0;
        -: 1962:}*/
        -: 1963:
        -: 1964: /*int playEmbargo(int currentPlayer, struct gameState *state, int handPos, int choice1)
        -: 1965:{ 
        -: 1966: 	//+2 Coins
        -: 1967:     state->coins = state->coins + 2;
        -: 1968:			
        -: 1969:      //see if selected pile is in play
        -: 1970:      if ( state->supplyCount[choice1] == -1 )
        -: 1971:	{
        -: 1972:	  return -1;
        -: 1973:	}
        -: 1974:			
        -: 1975:      //add embargo token to selected supply pile
        -: 1976:      state->embargoTokens[choice1]++;
        -: 1977:			
        -: 1978:      //trash card
        -: 1979:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1980:      return 0;
        -: 1981: }*/
        -: 1982:
        -: 1983:/*int playOutpost(int currentPlayer, struct gameState *state, int handPos)
        -: 1984:{
        -: 1985: //set outpost flag
        -: 1986:  state->outpostPlayed++;
        -: 1987:		
        -: 1988:  //discard card
        -: 1989:  discardCard(handPos, currentPlayer, state, 0);
        -: 1990:  return 0;
        -: 1991:}*/
        -: 1992:
        -: 1993:/*int playSalvager(int currentPlayer, struct gameState *state, int handPos, int choice1)
        -: 1994:{
        -: 1995:	//+1 buy
        -: 1996:	  state->numBuys++;
        -: 1997:			
        -: 1998:	  if (choice1)
        -: 1999:	{
        -: 2000:	  //gain coins equal to trashed card
        -: 2001:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 2002:	  //trash card
        -: 2003:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 2004:	}
        -: 2005:			
        -: 2006:	  //discard card
        -: 2007:	  discardCard(handPos, currentPlayer, state, 0);
        -: 2008:	  return 0;
        -: 2009:}*/
        -: 2010:
function playSeaHag called 0 returned 0% blocks executed 0%
        -: 2011:int playSeaHag(int currentPlayer, struct gameState *state)
        -: 2012:{
        -: 2013:  	int i;
    #####: 2014:  	 for (i = 0; i < state->numPlayers+1; i++){ //INCORRECT - SHOULD BE i < state->numPlayers. THIS IS A BUG
branch  0 never executed
branch  1 never executed
    #####: 2015:		if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 2016:		  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
    #####: 2017:		  state->deckCount[i]--;
    #####: 2018:		  state->discardCount[i]++;
    #####: 2019:		  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 2020:		}
    #####: 2021:	  }
    #####: 2022:	return 0;
        -: 2023:}
        -: 2024:
        -: 2025:/*int playTreasureMap(int currentPlayer, struct gameState *state, int handPos)
        -: 2026:{
        -: 2027:	int i, index;
        -: 2028:      //search hand for another treasure_map
        -: 2029:      index = -1;
        -: 2030:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 2031:	{
        -: 2032:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 2033:	    {
        -: 2034:	      index = i;
        -: 2035:	      break;
        -: 2036:	    }
        -: 2037:	}
        -: 2038:      if (index > -1)
        -: 2039:	{
        -: 2040:	  //trash both treasure cards
        -: 2041:	  discardCard(handPos, currentPlayer, state, 1);
        -: 2042:	  discardCard(index, currentPlayer, state, 1);
        -: 2043:
        -: 2044:	  //gain 4 Gold cards
        -: 2045:	  for (i = 0; i < 4; i++)
        -: 2046:	    {
        -: 2047:	      gainCard(gold, state, 1, currentPlayer);
        -: 2048:	    }
        -: 2049:				
        -: 2050:	  //return success
        -: 2051:	  return 1;
        -: 2052:	}
        -: 2053:			
        -: 2054:      //no second treasure_map found in hand
        -: 2055:      return -1;
        -: 2056:}*/
        -: 2057:
        -: 2058://end of dominion.c
        -: 2059:
cardtest3.c
TESTING salvager card
TEST 1 handPos[1]: choice1 = curse in position 0
****TEST 1 handPos[0] SUCCESS****

TEST 2 handPos[1]: choice1 = estate in position 0
	TEST 2 handPos[0] FAILURE: coins: 4	expected: 6
*****TEST 2 handPos[0] FAILURE****

TEST 3 handPos[1]: choice1 = duchy in position 0
	TEST 3 handPos[0] FAILURE: coins: 4	expected: 9
*****TEST 3 handPos[0] FAILURE****

TEST 4 handPos[1]: choice1 = province in position 0
	TEST 4 handPos[0] FAILURE: coins: 4	expected: 12
*****TEST 4 handPos[0] FAILURE****

TEST 5 handPos[1]: choice1 = copper in position 0
****TEST 5 handPos[0] SUCCESS****

TEST 6 handPos[1]: choice1 = silver in position 0
	TEST 6 handPos[0] FAILURE: coins: 4	expected: 7
*****TEST 6 handPos[0] FAILURE****

TEST 7 handPos[1]: choice1 = gold in position 0
	TEST 7 handPos[0] FAILURE: coins: 4	expected: 10
*****TEST 7 handPos[0] FAILURE****

TEST 8 handPos[1]: choice1 = adventurer in position 0
	TEST 8 handPos[0] FAILURE: coins: 4	expected: 10
*****TEST 8 handPos[0] FAILURE****

TEST 9 handPos[1]: choice1 = council_room in position 0
	TEST 9 handPos[0] FAILURE: coins: 4	expected: 9
*****TEST 9 handPos[0] FAILURE****

TEST 10 handPos[1]: choice1 = feast in position 0
	TEST 10 handPos[0] FAILURE: coins: 4	expected: 8
*****TEST 10 handPos[0] FAILURE****

TEST 11 handPos[1]: choice1 = gardens in position 0
	TEST 11 handPos[0] FAILURE: coins: 4	expected: 8
*****TEST 11 handPos[0] FAILURE****

TEST 12 handPos[1]: choice1 = mine in position 0
	TEST 12 handPos[0] FAILURE: coins: 4	expected: 9
*****TEST 12 handPos[0] FAILURE****

TEST 13 handPos[1]: choice1 = remodel in position 0
	TEST 13 handPos[0] FAILURE: coins: 4	expected: 8
*****TEST 13 handPos[0] FAILURE****

TEST 14 handPos[1]: choice1 = smithy in position 0
	TEST 14 handPos[0] FAILURE: coins: 4	expected: 8
*****TEST 14 handPos[0] FAILURE****

TEST 15 handPos[1]: choice1 = village in position 0
	TEST 15 handPos[0] FAILURE: coins: 4	expected: 7
*****TEST 15 handPos[0] FAILURE****

TEST 16 handPos[1]: choice1 = baron in position 0
	TEST 16 handPos[0] FAILURE: coins: 4	expected: 8
*****TEST 16 handPos[0] FAILURE****

TEST 17 handPos[1]: choice1 = great_hall in position 0
	TEST 17 handPos[0] FAILURE: coins: 4	expected: 7
*****TEST 17 handPos[0] FAILURE****

TEST 18 handPos[1]: choice1 = minion in position 0
	TEST 18 handPos[0] FAILURE: coins: 4	expected: 9
*****TEST 18 handPos[0] FAILURE****

TEST 19 handPos[1]: choice1 = steward in position 0
	TEST 19 handPos[0] FAILURE: coins: 4	expected: 7
*****TEST 19 handPos[0] FAILURE****

TEST 20 handPos[1]: choice1 = tribute in position 0
	TEST 20 handPos[0] FAILURE: coins: 4	expected: 9
*****TEST 20 handPos[0] FAILURE****

TEST 21 handPos[1]: choice1 = ambassador in position 0
	TEST 21 handPos[0] FAILURE: coins: 4	expected: 7
*****TEST 21 handPos[0] FAILURE****

TEST 22 handPos[1]: choice1 = cutpurse in position 0
	TEST 22 handPos[0] FAILURE: coins: 4	expected: 8
*****TEST 22 handPos[0] FAILURE****

TEST 23 handPos[1]: choice1 = embargo in position 0
	TEST 23 handPos[0] FAILURE: coins: 4	expected: 6
*****TEST 23 handPos[0] FAILURE****

TEST 24 handPos[1]: choice1 = outpost in position 0
	TEST 24 handPos[0] FAILURE: coins: 4	expected: 9
*****TEST 24 handPos[0] FAILURE****

TEST 25 handPos[1]: choice1 = salvager in position 0
	TEST 25 handPos[0] FAILURE: coins: 4	expected: 8
*****TEST 25 handPos[0] FAILURE****

TEST 26 handPos[1]: choice1 = sea_hag in position 0
	TEST 26 handPos[0] FAILURE: coins: 4	expected: 8
	TEST 26 handPos[0] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 26 handPos[0] FAILURE****

TEST 1 handPos[2]: choice1 = curse in position 1
	TEST 1 handPos[1] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 1 handPos[1] FAILURE****

TEST 2 handPos[2]: choice1 = estate in position 1
	TEST 2 handPos[1] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 2 handPos[1] FAILURE****

TEST 3 handPos[2]: choice1 = duchy in position 1
	TEST 3 handPos[1] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 3 handPos[1] FAILURE****

TEST 4 handPos[2]: choice1 = province in position 1
	TEST 4 handPos[1] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 4 handPos[1] FAILURE****

TEST 5 handPos[2]: choice1 = copper in position 1
	TEST 5 handPos[1] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 5 handPos[1] FAILURE****

TEST 6 handPos[2]: choice1 = silver in position 1
	TEST 6 handPos[1] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 6 handPos[1] FAILURE****

TEST 7 handPos[2]: choice1 = gold in position 1
	TEST 7 handPos[1] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 7 handPos[1] FAILURE****

TEST 8 handPos[2]: choice1 = adventurer in position 1
	TEST 8 handPos[1] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 8 handPos[1] FAILURE****

TEST 9 handPos[2]: choice1 = council_room in position 1
	TEST 9 handPos[1] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 9 handPos[1] FAILURE****

TEST 10 handPos[2]: choice1 = feast in position 1
	TEST 10 handPos[1] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 10 handPos[1] FAILURE****

TEST 11 handPos[2]: choice1 = gardens in position 1
	TEST 11 handPos[1] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 11 handPos[1] FAILURE****

TEST 12 handPos[2]: choice1 = mine in position 1
	TEST 12 handPos[1] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 12 handPos[1] FAILURE****

TEST 13 handPos[2]: choice1 = remodel in position 1
	TEST 13 handPos[1] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 13 handPos[1] FAILURE****

TEST 14 handPos[2]: choice1 = smithy in position 1
	TEST 14 handPos[1] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 14 handPos[1] FAILURE****

TEST 15 handPos[2]: choice1 = village in position 1
	TEST 15 handPos[1] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 15 handPos[1] FAILURE****

TEST 16 handPos[2]: choice1 = baron in position 1
	TEST 16 handPos[1] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 16 handPos[1] FAILURE****

TEST 17 handPos[2]: choice1 = great_hall in position 1
	TEST 17 handPos[1] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 17 handPos[1] FAILURE****

TEST 18 handPos[2]: choice1 = minion in position 1
	TEST 18 handPos[1] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 18 handPos[1] FAILURE****

TEST 19 handPos[2]: choice1 = steward in position 1
	TEST 19 handPos[1] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 19 handPos[1] FAILURE****

TEST 20 handPos[2]: choice1 = tribute in position 1
	TEST 20 handPos[1] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 20 handPos[1] FAILURE****

TEST 21 handPos[2]: choice1 = ambassador in position 1
	TEST 21 handPos[1] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 21 handPos[1] FAILURE****

TEST 22 handPos[2]: choice1 = cutpurse in position 1
	TEST 22 handPos[1] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 22 handPos[1] FAILURE****

TEST 23 handPos[2]: choice1 = embargo in position 1
	TEST 23 handPos[1] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 23 handPos[1] FAILURE****

TEST 24 handPos[2]: choice1 = outpost in position 1
	TEST 24 handPos[1] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 24 handPos[1] FAILURE****

TEST 25 handPos[2]: choice1 = salvager in position 1
****TEST 25 handPos[1] SUCCESS****

TEST 26 handPos[2]: choice1 = sea_hag in position 1
	TEST 26 handPos[1] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 26 handPos[1] FAILURE****

TEST 1 handPos[3]: choice1 = curse in position 2
	TEST 1 handPos[2] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 1 handPos[2] FAILURE****

TEST 2 handPos[3]: choice1 = estate in position 2
	TEST 2 handPos[2] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 2 handPos[2] FAILURE****

TEST 3 handPos[3]: choice1 = duchy in position 2
	TEST 3 handPos[2] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 3 handPos[2] FAILURE****

TEST 4 handPos[3]: choice1 = province in position 2
	TEST 4 handPos[2] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 4 handPos[2] FAILURE****

TEST 5 handPos[3]: choice1 = copper in position 2
	TEST 5 handPos[2] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 5 handPos[2] FAILURE****

TEST 6 handPos[3]: choice1 = silver in position 2
	TEST 6 handPos[2] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 6 handPos[2] FAILURE****

TEST 7 handPos[3]: choice1 = gold in position 2
	TEST 7 handPos[2] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 7 handPos[2] FAILURE****

TEST 8 handPos[3]: choice1 = adventurer in position 2
	TEST 8 handPos[2] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 8 handPos[2] FAILURE****

TEST 9 handPos[3]: choice1 = council_room in position 2
	TEST 9 handPos[2] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 9 handPos[2] FAILURE****

TEST 10 handPos[3]: choice1 = feast in position 2
	TEST 10 handPos[2] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 10 handPos[2] FAILURE****

TEST 11 handPos[3]: choice1 = gardens in position 2
	TEST 11 handPos[2] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 11 handPos[2] FAILURE****

TEST 12 handPos[3]: choice1 = mine in position 2
	TEST 12 handPos[2] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 12 handPos[2] FAILURE****

TEST 13 handPos[3]: choice1 = remodel in position 2
	TEST 13 handPos[2] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 13 handPos[2] FAILURE****

TEST 14 handPos[3]: choice1 = smithy in position 2
	TEST 14 handPos[2] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 14 handPos[2] FAILURE****

TEST 15 handPos[3]: choice1 = village in position 2
	TEST 15 handPos[2] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 15 handPos[2] FAILURE****

TEST 16 handPos[3]: choice1 = baron in position 2
	TEST 16 handPos[2] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 16 handPos[2] FAILURE****

TEST 17 handPos[3]: choice1 = great_hall in position 2
	TEST 17 handPos[2] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 17 handPos[2] FAILURE****

TEST 18 handPos[3]: choice1 = minion in position 2
	TEST 18 handPos[2] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 18 handPos[2] FAILURE****

TEST 19 handPos[3]: choice1 = steward in position 2
	TEST 19 handPos[2] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 19 handPos[2] FAILURE****

TEST 20 handPos[3]: choice1 = tribute in position 2
	TEST 20 handPos[2] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 20 handPos[2] FAILURE****

TEST 21 handPos[3]: choice1 = ambassador in position 2
	TEST 21 handPos[2] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 21 handPos[2] FAILURE****

TEST 22 handPos[3]: choice1 = cutpurse in position 2
	TEST 22 handPos[2] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 22 handPos[2] FAILURE****

TEST 23 handPos[3]: choice1 = embargo in position 2
	TEST 23 handPos[2] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 23 handPos[2] FAILURE****

TEST 24 handPos[3]: choice1 = outpost in position 2
	TEST 24 handPos[2] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 24 handPos[2] FAILURE****

TEST 25 handPos[3]: choice1 = salvager in position 2
****TEST 25 handPos[2] SUCCESS****

TEST 26 handPos[3]: choice1 = sea_hag in position 2
	TEST 26 handPos[2] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 26 handPos[2] FAILURE****

TEST 1 handPos[4]: choice1 = curse in position 3
	TEST 1 handPos[3] FAILURE: last card in playedCards = -1	expected = 24
	TEST 1 handPos[3] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 1 handPos[3] FAILURE****

TEST 2 handPos[4]: choice1 = estate in position 3
	TEST 2 handPos[3] FAILURE: last card in playedCards = -1	expected = 24
	TEST 2 handPos[3] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 2 handPos[3] FAILURE****

TEST 3 handPos[4]: choice1 = duchy in position 3
	TEST 3 handPos[3] FAILURE: last card in playedCards = -1	expected = 24
	TEST 3 handPos[3] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 3 handPos[3] FAILURE****

TEST 4 handPos[4]: choice1 = province in position 3
	TEST 4 handPos[3] FAILURE: last card in playedCards = -1	expected = 24
	TEST 4 handPos[3] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 4 handPos[3] FAILURE****

TEST 5 handPos[4]: choice1 = copper in position 3
	TEST 5 handPos[3] FAILURE: last card in playedCards = -1	expected = 24
	TEST 5 handPos[3] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 5 handPos[3] FAILURE****

TEST 6 handPos[4]: choice1 = silver in position 3
	TEST 6 handPos[3] FAILURE: last card in playedCards = -1	expected = 24
	TEST 6 handPos[3] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 6 handPos[3] FAILURE****

TEST 7 handPos[4]: choice1 = gold in position 3
	TEST 7 handPos[3] FAILURE: last card in playedCards = -1	expected = 24
	TEST 7 handPos[3] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 7 handPos[3] FAILURE****

TEST 8 handPos[4]: choice1 = adventurer in position 3
	TEST 8 handPos[3] FAILURE: last card in playedCards = -1	expected = 24
	TEST 8 handPos[3] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 8 handPos[3] FAILURE****

TEST 9 handPos[4]: choice1 = council_room in position 3
	TEST 9 handPos[3] FAILURE: last card in playedCards = -1	expected = 24
	TEST 9 handPos[3] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 9 handPos[3] FAILURE****

TEST 10 handPos[4]: choice1 = feast in position 3
	TEST 10 handPos[3] FAILURE: last card in playedCards = -1	expected = 24
	TEST 10 handPos[3] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 10 handPos[3] FAILURE****

TEST 11 handPos[4]: choice1 = gardens in position 3
	TEST 11 handPos[3] FAILURE: last card in playedCards = -1	expected = 24
	TEST 11 handPos[3] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 11 handPos[3] FAILURE****

TEST 12 handPos[4]: choice1 = mine in position 3
	TEST 12 handPos[3] FAILURE: last card in playedCards = -1	expected = 24
	TEST 12 handPos[3] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 12 handPos[3] FAILURE****

TEST 13 handPos[4]: choice1 = remodel in position 3
	TEST 13 handPos[3] FAILURE: last card in playedCards = -1	expected = 24
	TEST 13 handPos[3] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 13 handPos[3] FAILURE****

TEST 14 handPos[4]: choice1 = smithy in position 3
	TEST 14 handPos[3] FAILURE: last card in playedCards = -1	expected = 24
	TEST 14 handPos[3] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 14 handPos[3] FAILURE****

TEST 15 handPos[4]: choice1 = village in position 3
	TEST 15 handPos[3] FAILURE: last card in playedCards = -1	expected = 24
	TEST 15 handPos[3] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 15 handPos[3] FAILURE****

TEST 16 handPos[4]: choice1 = baron in position 3
	TEST 16 handPos[3] FAILURE: last card in playedCards = -1	expected = 24
	TEST 16 handPos[3] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 16 handPos[3] FAILURE****

TEST 17 handPos[4]: choice1 = great_hall in position 3
	TEST 17 handPos[3] FAILURE: last card in playedCards = -1	expected = 24
	TEST 17 handPos[3] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 17 handPos[3] FAILURE****

TEST 18 handPos[4]: choice1 = minion in position 3
	TEST 18 handPos[3] FAILURE: last card in playedCards = -1	expected = 24
	TEST 18 handPos[3] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 18 handPos[3] FAILURE****

TEST 19 handPos[4]: choice1 = steward in position 3
	TEST 19 handPos[3] FAILURE: last card in playedCards = -1	expected = 24
	TEST 19 handPos[3] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 19 handPos[3] FAILURE****

TEST 20 handPos[4]: choice1 = tribute in position 3
	TEST 20 handPos[3] FAILURE: last card in playedCards = -1	expected = 24
	TEST 20 handPos[3] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 20 handPos[3] FAILURE****

TEST 21 handPos[4]: choice1 = ambassador in position 3
	TEST 21 handPos[3] FAILURE: last card in playedCards = -1	expected = 24
	TEST 21 handPos[3] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 21 handPos[3] FAILURE****

TEST 22 handPos[4]: choice1 = cutpurse in position 3
	TEST 22 handPos[3] FAILURE: last card in playedCards = -1	expected = 24
	TEST 22 handPos[3] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 22 handPos[3] FAILURE****

TEST 23 handPos[4]: choice1 = embargo in position 3
	TEST 23 handPos[3] FAILURE: last card in playedCards = -1	expected = 24
	TEST 23 handPos[3] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 23 handPos[3] FAILURE****

TEST 24 handPos[4]: choice1 = outpost in position 3
	TEST 24 handPos[3] FAILURE: last card in playedCards = -1	expected = 24
	TEST 24 handPos[3] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 24 handPos[3] FAILURE****

TEST 25 handPos[4]: choice1 = salvager in position 3
	TEST 25 handPos[3] FAILURE: last card in playedCards = -1	expected = 24
*****TEST 25 handPos[3] FAILURE****

TEST 26 handPos[4]: choice1 = sea_hag in position 3
	TEST 26 handPos[3] FAILURE: last card in playedCards = -1	expected = 24
	TEST 26 handPos[3] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 26 handPos[3] FAILURE****

TEST 1 handPos[0]: choice1 = curse in position 4
	TEST 1 handPos[4] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 1 handPos[4] FAILURE****

TEST 2 handPos[0]: choice1 = estate in position 4
	TEST 2 handPos[4] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 2 handPos[4] FAILURE****

TEST 3 handPos[0]: choice1 = duchy in position 4
	TEST 3 handPos[4] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 3 handPos[4] FAILURE****

TEST 4 handPos[0]: choice1 = province in position 4
	TEST 4 handPos[4] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 4 handPos[4] FAILURE****

TEST 5 handPos[0]: choice1 = copper in position 4
	TEST 5 handPos[4] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 5 handPos[4] FAILURE****

TEST 6 handPos[0]: choice1 = silver in position 4
	TEST 6 handPos[4] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 6 handPos[4] FAILURE****

TEST 7 handPos[0]: choice1 = gold in position 4
	TEST 7 handPos[4] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 7 handPos[4] FAILURE****

TEST 8 handPos[0]: choice1 = adventurer in position 4
	TEST 8 handPos[4] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 8 handPos[4] FAILURE****

TEST 9 handPos[0]: choice1 = council_room in position 4
	TEST 9 handPos[4] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 9 handPos[4] FAILURE****

TEST 10 handPos[0]: choice1 = feast in position 4
	TEST 10 handPos[4] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 10 handPos[4] FAILURE****

TEST 11 handPos[0]: choice1 = gardens in position 4
	TEST 11 handPos[4] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 11 handPos[4] FAILURE****

TEST 12 handPos[0]: choice1 = mine in position 4
	TEST 12 handPos[4] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 12 handPos[4] FAILURE****

TEST 13 handPos[0]: choice1 = remodel in position 4
	TEST 13 handPos[4] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 13 handPos[4] FAILURE****

TEST 14 handPos[0]: choice1 = smithy in position 4
	TEST 14 handPos[4] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 14 handPos[4] FAILURE****

TEST 15 handPos[0]: choice1 = village in position 4
	TEST 15 handPos[4] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 15 handPos[4] FAILURE****

TEST 16 handPos[0]: choice1 = baron in position 4
	TEST 16 handPos[4] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 16 handPos[4] FAILURE****

TEST 17 handPos[0]: choice1 = great_hall in position 4
	TEST 17 handPos[4] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 17 handPos[4] FAILURE****

TEST 18 handPos[0]: choice1 = minion in position 4
	TEST 18 handPos[4] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 18 handPos[4] FAILURE****

TEST 19 handPos[0]: choice1 = steward in position 4
	TEST 19 handPos[4] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 19 handPos[4] FAILURE****

TEST 20 handPos[0]: choice1 = tribute in position 4
	TEST 20 handPos[4] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 20 handPos[4] FAILURE****

TEST 21 handPos[0]: choice1 = ambassador in position 4
	TEST 21 handPos[4] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 21 handPos[4] FAILURE****

TEST 22 handPos[0]: choice1 = cutpurse in position 4
	TEST 22 handPos[4] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 22 handPos[4] FAILURE****

TEST 23 handPos[0]: choice1 = embargo in position 4
	TEST 23 handPos[4] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 23 handPos[4] FAILURE****

TEST 24 handPos[0]: choice1 = outpost in position 4
	TEST 24 handPos[4] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 24 handPos[4] FAILURE****

TEST 25 handPos[0]: choice1 = salvager in position 4
****TEST 25 handPos[4] SUCCESS****

TEST 26 handPos[0]: choice1 = sea_hag in position 4
	TEST 26 handPos[4] FAILURE: hand contains salvager card: 1	expected: 0
*****TEST 26 handPos[4] FAILURE****

Function 'compare'
Lines executed:83.33% of 6
Branches executed:100.00% of 4
Taken at least once:75.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:85.90% of 78
Branches executed:95.65% of 46
Taken at least once:80.43% of 46
No calls

Function 'shuffle'
Lines executed:94.44% of 18
Branches executed:100.00% of 8
Taken at least once:87.50% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:100.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:100.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:33.33% of 24
Branches executed:33.33% of 6
Taken at least once:16.67% of 6
No calls

Function 'getCost'
Lines executed:93.33% of 30
Branches executed:100.00% of 28
Taken at least once:92.86% of 28
No calls

Function 'cardEffect'
Lines executed:5.08% of 256
Branches executed:13.81% of 181
Taken at least once:2.21% of 181
No calls

Function 'discardCard'
Lines executed:86.67% of 15
Branches executed:100.00% of 6
Taken at least once:83.33% of 6
No calls

Function 'gainCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'updateCoins'
Lines executed:71.43% of 14
Branches executed:100.00% of 8
Taken at least once:75.00% of 8
No calls

Function 'playAdventurer'
Lines executed:0.00% of 18
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'playSmithy'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'playVillage'
Lines executed:0.00% of 4
No branches
No calls

Function 'playGreatHall'
Lines executed:0.00% of 4
No branches
No calls

Function 'playSeaHag'
Lines executed:0.00% of 9
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls

File 'dominion.c'
Lines executed:25.39% of 646
Branches executed:29.98% of 417
Taken at least once:21.34% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:// set NOISY_TEST to 0 to remove printfs from output
        -:    9:#define NOISY_TEST 1
        -:   10:
        -:   11:
function compare called 28 returned 100% blocks executed 85%
        -:   12:int compare(const void* a, const void* b) {
       28:   13:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   14:    return 1;
       28:   15:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
       10:   16:    return -1;
       18:   17:  return 0;
       28:   18:}
        -:   19:
function newGame called 0 returned 0% blocks executed 0%
        -:   20:struct gameState* newGame() {
    #####:   21:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   22:  return g;
        -:   23:}
        -:   24:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   25:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   26:		  int k8, int k9, int k10) {
    #####:   27:  int* k = malloc(10 * sizeof(int));
    #####:   28:  k[0] = k1;
    #####:   29:  k[1] = k2;
    #####:   30:  k[2] = k3;
    #####:   31:  k[3] = k4;
    #####:   32:  k[4] = k5;
    #####:   33:  k[5] = k6;
    #####:   34:  k[6] = k7;
    #####:   35:  k[7] = k8;
    #####:   36:  k[8] = k9;
    #####:   37:  k[9] = k10;
    #####:   38:  return k;
        -:   39:}
        -:   40:
function initializeGame called 1 returned 100% blocks executed 87%
        -:   41:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   42:		   struct gameState *state) {
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;			
        -:   47:  //set up random number generator
        1:   48:  SelectStream(1);
        1:   49:  PutSeed((long)randomSeed);
        -:   50:  
        -:   51:  //check number of players
        2:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   53:    {
    #####:   54:      return -1;
        -:   55:    }
        -:   56:
        -:   57:  //set number of players
        1:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
       22:   61:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   62:    {
      220:   63:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   64:        {
      190:   65:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   66:	    {
    #####:   67:	      return -1;
        -:   68:	    }
      100:   69:        }
       10:   70:    }
        -:   71:
        -:   72:
        -:   73:  //initialize supply
        -:   74:  ///////////////////////////////
        -:   75:
        -:   76:  //set number of Curse cards
        1:   77:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 10;
        1:   80:    }
    #####:   81:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 20;
    #####:   84:    }
        -:   85:  else
        -:   86:    {
    #####:   87:      state->supplyCount[curse] = 30;
        -:   88:    }
        -:   89:
        -:   90:  //set number of Victory cards
        1:   91:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   92:    {
        1:   93:      state->supplyCount[estate] = 8;
        1:   94:      state->supplyCount[duchy] = 8;
        1:   95:      state->supplyCount[province] = 8;
        1:   96:    }
        -:   97:  else
        -:   98:    {
    #####:   99:      state->supplyCount[estate] = 12;
    #####:  100:      state->supplyCount[duchy] = 12;
    #####:  101:      state->supplyCount[province] = 12;
        -:  102:    }
        -:  103:
        -:  104:  //set number of Treasure cards
        1:  105:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  106:  state->supplyCount[silver] = 40;
        1:  107:  state->supplyCount[gold] = 30;
        -:  108:
        -:  109:  //set number of Kingdom cards
       42:  110:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  111:    {
      330:  112:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  113:    	{
      155:  114:    	  if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  115:    	    {
        -:  116:    	      //check if card is a 'Victory' Kingdom card
       19:  117:    	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens){
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 11%
branch  3 taken 89%
        2:  118:          		  if (numPlayers == 2){ 
branch  0 taken 100%
branch  1 taken 0%
        2:  119:          		    state->supplyCount[i] = 8; 
        2:  120:          		  }
    #####:  121:          		  else{ state->supplyCount[i] = 12; }
        2:  122:    		      }
        -:  123:    	      
        -:  124:            else{
        8:  125:        		  state->supplyCount[i] = 10;
        -:  126:        		}
       10:  127:    	      break;
        -:  128:  	       }
        -:  129:    	  else    //card is not in the set choosen for the game
        -:  130:    	    {
      145:  131:    	      state->supplyCount[i] = -1;
        -:  132:    	    }
      145:  133:  	}
        -:  134:
       20:  135:    }
        -:  136:
        -:  137:  ////////////////////////
        -:  138:  //supply intilization complete
        -:  139:
        -:  140:  //set player decks
        6:  141:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  142:    {
        2:  143:      state->deckCount[i] = 0;
       16:  144:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  145:	{
        6:  146:	  state->deck[i][j] = estate;
        6:  147:	  state->deckCount[i]++;
        6:  148:	}
       32:  149:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  150:	{
       14:  151:	  state->deck[i][j] = copper;
       14:  152:	  state->deckCount[i]++;		
       14:  153:	}
        2:  154:    }
        -:  155:
        -:  156:  //shuffle player decks
        6:  157:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  158:    {
        2:  159:      if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  160:	{
    #####:  161:	  return -1;
        -:  162:	}
        2:  163:    }
        -:  164:
        -:  165:  //draw player hands
        6:  166:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33%
        -:  167:    {  
        -:  168:      //initialize hand size to zero
        2:  169:      state->handCount[i] = 0;
        2:  170:      state->discardCount[i] = 0;
        -:  171:      //draw 5 cards
        -:  172:      // for (j = 0; j < 5; j++)
        -:  173:      //	{
        -:  174:      //	  drawCard(i, state);
        -:  175:      //	}
        2:  176:    }
        -:  177:  
        -:  178:  //set embargo tokens to 0 for all supply piles
       56:  179:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  180:    {
       27:  181:      state->embargoTokens[i] = 0;
       27:  182:    }
        -:  183:
        -:  184:  //initialize first player's turn
        1:  185:  state->outpostPlayed = 0;
        1:  186:  state->phase = 0;
        1:  187:  state->numActions = 1;
        1:  188:  state->numBuys = 1;
        1:  189:  state->playedCardCount = 0;
        1:  190:  state->whoseTurn = 0;
        1:  191:  state->handCount[state->whoseTurn] = 0;
        -:  192:  //int it; move to top
        -:  193:
        -:  194:  //Moved draw cards to here, only drawing at the start of a turn
       12:  195:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
        5:  196:    drawCard(state->whoseTurn, state);
        5:  197:  }
        -:  198:
        1:  199:  updateCoins(state->whoseTurn, state, 0);
        -:  200:
        1:  201:  return 0;
        1:  202:}
        -:  203:
function shuffle called 2 returned 100% blocks executed 93%
        -:  204:int shuffle(int player, struct gameState *state) {
        -:  205: 
        -:  206:
        -:  207:  int newDeck[MAX_DECK];
        2:  208:  int newDeckPos = 0;
        -:  209:  int card;
        -:  210:  int i;
        -:  211:
        2:  212:  if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  213:    return -1;
        2:  214:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  215:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  216:
       44:  217:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
       20:  218:    card = floor(Random() * state->deckCount[player]);
       20:  219:    newDeck[newDeckPos] = state->deck[player][card];
       20:  220:    newDeckPos++;
      140:  221:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29%
       50:  222:      state->deck[player][i] = state->deck[player][i+1];
       50:  223:    }
       20:  224:    state->deckCount[player]--;
        -:  225:  }
       44:  226:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
       20:  227:    state->deck[player][i] = newDeck[i];
       20:  228:    state->deckCount[player]++;
       20:  229:  }
        -:  230:
        2:  231:  return 0;
        2:  232:}
        -:  233:
function playCard called 0 returned 0% blocks executed 0%
        -:  234:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  235:{	
        -:  236:  int card;
    #####:  237:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  238:
        -:  239:  //check if it is the right phase
    #####:  240:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  241:    {
    #####:  242:      return -1;
        -:  243:    }
        -:  244:	
        -:  245:  //check if player has enough actions
    #####:  246:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  247:    {
    #####:  248:      return -1;
        -:  249:    }
        -:  250:	
        -:  251:  //get card played
    #####:  252:  card = handCard(handPos, state);
        -:  253:	
        -:  254:  //check if selected card is an action
    #####:  255:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  256:    {
    #####:  257:      return -1;
        -:  258:    }
        -:  259:	
        -:  260:  //play card
    #####:  261:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  262:    {
    #####:  263:      return -1;
        -:  264:    }
        -:  265:	
        -:  266:  //reduce number of actions
    #####:  267:  state->numActions--;
        -:  268:
        -:  269:  //update coins (Treasure cards may be added with card draws)
    #####:  270:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  271:	
    #####:  272:  return 0;
    #####:  273:}
        -:  274:
function buyCard called 0 returned 0% blocks executed 0%
        -:  275:int buyCard(int supplyPos, struct gameState *state) {
        -:  276:  int who;
        -:  277:  if (DEBUG){
        -:  278:    printf("Entering buyCard...\n");
        -:  279:  }
        -:  280:
        -:  281:  // I don't know what to do about the phase thing.
        -:  282:
    #####:  283:  who = state->whoseTurn;
        -:  284:
    #####:  285:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  286:    if (DEBUG)
        -:  287:      printf("You do not have any buys left\n");
    #####:  288:    return -1;
    #####:  289:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  290:    if (DEBUG)
        -:  291:      printf("There are not any of that type of card left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  294:    if (DEBUG) 
        -:  295:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  296:    return -1;
        -:  297:  } else {
    #####:  298:    state->phase=1;
        -:  299:    //state->supplyCount[supplyPos]--;
    #####:  300:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  301:  
    #####:  302:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  303:    state->numBuys--;
        -:  304:    if (DEBUG)
        -:  305:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  306:  }
        -:  307:
        -:  308:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  309:  //state->discardCount[who]++;
        -:  310:    
    #####:  311:  return 0;
    #####:  312:}
        -:  313:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  314:int numHandCards(struct gameState *state) {
    #####:  315:  return state->handCount[ whoseTurn(state) ];
        -:  316:}
        -:  317:
function handCard called 104 returned 100% blocks executed 100%
        -:  318:int handCard(int handPos, struct gameState *state) {
      104:  319:  int currentPlayer = whoseTurn(state);
      104:  320:  return state->hand[currentPlayer][handPos];
        -:  321:}
        -:  322:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  323:int supplyCount(int card, struct gameState *state) {
    #####:  324:  return state->supplyCount[card];
        -:  325:}
        -:  326:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  327:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  328:  int i;
    #####:  329:  int count = 0;
        -:  330:
    #####:  331:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  332:    {
    #####:  333:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  334:    }
        -:  335:
    #####:  336:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  337:    {
    #####:  338:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  339:    }
        -:  340:
    #####:  341:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  342:    {
    #####:  343:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  344:    }
        -:  345:
    #####:  346:  return count;
        -:  347:}
        -:  348:
function whoseTurn called 234 returned 100% blocks executed 100%
        -:  349:int whoseTurn(struct gameState *state) {
      234:  350:  return state->whoseTurn;
        -:  351:}
        -:  352:
function endTurn called 0 returned 0% blocks executed 0%
        -:  353:int endTurn(struct gameState *state) {
        -:  354:  int k;
        -:  355:  int i;
    #####:  356:  int currentPlayer = whoseTurn(state);
        -:  357:  
        -:  358:  //Discard hand
    #####:  359:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  360:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  361:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  362:  }
    #####:  363:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  364:    
        -:  365:  //Code for determining the player
    #####:  366:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  367:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  368:  }
        -:  369:  else{
    #####:  370:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  371:  }
        -:  372:
    #####:  373:  state->outpostPlayed = 0;
    #####:  374:  state->phase = 0;
    #####:  375:  state->numActions = 1;
    #####:  376:  state->coins = 0;
    #####:  377:  state->numBuys = 1;
    #####:  378:  state->playedCardCount = 0;
    #####:  379:  state->handCount[state->whoseTurn] = 0;
        -:  380:
        -:  381:  //int k; move to top
        -:  382:  //Next player draws hand
    #####:  383:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  384:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  385:  }
        -:  386:
        -:  387:  //Update money
    #####:  388:  updateCoins(state->whoseTurn, state , 0);
        -:  389:
    #####:  390:  return 0;
        -:  391:}
        -:  392:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  393:int isGameOver(struct gameState *state) {
        -:  394:  int i;
        -:  395:  int j;
        -:  396:	
        -:  397:  //if stack of Province cards is empty, the game ends
    #####:  398:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  399:    {
    #####:  400:      return 1;
        -:  401:    }
        -:  402:
        -:  403:  //if three supply piles are at 0, the game ends
    #####:  404:  j = 0;
    #####:  405:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  406:    {
    #####:  407:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  408:	{
    #####:  409:	  j++;
    #####:  410:	}
    #####:  411:    }
    #####:  412:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  413:    {
    #####:  414:      return 1;
        -:  415:    }
        -:  416:
    #####:  417:  return 0;
    #####:  418:}
        -:  419:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  420:int scoreFor (int player, struct gameState *state) {
        -:  421:
        -:  422:  int i;
    #####:  423:  int score = 0;
        -:  424:  //score from hand
    #####:  425:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  426:    {
    #####:  427:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  433:    }
        -:  434:
        -:  435:  //score from discard
    #####:  436:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  437:    {
    #####:  438:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  444:    }
        -:  445:
        -:  446:  //score from deck
    #####:  447:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  448:    {
    #####:  449:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  455:    }
        -:  456:
    #####:  457:  return score;
        -:  458:}
        -:  459:
function getWinners called 0 returned 0% blocks executed 0%
        -:  460:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  461:  int i;	
        -:  462:  int j;
        -:  463:  int highScore;
        -:  464:  int currentPlayer;
        -:  465:
        -:  466:  //get score for each player
    #####:  467:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  468:    {
        -:  469:      //set unused player scores to -9999
    #####:  470:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  471:	{
    #####:  472:	  players[i] = -9999;
    #####:  473:	}
        -:  474:      else
        -:  475:	{
    #####:  476:	  players[i] = scoreFor (i, state);
        -:  477:	}
    #####:  478:    }
        -:  479:
        -:  480:  //find highest score
    #####:  481:  j = 0;
    #####:  482:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  483:    {
    #####:  484:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  485:	{
    #####:  486:	  j = i;
    #####:  487:	}
    #####:  488:    }
    #####:  489:  highScore = players[j];
        -:  490:
        -:  491:  //add 1 to players who had less turns
    #####:  492:  currentPlayer = whoseTurn(state);
    #####:  493:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  494:    {
    #####:  495:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  496:	{
    #####:  497:	  players[i]++;
    #####:  498:	}
    #####:  499:    }
        -:  500:
        -:  501:  //find new highest score
    #####:  502:  j = 0;
    #####:  503:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  504:    {
    #####:  505:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  506:	{
    #####:  507:	  j = i;
    #####:  508:	}
    #####:  509:    }
    #####:  510:  highScore = players[j];
        -:  511:
        -:  512:  //set winners in array to 1 and rest to 0
    #####:  513:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  514:    {
    #####:  515:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  516:	{
    #####:  517:	  players[i] = 1;
    #####:  518:	}
        -:  519:      else
        -:  520:	{
    #####:  521:	  players[i] = 0;
        -:  522:	}
    #####:  523:    }
        -:  524:
    #####:  525:  return 0;
        -:  526:}
        -:  527:
function drawCard called 5 returned 100% blocks executed 41%
        -:  528:int drawCard(int player, struct gameState *state)
        -:  529:{	
        -:  530:  int count;
        -:  531:  int deckCounter;
        5:  532:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0%
branch  1 taken 100%
        -:  533:    
        -:  534:    //Step 1 Shuffle the discard pile back into a deck
        -:  535:    int i;
        -:  536:    //Move discard to deck
    #####:  537:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  538:      state->deck[player][i] = state->discard[player][i];
    #####:  539:      state->discard[player][i] = -1;
    #####:  540:    }
        -:  541:
    #####:  542:    state->deckCount[player] = state->discardCount[player];
    #####:  543:    state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:    //Shufffle the deck
    #####:  546:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  547:   
        -:  548:    if (DEBUG){//Debug statements
        -:  549:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  550:    }
        -:  551:    
    #####:  552:    state->discardCount[player] = 0;
        -:  553:
        -:  554:    //Step 2 Draw Card
    #####:  555:    count = state->handCount[player];//Get current player's hand count
        -:  556:    
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Current hand count: %d\n", count);
        -:  559:    }
        -:  560:    
    #####:  561:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  562:
    #####:  563:    if (deckCounter == 0){
branch  0 never executed
branch  1 never executed
    #####:  564:      return -1;
        -:  565:    }
        -:  566:
    #####:  567:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  568:    state->deckCount[player]--;
    #####:  569:    state->handCount[player]++;//Increment hand count
    #####:  570:  }
        -:  571:
        -:  572:  else{
        5:  573:    int count = state->handCount[player];//Get current hand count for player
        -:  574:    int deckCounter;
        -:  575:    if (DEBUG){//Debug statements
        -:  576:      printf("Current hand count: %d\n", count);
        -:  577:    }
        -:  578:
        5:  579:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  580:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  581:    state->deckCount[player]--;
        5:  582:    state->handCount[player]++;//Increment hand count
        -:  583:  }
        -:  584:
        5:  585:  return 0;
        5:  586:}
        -:  587:
function getCost called 258 returned 100% blocks executed 93%
        -:  588:int getCost(int cardNumber)
        -:  589:{
      258:  590:  switch( cardNumber ) 
branch  0 taken 3%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 3%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 0%
branch 27 taken 0%
        -:  591:    {
        -:  592:    case curse:
        9:  593:      return 0;
        -:  594:    case estate:
       10:  595:      return 2;
        -:  596:    case duchy:
       10:  597:      return 5;
        -:  598:    case province:
       10:  599:      return 8;
        -:  600:    case copper:
        9:  601:      return 0;
        -:  602:    case silver:
       10:  603:      return 3;
        -:  604:    case gold:
       10:  605:      return 6;
        -:  606:    case adventurer:
       10:  607:      return 6;
        -:  608:    case council_room:
       10:  609:      return 5;
        -:  610:    case feast:
       10:  611:      return 4;
        -:  612:    case gardens:
       10:  613:      return 4;
        -:  614:    case mine:
       10:  615:      return 5;
        -:  616:    case remodel:
       10:  617:      return 4;
        -:  618:    case smithy:
       10:  619:      return 4;
        -:  620:    case village:
       10:  621:      return 3;
        -:  622:    case baron:
       10:  623:      return 4;
        -:  624:    case great_hall:
       10:  625:      return 3;
        -:  626:    case minion:
       10:  627:      return 5;
        -:  628:    case steward:
       10:  629:      return 3;
        -:  630:    case tribute:
       10:  631:      return 5;
        -:  632:    case ambassador:
       10:  633:      return 3;
        -:  634:    case cutpurse:
       10:  635:      return 4;
        -:  636:    case embargo: 
       10:  637:      return 2;
        -:  638:    case outpost:
       10:  639:      return 5;
        -:  640:    case salvager:
       10:  641:      return 4;
        -:  642:    case sea_hag:
       10:  643:      return 4;
        -:  644:    case treasure_map:
    #####:  645:      return 4;
        -:  646:    }
        -:  647:	
    #####:  648:  return -1;
      258:  649:}
        -:  650:
function cardEffect called 130 returned 100% blocks executed 3%
        -:  651:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  652:{
        -:  653:  int i;
        -:  654:  int j;
        -:  655:  int k;
        -:  656:  int x;
        -:  657:  int index;
      130:  658:  int currentPlayer = whoseTurn(state);
      130:  659:  int nextPlayer = currentPlayer + 1;
        -:  660:
      130:  661:  int tributeRevealedCards[2] = {-1, -1};
        -:  662:  int temphand[MAX_HAND];// moved above the if statement
      130:  663:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0%
branch  1 taken 100%
    #####:  664:    nextPlayer = 0;
    #####:  665:  }
        -:  666:  
        -:  667:	
        -:  668:  //uses switch to select card and perform actions
      130:  669:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 100%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  670:    {
        -:  671:    case adventurer:
    #####:  672:      return playAdventurer(state, currentPlayer);
        -:  673:
        -:  674:      /*while(drawntreasure<2){
        -:  675:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  676:	  shuffle(currentPlayer, state);
        -:  677:	}
        -:  678:	drawCard(currentPlayer, state);
        -:  679:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  680:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  681:	  drawntreasure++;
        -:  682:	else{
        -:  683:	  temphand[z]=cardDrawn;
        -:  684:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  685:	  z++;
        -:  686:	}
        -:  687:      }
        -:  688:      while(z-1>=0){
        -:  689:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  690:	z=z-1;
        -:  691:      }
        -:  692:      return 0;*/
        -:  693:			
        -:  694:    case council_room:
        -:  695:      //+4 Cards
    #####:  696:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  697:	{
    #####:  698:	  drawCard(currentPlayer, state);
    #####:  699:	}
        -:  700:			
        -:  701:      //+1 Buy
    #####:  702:      state->numBuys++;
        -:  703:			
        -:  704:      //Each other player draws a card
    #####:  705:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  706:	{
    #####:  707:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  708:	    {
    #####:  709:	      drawCard(i, state);
    #####:  710:	    }
    #####:  711:	}
        -:  712:			
        -:  713:      //put played card in played card pile
    #####:  714:      discardCard(handPos, currentPlayer, state, 0);
        -:  715:			
    #####:  716:      return 0;
        -:  717:			
        -:  718:    case feast:
        -:  719:      //gain card with cost up to 5
        -:  720:      //Backup hand
    #####:  721:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  722:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  723:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  724:      }
        -:  725:      //Backup hand
        -:  726:
        -:  727:      //Update Coins for Buy
    #####:  728:      updateCoins(currentPlayer, state, 5);
    #####:  729:      x = 1;//Condition to loop on
    #####:  730:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  731:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  732:	  if (DEBUG)
        -:  733:	    printf("None of that card left, sorry!\n");
        -:  734:
        -:  735:	  if (DEBUG){
        -:  736:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  737:	  }
    #####:  738:	}
    #####:  739:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  740:	  printf("That card is too expensive!\n");
        -:  741:
        -:  742:	  if (DEBUG){
        -:  743:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  744:	  }
    #####:  745:	}
        -:  746:	else{
        -:  747:
        -:  748:	  if (DEBUG){
        -:  749:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  750:	  }
        -:  751:
    #####:  752:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  753:	  x = 0;//No more buying cards
        -:  754:
        -:  755:	  if (DEBUG){
        -:  756:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  757:	  }
        -:  758:
        -:  759:	}
        -:  760:      }     
        -:  761:
        -:  762:      //Reset Hand
    #####:  763:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  764:	state->hand[currentPlayer][i] = temphand[i];
    #####:  765:	temphand[i] = -1;
    #####:  766:      }
        -:  767:      //Reset Hand
        -:  768:      			
    #####:  769:      return 0;
        -:  770:			
        -:  771:    case gardens:
    #####:  772:      return -1;
        -:  773:			
        -:  774:    case mine:
    #####:  775:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  776:
    #####:  777:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  778:	{
    #####:  779:	  return -1;
        -:  780:	}
        -:  781:		
    #####:  782:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  783:	{
    #####:  784:	  return -1;
        -:  785:	}
        -:  786:
    #####:  787:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  788:	{
    #####:  789:	  return -1;
        -:  790:	}
        -:  791:
    #####:  792:      gainCard(choice2, state, 2, currentPlayer);
        -:  793:
        -:  794:      //discard card from hand
    #####:  795:      discardCard(handPos, currentPlayer, state, 0);
        -:  796:
        -:  797:      //discard trashed card
    #####:  798:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  799:	{
    #####:  800:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  801:	    {
    #####:  802:	      discardCard(i, currentPlayer, state, 0);			
    #####:  803:	      break;
        -:  804:	    }
    #####:  805:	}
        -:  806:			
    #####:  807:      return 0;
        -:  808:			
        -:  809:    case remodel:
    #####:  810:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  811:
    #####:  812:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  813:	{
    #####:  814:	  return -1;
        -:  815:	}
        -:  816:
    #####:  817:      gainCard(choice2, state, 0, currentPlayer);
        -:  818:
        -:  819:      //discard card from hand
    #####:  820:      discardCard(handPos, currentPlayer, state, 0);
        -:  821:
        -:  822:      //discard trashed card
    #####:  823:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  824:	{
    #####:  825:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  826:	    {
    #####:  827:	      discardCard(i, currentPlayer, state, 0);			
    #####:  828:	      break;
        -:  829:	    }
    #####:  830:	}
        -:  831:
        -:  832:
    #####:  833:      return 0;
        -:  834:		
        -:  835:    case smithy:
    #####:  836:      return playSmithy(currentPlayer, state, handPos);
        -:  837:      /*//+3 Cards
        -:  838:      for (i = 0; i < 3; i++)
        -:  839:	{
        -:  840:	  drawCard(currentPlayer, state);
        -:  841:	}
        -:  842:			
        -:  843:      //discard card from hand
        -:  844:      discardCard(handPos, currentPlayer, state, 0);
        -:  845:      return 0;*/
        -:  846:		
        -:  847:    case village:
    #####:  848:      return playVillage(currentPlayer, state, handPos);
        -:  849:      /*//+1 Card
        -:  850:      drawCard(currentPlayer, state);
        -:  851:			
        -:  852:      //+2 Actions
        -:  853:      state->numActions = state->numActions + 2;
        -:  854:			
        -:  855:      //discard played card from hand
        -:  856:      discardCard(handPos, currentPlayer, state, 0);
        -:  857:      return 0;*/
        -:  858:		
        -:  859:    case baron:
    #####:  860:      state->numBuys++;//Increase buys by 1!
    #####:  861:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  862:	int p = 0;//Iterator for hand!
    #####:  863:	int card_not_discarded = 1;//Flag for discard set!
    #####:  864:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  865:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  866:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  867:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  868:	    state->discardCount[currentPlayer]++;
    #####:  869:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  870:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  871:	    }
    #####:  872:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  873:	    state->handCount[currentPlayer]--;
    #####:  874:	    card_not_discarded = 0;//Exit the loop
    #####:  875:	  }
    #####:  876:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  877:	    if(DEBUG) {
        -:  878:	      printf("No estate cards in your hand, invalid choice\n");
        -:  879:	      printf("Must gain an estate if there are any\n");
        -:  880:	    }
    #####:  881:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  882:	      gainCard(estate, state, 0, currentPlayer);
    #####:  883:	      state->supplyCount[estate]--;//Decrement estates
    #####:  884:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  885:		isGameOver(state);
    #####:  886:	      }
    #####:  887:	    }
    #####:  888:	    card_not_discarded = 0;//Exit the loop
    #####:  889:	  }
        -:  890:			    
        -:  891:	  else{
    #####:  892:	    p++;//Next card
        -:  893:	  }
        -:  894:	}
    #####:  895:      }
        -:  896:			    
        -:  897:      else{
    #####:  898:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  899:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  900:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  901:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  902:	    isGameOver(state);
    #####:  903:	  }
    #####:  904:	}
        -:  905:      }
        -:  906:	    
        -:  907:      
    #####:  908:      return 0;
        -:  909:		
        -:  910:    case great_hall:
    #####:  911:      return playGreatHall(currentPlayer, state, handPos);
        -:  912:      /*//+1 Card
        -:  913:      drawCard(currentPlayer, state);
        -:  914:			
        -:  915:      //+1 Actions
        -:  916:      state->numActions++;
        -:  917:			
        -:  918:      //discard card from hand
        -:  919:      discardCard(handPos, currentPlayer, state, 0);
        -:  920:      return 0;*/
        -:  921:		
        -:  922:    case minion:
        -:  923:      //+1 action
    #####:  924:      state->numActions++;
        -:  925:			
        -:  926:      //discard card from hand
    #####:  927:      discardCard(handPos, currentPlayer, state, 0);
        -:  928:			
    #####:  929:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  930:	{
    #####:  931:	  state->coins = state->coins + 2;
    #####:  932:	}
        -:  933:			
    #####:  934:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  935:	{
        -:  936:	  //discard hand
    #####:  937:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  938:	    {
    #####:  939:	      discardCard(handPos, currentPlayer, state, 0);
        -:  940:	    }
        -:  941:				
        -:  942:	  //draw 4
    #####:  943:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  944:	    {
    #####:  945:	      drawCard(currentPlayer, state);
    #####:  946:	    }
        -:  947:				
        -:  948:	  //other players discard hand and redraw if hand size > 4
    #####:  949:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  950:	    {
    #####:  951:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  952:		{
    #####:  953:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  954:		    {
        -:  955:		      //discard hand
    #####:  956:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  957:			{
    #####:  958:			  discardCard(handPos, i, state, 0);
        -:  959:			}
        -:  960:							
        -:  961:		      //draw 4
    #####:  962:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  963:			{
    #####:  964:			  drawCard(i, state);
    #####:  965:			}
    #####:  966:		    }
    #####:  967:		}
    #####:  968:	    }
        -:  969:				
    #####:  970:	}
    #####:  971:      return 0;
        -:  972:		
        -:  973:    case steward:
    #####:  974:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  975:	{
        -:  976:	  //+2 cards
    #####:  977:	  drawCard(currentPlayer, state);
    #####:  978:	  drawCard(currentPlayer, state);
    #####:  979:	}
    #####:  980:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  981:	{
        -:  982:	  //+2 coins
    #####:  983:	  state->coins = state->coins + 2;
    #####:  984:	}
        -:  985:      else
        -:  986:	{
        -:  987:	  //trash 2 cards in hand
    #####:  988:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  989:	  discardCard(choice3, currentPlayer, state, 1);
        -:  990:	}
        -:  991:			
        -:  992:      //discard card from hand
    #####:  993:      discardCard(handPos, currentPlayer, state, 0);
    #####:  994:      return 0;
        -:  995:		
        -:  996:    case tribute:
    #####:  997:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  998:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  999:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1000:	  state->deckCount[nextPlayer]--;
    #####: 1001:	}
    #####: 1002:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1003:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1004:	  state->discardCount[nextPlayer]--;
    #####: 1005:	}
        -: 1006:	else{
        -: 1007:	  //No Card to Reveal
        -: 1008:	  if (DEBUG){
        -: 1009:	    printf("No cards to reveal\n");
        -: 1010:	  }
        -: 1011:	}
    #####: 1012:      }
        -: 1013:	    
        -: 1014:      else{
    #####: 1015:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1016:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1017:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1018:	    state->deckCount[nextPlayer]++;
    #####: 1019:	    state->discard[nextPlayer][i] = -1;
    #####: 1020:	    state->discardCount[nextPlayer]--;
    #####: 1021:	  }
        -: 1022:			    
    #####: 1023:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1024:	} 
    #####: 1025:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1026:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1027:	state->deckCount[nextPlayer]--;
    #####: 1028:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1029:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1030:	state->deckCount[nextPlayer]--;
        -: 1031:      }    
        -: 1032:		       
    #####: 1033:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1034:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1035:	state->playedCardCount++;
    #####: 1036:	tributeRevealedCards[1] = -1;
    #####: 1037:      }
        -: 1038:
    #####: 1039:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1040:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1041:	  state->coins += 2;
    #####: 1042:	}
        -: 1043:		    
    #####: 1044:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1045:	  drawCard(currentPlayer, state);
    #####: 1046:	  drawCard(currentPlayer, state);
    #####: 1047:	}
        -: 1048:	else{//Action Card
    #####: 1049:	  state->numActions = state->numActions + 2;
        -: 1050:	}
    #####: 1051:      }
        -: 1052:	    
    #####: 1053:      return 0;
        -: 1054:		
        -: 1055:    case ambassador:
    #####: 1056:      j = 0;		//used to check if player has enough cards to discard
        -: 1057:
    #####: 1058:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1059:	{
    #####: 1060:	  return -1;				
        -: 1061:	}
        -: 1062:
    #####: 1063:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1064:	{
    #####: 1065:	  return -1;
        -: 1066:	}
        -: 1067:
    #####: 1068:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
    #####: 1070:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1071:	    {
    #####: 1072:	      j++;
    #####: 1073:	    }
    #####: 1074:	}
    #####: 1075:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1076:	{
    #####: 1077:	  return -1;				
        -: 1078:	}
        -: 1079:
        -: 1080:      if (DEBUG) 
        -: 1081:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1082:
        -: 1083:      //increase supply count for choosen card by amount being discarded
    #####: 1084:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1085:			
        -: 1086:      //each other player gains a copy of revealed card
    #####: 1087:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1088:	{
    #####: 1089:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1090:	    {
    #####: 1091:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1092:	    }
    #####: 1093:	}
        -: 1094:
        -: 1095:      //discard played card from hand
    #####: 1096:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1097:
        -: 1098:      //trash copies of cards returned to supply
    #####: 1099:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1100:	{
    #####: 1101:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1102:	    {
    #####: 1103:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1104:		{
    #####: 1105:		  discardCard(i, currentPlayer, state, 1);
    #####: 1106:		  break;
        -: 1107:		}
    #####: 1108:	    }
    #####: 1109:	}			
        -: 1110:
    #####: 1111:      return 0;
        -: 1112:		
        -: 1113:    case cutpurse:
        -: 1114:
    #####: 1115:      updateCoins(currentPlayer, state, 2);
    #####: 1116:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
    #####: 1118:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1119:	    {
    #####: 1120:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1121:		{
    #####: 1122:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1123:		    {
    #####: 1124:		      discardCard(j, i, state, 0);
    #####: 1125:		      break;
        -: 1126:		    }
    #####: 1127:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1128:		    {
    #####: 1129:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1130:			{
        -: 1131:			  if (DEBUG)
        -: 1132:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1133:			}	
    #####: 1134:		      break;
        -: 1135:		    }		
    #####: 1136:		}
        -: 1137:					
    #####: 1138:	    }
        -: 1139:				
    #####: 1140:	}				
        -: 1141:
        -: 1142:      //discard played card from hand
    #####: 1143:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1144:
    #####: 1145:      return 0;
        -: 1146:
        -: 1147:		
        -: 1148:    case embargo: 
        -: 1149:      //+2 Coins
    #####: 1150:      state->coins = state->coins + 2;
        -: 1151:			
        -: 1152:      //see if selected pile is in play
    #####: 1153:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1154:	{
    #####: 1155:	  return -1;
        -: 1156:	}
        -: 1157:			
        -: 1158:      //add embargo token to selected supply pile
    #####: 1159:      state->embargoTokens[choice1]++;
        -: 1160:			
        -: 1161:      //trash card
    #####: 1162:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1163:      return 0;
        -: 1164:		
        -: 1165:    case outpost:
        -: 1166:      //set outpost flag
    #####: 1167:      state->outpostPlayed++;
        -: 1168:			
        -: 1169:      //discard card
    #####: 1170:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1171:      return 0;
        -: 1172:		
        -: 1173:    case salvager:
        -: 1174:      //+1 buy
      130: 1175:      state->numBuys++;
        -: 1176:			
      130: 1177:      if (choice1)
branch  0 taken 80%
branch  1 taken 20%
        -: 1178:        	{
        -: 1179:            //gain coins equal to trashed card
      104: 1180:        	  state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1181:        	  //trash card
      104: 1182:        	  discardCard(choice1, currentPlayer, state, 1);	
      104: 1183:        	}
        -: 1184:        			
        -: 1185:      //discard card
      130: 1186:      discardCard(handPos, currentPlayer, state, 0);
      130: 1187:      return 0;
        -: 1188:		
        -: 1189:    case sea_hag:
    #####: 1190:      return playSeaHag(currentPlayer, state);
        -: 1191:      /*for (i = 0; i < state->numPlayers+1; i++){ //INCORRECT - SHOULD BE i < state->numPlayers. THIS IS A BUG
        -: 1192:	if (i != currentPlayer){
        -: 1193:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        -: 1194:	  state->discardCount[i]++;
        -: 1195:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1196:	}
        -: 1197:      }
        -: 1198:      return 0;*/
        -: 1199:		
        -: 1200:    case treasure_map:
        -: 1201:      //search hand for another treasure_map
    #####: 1202:      index = -1;
    #####: 1203:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1204:	{
    #####: 1205:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1206:	    {
    #####: 1207:	      index = i;
    #####: 1208:	      break;
        -: 1209:	    }
    #####: 1210:	}
    #####: 1211:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1212:	{
        -: 1213:	  //trash both treasure cards
    #####: 1214:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1215:	  discardCard(index, currentPlayer, state, 1);
        -: 1216:
        -: 1217:	  //gain 4 Gold cards
    #####: 1218:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1219:	    {
    #####: 1220:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1221:	    }
        -: 1222:				
        -: 1223:	  //return success
    #####: 1224:	  return 1;
        -: 1225:	}
        -: 1226:			
        -: 1227:      //no second treasure_map found in hand
    #####: 1228:      return -1;
        -: 1229:    }
        -: 1230:	
    #####: 1231:  return -1;
      130: 1232:}
        -: 1233:
        -: 1234:/*int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -: 1235:{
        -: 1236:  int i;
        -: 1237:  int j;
        -: 1238:  int k;
        -: 1239:  int x;
        -: 1240:  int index;
        -: 1241:  int currentPlayer = whoseTurn(state);
        -: 1242:  int nextPlayer = currentPlayer + 1;
        -: 1243:
        -: 1244:  //int tributeRevealedCards[2] = {-1, -1};
        -: 1245:  int temphand[MAX_HAND];// moved above the if statement
        -: 1246:  int drawntreasure=0;
        -: 1247:  //int cardDrawn;
        -: 1248:  int z = 0;// this is the counter for the temp hand
        -: 1249:  if (nextPlayer > (state->numPlayers - 1)){
        -: 1250:    nextPlayer = 0;
        -: 1251:  }
        -: 1252:  
        -: 1253:	
        -: 1254:  //uses switch to select card and perform actions
        -: 1255:  switch( card ) 
        -: 1256:    {
        -: 1257:    case adventurer: 
        -: 1258:	      return playAdventurer(&drawntreasure, state, currentPlayer, temphand, &z);
        -: 1259:			
        -: 1260:    case council_room:
        -: 1261:	     return playCouncilRoom(currentPlayer, state, handPos);
        -: 1262:			
        -: 1263:    case feast: //PASS int currentPlayer, struct* gameState state int temphand[], int choice1
        -: 1264:	     return playFeast(currentPlayer, state, temphand, handPos);
        -: 1265:			
        -: 1266:    case gardens:
        -: 1267:      	return playGardens();
        -: 1268:			
        -: 1269:    case mine: //PASS int currentPlayer, struct* gameState state, int choice1, int choice2, int handPos
        -: 1270:    	return playMine(currentPlayer, state, choice1, choice2, handPos);
        -: 1271:			
        -: 1272:    case remodel: // PASS int currentPlayer, struct* gameState state, int choice1, int choice2, int handPos	 
        -: 1273:    	return playRemodel(currentPlayer, state, choice1, choice2, handPos);  
        -: 1274:
        -: 1275:    case smithy: // PASS int currentPlayer, struct* gameState state, int handPos
        -: 1276:    	return playSmithy(currentPlayer, state, handPos);
        -: 1277:		
        -: 1278:    case village: // PASS int currentPlayer, struct gameState *state, int handPos
        -: 1279:    	return playVillage(currentPlayer, state, handPos);
        -: 1280:		
        -: 1281:    case baron: // int currentPlayer, struct gameState *state, int choice1
        -: 1282:    	return playBaron(currentPlayer, state, choice1);
        -: 1283:		
        -: 1284:    case great_hall:// int currentPlayer, struct gameState *state, int handPos 
        -: 1285:	    return playGreatHall(currentPlayer, state, handPos);
        -: 1286:		
        -: 1287:    case minion: // int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2
        -: 1288:    	return playMinion(currentPlayer, state, handPos, choice1, choice2);
        -: 1289:			
        -: 1290:    case steward: // int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3
        -: 1291:    	return playSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
        -: 1292:		
        -: 1293:    case tribute: // int currentPlayer, struct gameState *state, int nextPlayer
        -: 1294:    	return playTribute(currentPlayer, state, nextPlayer);
        -: 1295:		
        -: 1296:    case ambassador: // int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos
        -: 1297:	    return playAmbassador(currentPlayer, state, choice1, choice2, handPos);
        -: 1298:		
        -: 1299:    case cutpurse: // int currentPlayer, struct gameState *state, int handPos
        -: 1300:    	return playCutpurse(currentPlayer, state, handPos);
        -: 1301:		
        -: 1302:    case embargo: // int currentPlayer, struct gameState *state, int handPos, int choice1
        -: 1303:    	return playEmbargo(currentPlayer, state, handPos, choice1);
        -: 1304:		
        -: 1305:    case outpost: // int currentPlayer, struct gameState *state, int handPos
        -: 1306:    	return playOutpost(currentPlayer, state, handPos);
        -: 1307:
        -: 1308:    case salvager: // int currentPlayer, struct gameState *state, int handPos, int choice1
        -: 1309:    	return playSalvager(currentPlayer, state, handPos, choice1);
        -: 1310:		
        -: 1311:    case sea_hag: // int currentPlayer, struct gameState *state
        -: 1312:    	return playSeaHag(currentPlayer, state);
        -: 1313:		
        -: 1314:    case treasure_map: // int currentPlayer, struct gameState *state, int handPos
        -: 1315:    	return playTreasureMap(currentPlayer, state, handPos);
        -: 1316:
        -: 1317:	    }
        -: 1318:	
        -: 1319:  return -1;
        -: 1320:}*/
        -: 1321:
function discardCard called 234 returned 100% blocks executed 90%
        -: 1322:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1323:{
        -: 1324:	
        -: 1325:  //if card is not trashed, added to Played pile 
      234: 1326:  if (trashFlag < 1)
branch  0 taken 56%
branch  1 taken 44%
        -: 1327:    {
        -: 1328:      //add card to played pile
      130: 1329:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      130: 1330:      state->playedCardCount++;
      130: 1331:    }
        -: 1332:	
        -: 1333:  //set played card to -1
      234: 1334:  state->hand[currentPlayer][handPos] = -1;
        -: 1335:	
        -: 1336:  //remove card from player's hand
        -: 1337:  
      234: 1338:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 22%
branch  1 taken 78%
        -: 1339:    {
        -: 1340:      //reduce number of cards in hand
       52: 1341:      state->handCount[currentPlayer]--;
       52: 1342:    }
      182: 1343:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1344:    {
        -: 1345:      //reduce number of cards in hand
    #####: 1346:      state->handCount[currentPlayer]--;
    #####: 1347:    }
        -: 1348:  else 	
        -: 1349:    {
        -: 1350:      //replace discarded card with last card in hand
      182: 1351:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1352:      //set last card to -1
      182: 1353:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1354:      //reduce number of cards in hand
      182: 1355:      state->handCount[currentPlayer]--;
        -: 1356:    }
        -: 1357:	
      234: 1358:  return 0;
        -: 1359:}
        -: 1360:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1361:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1362:{
        -: 1363:  //Note: supplyPos is enum of choosen card
        -: 1364:	
        -: 1365:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1366:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1367:    {
    #####: 1368:      return -1;
        -: 1369:    }
        -: 1370:	
        -: 1371:  //added card for [whoseTurn] current player:
        -: 1372:  // toFlag = 0 : add to discard
        -: 1373:  // toFlag = 1 : add to deck
        -: 1374:  // toFlag = 2 : add to hand
        -: 1375:
    #####: 1376:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1377:    {
    #####: 1378:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1379:      state->deckCount[player]++;
    #####: 1380:    }
    #####: 1381:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1382:    {
    #####: 1383:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1384:      state->handCount[player]++;
    #####: 1385:    }
        -: 1386:  else
        -: 1387:    {
    #####: 1388:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1389:      state->discardCount[player]++;
        -: 1390:    }
        -: 1391:	
        -: 1392:  //decrease number in supply pile
    #####: 1393:  state->supplyCount[supplyPos]--;
        -: 1394:	 
    #####: 1395:  return 0;
    #####: 1396:}
        -: 1397:
function updateCoins called 1 returned 100% blocks executed 85%
        -: 1398:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1399:{
        -: 1400:  int i;
        -: 1401:	
        -: 1402:  //reset coin count
        1: 1403:  state->coins = 0;
        -: 1404:
        -: 1405:  //add coins for each Treasure card in player's hand
       12: 1406:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1407:    {
        5: 1408:      if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1409:	{
        4: 1410:	  state->coins += 1;
        4: 1411:	}
        1: 1412:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1413:	{
    #####: 1414:	  state->coins += 2;
    #####: 1415:	}
        1: 1416:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1417:	{
    #####: 1418:	  state->coins += 3;
    #####: 1419:	}	
        5: 1420:    }	
        -: 1421:
        -: 1422:  //add bonus
        1: 1423:  state->coins += bonus;
        -: 1424:
        1: 1425:  return 0;
        -: 1426:}
        -: 1427:
        -: 1428:/************************************************************/
        -: 1429:/************************************************************/
        -: 1430:/************************************************************/
        -: 1431://new functions 4-12-17
        -: 1432:
function playAdventurer called 0 returned 0% blocks executed 0%
        -: 1433:int playAdventurer(struct gameState *state, int currentPlayer)
        -: 1434:{
        -: 1435:	int cardDrawn;
    #####: 1436:	int z = 0;
    #####: 1437:	int drawntreasure = 0;
        -: 1438:	int temphand[MAX_HAND];
        -: 1439:
    #####: 1440:	while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
        -: 1441:		
    #####: 1442:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1443:		  shuffle(currentPlayer, state);
    #####: 1444:		}
        -: 1445:		
    #####: 1446:    drawCard(currentPlayer, state);
    #####: 1447:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card. CORRECT
        -: 1448:		//cardDrawn = state->hand[currentPlayer][0]; //INCORRECT - this is a bug. cardDrawn should be last element in the hand, not first
        -: 1449:		
    #####: 1450:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1451:		  drawntreasure++;
    #####: 1452:    }
        -: 1453:		
        -: 1454:    else{
    #####: 1455:		  temphand[z]=cardDrawn;
    #####: 1456:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1457:		  z++;
        -: 1458:		}
        -: 1459:	}
        -: 1460:	 
    #####: 1461:  while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1462:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1463:		z=z-1;
        -: 1464:	 }
        -: 1465:	
    #####: 1466:  return 0;
        -: 1467:}
        -: 1468:
        -: 1469:/*int playCouncilRoom(int currentPlayer, struct gameState *state, int handPos)
        -: 1470:{
        -: 1471:	int i;	
        -: 1472:	//+4 Cards
        -: 1473:      for (i = 0; i < 4; i++)
        -: 1474:	{
        -: 1475:	  drawCard(currentPlayer, state);
        -: 1476:	}
        -: 1477:			
        -: 1478:      //+1 Buy
        -: 1479:      state->numBuys++;
        -: 1480:			
        -: 1481:      //Each other player draws a card
        -: 1482:      for (i = 0; i < state->numPlayers; i++)
        -: 1483:		{
        -: 1484:		  if ( i != currentPlayer )
        -: 1485:		    {
        -: 1486:		      drawCard(i, state);
        -: 1487:		    }
        -: 1488:		}
        -: 1489:				
        -: 1490:      //put played card in played card pile
        -: 1491:      discardCard(handPos, currentPlayer, state, 0);
        -: 1492:			
        -: 1493:      return 0;
        -: 1494:}*/
        -: 1495:
        -: 1496:/*int playFeast(int currentPlayer, struct gameState *state, int temphand[], int choice1)
        -: 1497:{
        -: 1498:	 //gain card with cost up to 5
        -: 1499:      //Backup hand
        -: 1500:	int i, x;
        -: 1501:
        -: 1502:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -: 1503:	temphand[i] = state->hand[currentPlayer][i];//Backup card
        -: 1504:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1505:      }
        -: 1506:      //Backup hand
        -: 1507:
        -: 1508:      //Update Coins for Buy
        -: 1509:      updateCoins(currentPlayer, state, 5);
        -: 1510:      x = 1;//Condition to loop on
        -: 1511:      while( x == 1) {//Buy one card
        -: 1512:	if (supplyCount(choice1, state) <= 0){
        -: 1513:	  if (DEBUG)
        -: 1514:	    printf("None of that card left, sorry!\n");
        -: 1515:
        -: 1516:	  if (DEBUG){
        -: 1517:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1518:	  }
        -: 1519:	}
        -: 1520:	else if (state->coins < getCost(choice1)){
        -: 1521:	  printf("That card is too expensive!\n");
        -: 1522:
        -: 1523:	  if (DEBUG){
        -: 1524:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1525:	  }
        -: 1526:	}
        -: 1527:	else{
        -: 1528:
        -: 1529:	  if (DEBUG){
        -: 1530:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1531:	  }
        -: 1532:
        -: 1533:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        -: 1534:	  x = 0;//No more buying cards
        -: 1535:
        -: 1536:	  if (DEBUG){
        -: 1537:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1538:	  }
        -: 1539:
        -: 1540:	}
        -: 1541:      }     
        -: 1542:
        -: 1543:      //Reset Hand
        -: 1544:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -: 1545:	state->hand[currentPlayer][i] = temphand[i];
        -: 1546:	temphand[i] = -1;
        -: 1547:      }
        -: 1548:      //Reset Hand
        -: 1549:      			
        -: 1550:      return 0;
        -: 1551:}*/
        -: 1552:
        -: 1553:/*int playGardens()
        -: 1554:{
        -: 1555:	return -1;
        -: 1556:}*/
        -: 1557:/*
        -: 1558: int playMine(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) 
        -: 1559: {
        -: 1560:     int i, j;
        -: 1561:
        -: 1562:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1563:
        -: 1564:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -: 1565:	{
        -: 1566:	  return -1;
        -: 1567:	}
        -: 1568:		
        -: 1569:      if (choice2 > treasure_map || choice2 < curse)
        -: 1570:	{
        -: 1571:	  return -1;
        -: 1572:	}
        -: 1573:
        -: 1574:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -: 1575:	{
        -: 1576:	  return -1;
        -: 1577:	}
        -: 1578:
        -: 1579:      gainCard(choice2, state, 2, currentPlayer);
        -: 1580:
        -: 1581:      //discard card from hand
        -: 1582:      discardCard(handPos, currentPlayer, state, 0);
        -: 1583:
        -: 1584:      //discard trashed card
        -: 1585:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1586:	{
        -: 1587:	  if (state->hand[currentPlayer][i] == j)
        -: 1588:	    {
        -: 1589:	      discardCard(i, currentPlayer, state, 0);			
        -: 1590:	      break;
        -: 1591:	    }
        -: 1592:	}
        -: 1593:			
        -: 1594:      return 0;
        -: 1595:}*/
        -: 1596:
        -: 1597:/*int playRemodel(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos)
        -: 1598:{
        -: 1599:     int i, j; 
        -: 1600:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1601:
        -: 1602:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1603:	{
        -: 1604:	  return -1;
        -: 1605:	}
        -: 1606:
        -: 1607:      gainCard(choice2, state, 0, currentPlayer);
        -: 1608:
        -: 1609:      //discard card from hand
        -: 1610:      discardCard(handPos, currentPlayer, state, 0);
        -: 1611:
        -: 1612:      //discard trashed card
        -: 1613:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1614:	{
        -: 1615:	  if (state->hand[currentPlayer][i] == j)
        -: 1616:	    {
        -: 1617:	      discardCard(i, currentPlayer, state, 0);			
        -: 1618:	      break;
        -: 1619:	    }
        -: 1620:	}
        -: 1621:
        -: 1622:
        -: 1623:      return 0;
        -: 1624:  }*/
        -: 1625:
function playSmithy called 0 returned 0% blocks executed 0%
        -: 1626:int playSmithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1627:{
        -: 1628:      //+3 Cards
        -: 1629:	int i;
    #####: 1630:      for (i = 0; i <= 3; i++) //INCORRECT, THIS IS A BUG. SHOULD BE i < 3 not i <= 3.
branch  0 never executed
branch  1 never executed
        -: 1631:    	{
    #####: 1632:    	  drawCard(currentPlayer, state);
    #####: 1633:    	}
        -: 1634:			
        -: 1635:      //discard card from hand
    #####: 1636:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1637:      return 0;
        -: 1638:}
        -: 1639:
function playVillage called 0 returned 0% blocks executed 0%
        -: 1640: int playVillage(int currentPlayer, struct gameState *state, int handPos)
        -: 1641: {
        -: 1642:      //+1 Card
    #####: 1643:      drawCard(currentPlayer, state);
        -: 1644:			
        -: 1645:      //+2 Actions
        -: 1646:      //state->numActions = state->numActions + 2;
    #####: 1647:      state->numActions = 2; //	INCORRECT - THIS IS A BUG. This resets numActions to 2 rather than adding 2 to it
        -: 1648:			
        -: 1649:      //discard played card from hand
    #####: 1650:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1651:      return 0;
        -: 1652:}
        -: 1653:
        -: 1654: /*int playBaron(int currentPlayer, struct gameState *state, int choice1)
        -: 1655: {
        -: 1656:      state->numBuys++;//Increase buys by 1!
        -: 1657:      if (choice1 > 0){//Boolean true or going to discard an estate
        -: 1658:	int p = 0;//Iterator for hand!
        -: 1659:	int card_not_discarded = 1;//Flag for discard set!
        -: 1660:	
        -: 1661:	while(card_not_discarded){
        -: 1662:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
        -: 1663:	    state->coins += 4;//Add 4 coins to the amount of coins
        -: 1664:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        -: 1665:	    state->discardCount[currentPlayer]++;
        -: 1666:	    
        -: 1667:	    for (;p < state->handCount[currentPlayer]; p++){
        -: 1668:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1669:	    }
        -: 1670:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        -: 1671:	    state->handCount[currentPlayer]--;
        -: 1672:	    card_not_discarded = 0;//Exit the loop
        -: 1673:	  }
        -: 1674:	 
        -: 1675:	  else if (p > state->handCount[currentPlayer]){
        -: 1676:	    if(DEBUG) {
        -: 1677:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1678:	      printf("Must gain an estate if there are any\n");
        -: 1679:	    }
        -: 1680:	    if (supplyCount(estate, state) > 0){
        -: 1681:	      gainCard(estate, state, 0, currentPlayer);
        -: 1682:	      state->supplyCount[estate]--;//Decrement estates
        -: 1683:	      if (supplyCount(estate, state) == 0){
        -: 1684:		isGameOver(state);
        -: 1685:	      }
        -: 1686:	    }
        -: 1687:	    card_not_discarded = 0;//Exit the loop
        -: 1688:	  }
        -: 1689:			    
        -: 1690:	  else{
        -: 1691:	    p++;//Next card
        -: 1692:	  }
        -: 1693:	}
        -: 1694:      }
        -: 1695:			    
        -: 1696:      else{
        -: 1697:	if (supplyCount(estate, state) > 0){
        -: 1698:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -: 1699:	  state->supplyCount[estate]--;//Decrement Estates
        -: 1700:	  if (supplyCount(estate, state) == 0){
        -: 1701:	    isGameOver(state);
        -: 1702:	  }
        -: 1703:	}
        -: 1704:      }
        -: 1705:	    
        -: 1706:      
        -: 1707:      return 0;
        -: 1708:  }*/
        -: 1709:
function playGreatHall called 0 returned 0% blocks executed 0%
        -: 1710:int playGreatHall(int currentPlayer, struct gameState *state, int handPos)
        -: 1711:{
        -: 1712:  //+1 Card
    #####: 1713:  drawCard(currentPlayer, state);
        -: 1714:		
        -: 1715:  //+1 Actions
    #####: 1716:  state->numActions++;
        -: 1717:		
        -: 1718:  //discard card from hand
    #####: 1719:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1720:  return 0;
        -: 1721:}
        -: 1722:
        -: 1723:/*int playMinion(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2)
        -: 1724:{
        -: 1725:  int i, j; 
        -: 1726: 
        -: 1727:  //+1 action
        -: 1728:  state->numActions++;
        -: 1729:		
        -: 1730:  //discard card from hand
        -: 1731:  discardCard(handPos, currentPlayer, state, 0);
        -: 1732:		
        -: 1733:  if (choice1)		//+2 coins
        -: 1734:{
        -: 1735:  state->coins = state->coins + 2;
        -: 1736:}
        -: 1737:		
        -: 1738:  else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1739:{
        -: 1740:  //discard hand
        -: 1741:  while(numHandCards(state) > 0)
        -: 1742:    {
        -: 1743:      discardCard(handPos, currentPlayer, state, 0);
        -: 1744:    }
        -: 1745:			
        -: 1746:  //draw 4
        -: 1747:  for (i = 0; i < 4; i++)
        -: 1748:    {
        -: 1749:      drawCard(currentPlayer, state);
        -: 1750:    }
        -: 1751:			
        -: 1752:  //other players discard hand and redraw if hand size > 4
        -: 1753:  for (i = 0; i < state->numPlayers; i++)
        -: 1754:    {
        -: 1755:      if (i != currentPlayer)
        -: 1756:	{
        -: 1757:	  if ( state->handCount[i] > 4 )
        -: 1758:	    {
        -: 1759:	      //discard hand
        -: 1760:	      while( state->handCount[i] > 0 )
        -: 1761:		{
        -: 1762:		  discardCard(handPos, i, state, 0);
        -: 1763:		}
        -: 1764:						
        -: 1765:	      //draw 4
        -: 1766:	      for (j = 0; j < 4; j++)
        -: 1767:		{
        -: 1768:		  drawCard(i, state);
        -: 1769:		}
        -: 1770:	    }
        -: 1771:	}
        -: 1772:    }
        -: 1773:			
        -: 1774:	}
        -: 1775:  return 0;
        -: 1776:}*/
        -: 1777:
        -: 1778:/*int playSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3)
        -: 1779:{
        -: 1780:	if (choice1 == 1)
        -: 1781:	{
        -: 1782:	  //+2 cards
        -: 1783:	  drawCard(currentPlayer, state);
        -: 1784:	  drawCard(currentPlayer, state);
        -: 1785:	}
        -: 1786:      else if (choice1 == 2)
        -: 1787:	{
        -: 1788:	  //+2 coins
        -: 1789:	  state->coins = state->coins + 2;
        -: 1790:	}
        -: 1791:      else
        -: 1792:	{
        -: 1793:	  //trash 2 cards in hand
        -: 1794:	  discardCard(choice2, currentPlayer, state, 1);
        -: 1795:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1796:	}
        -: 1797:			
        -: 1798:      //discard card from hand
        -: 1799:      discardCard(handPos, currentPlayer, state, 0);
        -: 1800:      return 0;
        -: 1801:}*/
        -: 1802:
        -: 1803:/*int playTribute(int currentPlayer, struct gameState *state, int nextPlayer)
        -: 1804:{  
        -: 1805:	int i; 
        -: 1806:	int tributeRevealedCards[2] = {-1, -1};
        -: 1807:
        -: 1808:	  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
        -: 1809:	if (state->deckCount[nextPlayer] > 0){
        -: 1810:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1811:	  state->deckCount[nextPlayer]--;
        -: 1812:	}
        -: 1813:	else if (state->discardCount[nextPlayer] > 0){
        -: 1814:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
        -: 1815:	  state->discardCount[nextPlayer]--;
        -: 1816:	}
        -: 1817:	else{
        -: 1818:	  //No Card to Reveal
        -: 1819:	  if (DEBUG){
        -: 1820:	    printf("No cards to reveal\n");
        -: 1821:	  }
        -: 1822:	}
        -: 1823:	  }
        -: 1824:	    
        -: 1825:	  else{
        -: 1826:	if (state->deckCount[nextPlayer] == 0){
        -: 1827:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
        -: 1828:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
        -: 1829:	    state->deckCount[nextPlayer]++;
        -: 1830:	    state->discard[nextPlayer][i] = -1;
        -: 1831:	    state->discardCount[nextPlayer]--;
        -: 1832:	  }
        -: 1833:			    
        -: 1834:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1835:	} 
        -: 1836:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1837:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1838:	state->deckCount[nextPlayer]--;
        -: 1839:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1840:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1841:	state->deckCount[nextPlayer]--;
        -: 1842:	  }    
        -: 1843:		       
        -: 1844:	  if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
        -: 1845:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        -: 1846:	state->playedCardCount++;
        -: 1847:	tributeRevealedCards[1] = -1;
        -: 1848:	  }
        -: 1849:
        -: 1850:	  for (i = 0; i <= 2; i ++){
        -: 1851:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
        -: 1852:	  state->coins += 2;
        -: 1853:	}
        -: 1854:		    
        -: 1855:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
        -: 1856:	  drawCard(currentPlayer, state);
        -: 1857:	  drawCard(currentPlayer, state);
        -: 1858:	}
        -: 1859:	else{//Action Card
        -: 1860:	  state->numActions = state->numActions + 2;
        -: 1861:	}
        -: 1862:	  }
        -: 1863:	    
        -: 1864:	  return 0;
        -: 1865:}*/
        -: 1866:
        -: 1867:/*int playAmbassador(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos)
        -: 1868:{ 
        -: 1869:	int i;
        -: 1870:    int j = 0;		//used to check if player has enough cards to discard
        -: 1871:
        -: 1872:      if (choice2 > 2 || choice2 < 0)
        -: 1873:	{
        -: 1874:	  return -1;				
        -: 1875:	}
        -: 1876:
        -: 1877:      if (choice1 == handPos)
        -: 1878:	{
        -: 1879:	  return -1;
        -: 1880:	}
        -: 1881:
        -: 1882:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1883:	{
        -: 1884:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1885:	    {
        -: 1886:	      j++;
        -: 1887:	    }
        -: 1888:	}
        -: 1889:      if (j < choice2)
        -: 1890:	{
        -: 1891:	  return -1;				
        -: 1892:	}
        -: 1893:
        -: 1894:      if (DEBUG) 
        -: 1895:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1896:
        -: 1897:      //increase supply count for choosen card by amount being discarded
        -: 1898:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1899:			
        -: 1900:      //each other player gains a copy of revealed card
        -: 1901:      for (i = 0; i < state->numPlayers; i++)
        -: 1902:	{
        -: 1903:	  if (i != currentPlayer)
        -: 1904:	    {
        -: 1905:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1906:	    }
        -: 1907:	}
        -: 1908:
        -: 1909:      //discard played card from hand
        -: 1910:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1911:
        -: 1912:      //trash copies of cards returned to supply
        -: 1913:      for (j = 0; j < choice2; j++)
        -: 1914:	{
        -: 1915:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1916:	    {
        -: 1917:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1918:		{
        -: 1919:		  discardCard(i, currentPlayer, state, 1);
        -: 1920:		  break;
        -: 1921:		}
        -: 1922:	    }
        -: 1923:	}			
        -: 1924:
        -: 1925:      return 0;
        -: 1926:}*/
        -: 1927:
        -: 1928:/*int playCutpurse(int currentPlayer, struct gameState *state, int handPos)
        -: 1929:{	
        -: 1930:	int i, j, k;
        -: 1931:	  updateCoins(currentPlayer, state, 2);
        -: 1932:	  for (i = 0; i < state->numPlayers; i++)
        -: 1933:	{
        -: 1934:	  if (i != currentPlayer)
        -: 1935:	    {
        -: 1936:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1937:		{
        -: 1938:		  if (state->hand[i][j] == copper)
        -: 1939:		    {
        -: 1940:		      discardCard(j, i, state, 0);
        -: 1941:		      break;
        -: 1942:		    }
        -: 1943:		  if (j == state->handCount[i])
        -: 1944:		    {
        -: 1945:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1946:			{
        -: 1947:			  if (DEBUG)
        -: 1948:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1949:			}	
        -: 1950:		      break;
        -: 1951:		    }		
        -: 1952:		}
        -: 1953:					
        -: 1954:	    }
        -: 1955:				
        -: 1956:	}				
        -: 1957:
        -: 1958:  //discard played card from hand
        -: 1959:  discardCard(handPos, currentPlayer, state, 0);			
        -: 1960:
        -: 1961:  return 0;
        -: 1962:}*/
        -: 1963:
        -: 1964: /*int playEmbargo(int currentPlayer, struct gameState *state, int handPos, int choice1)
        -: 1965:{ 
        -: 1966: 	//+2 Coins
        -: 1967:     state->coins = state->coins + 2;
        -: 1968:			
        -: 1969:      //see if selected pile is in play
        -: 1970:      if ( state->supplyCount[choice1] == -1 )
        -: 1971:	{
        -: 1972:	  return -1;
        -: 1973:	}
        -: 1974:			
        -: 1975:      //add embargo token to selected supply pile
        -: 1976:      state->embargoTokens[choice1]++;
        -: 1977:			
        -: 1978:      //trash card
        -: 1979:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1980:      return 0;
        -: 1981: }*/
        -: 1982:
        -: 1983:/*int playOutpost(int currentPlayer, struct gameState *state, int handPos)
        -: 1984:{
        -: 1985: //set outpost flag
        -: 1986:  state->outpostPlayed++;
        -: 1987:		
        -: 1988:  //discard card
        -: 1989:  discardCard(handPos, currentPlayer, state, 0);
        -: 1990:  return 0;
        -: 1991:}*/
        -: 1992:
        -: 1993:/*int playSalvager(int currentPlayer, struct gameState *state, int handPos, int choice1)
        -: 1994:{
        -: 1995:	//+1 buy
        -: 1996:	  state->numBuys++;
        -: 1997:			
        -: 1998:	  if (choice1)
        -: 1999:	{
        -: 2000:	  //gain coins equal to trashed card
        -: 2001:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 2002:	  //trash card
        -: 2003:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 2004:	}
        -: 2005:			
        -: 2006:	  //discard card
        -: 2007:	  discardCard(handPos, currentPlayer, state, 0);
        -: 2008:	  return 0;
        -: 2009:}*/
        -: 2010:
function playSeaHag called 0 returned 0% blocks executed 0%
        -: 2011:int playSeaHag(int currentPlayer, struct gameState *state)
        -: 2012:{
        -: 2013:  	int i;
    #####: 2014:  	 for (i = 0; i < state->numPlayers+1; i++){ //INCORRECT - SHOULD BE i < state->numPlayers. THIS IS A BUG
branch  0 never executed
branch  1 never executed
    #####: 2015:		if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 2016:		  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
    #####: 2017:		  state->deckCount[i]--;
    #####: 2018:		  state->discardCount[i]++;
    #####: 2019:		  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 2020:		}
    #####: 2021:	  }
    #####: 2022:	return 0;
        -: 2023:}
        -: 2024:
        -: 2025:/*int playTreasureMap(int currentPlayer, struct gameState *state, int handPos)
        -: 2026:{
        -: 2027:	int i, index;
        -: 2028:      //search hand for another treasure_map
        -: 2029:      index = -1;
        -: 2030:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 2031:	{
        -: 2032:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 2033:	    {
        -: 2034:	      index = i;
        -: 2035:	      break;
        -: 2036:	    }
        -: 2037:	}
        -: 2038:      if (index > -1)
        -: 2039:	{
        -: 2040:	  //trash both treasure cards
        -: 2041:	  discardCard(handPos, currentPlayer, state, 1);
        -: 2042:	  discardCard(index, currentPlayer, state, 1);
        -: 2043:
        -: 2044:	  //gain 4 Gold cards
        -: 2045:	  for (i = 0; i < 4; i++)
        -: 2046:	    {
        -: 2047:	      gainCard(gold, state, 1, currentPlayer);
        -: 2048:	    }
        -: 2049:				
        -: 2050:	  //return success
        -: 2051:	  return 1;
        -: 2052:	}
        -: 2053:			
        -: 2054:      //no second treasure_map found in hand
        -: 2055:      return -1;
        -: 2056:}*/
        -: 2057:
        -: 2058://end of dominion.c
        -: 2059:
cardtest4.c removed from makefile due to segfault
