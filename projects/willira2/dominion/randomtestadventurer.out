Results from randomtestadventurer: 
handCount: 5
deckCount: 454
	TEST FAILURE: hand size: 7	expected: 6
	TEST FAILURE: adventurer cards in hand: 1	expected: 0
TEST FAILURE
handCount: 5
deckCount: 138
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 216
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 53
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 157
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 53
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 353
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 118
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 22
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 419
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 472
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 439
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 193
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 254
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 364
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 252
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 339
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 358
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 437
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 225
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 404
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 156
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 343
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 120
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 15
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 271
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 319
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 71
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 448
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 289
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 46
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 36
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 180
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 304
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 321
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 227
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 169
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 206
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 265
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 265
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 457
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 213
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 378
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 85
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 457
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 463
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 253
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 127
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 441
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 456
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 422
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 342
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 58
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 158
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 444
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 135
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 290
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 64
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 96
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 352
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 155
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 206
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 193
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 200
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 367
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 491
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 82
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 478
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 486
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 169
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 341
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 30
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 193
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 425
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 426
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 240
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 490
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 371
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 298
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 164
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 208
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 172
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 257
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 351
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 484
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 331
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 121
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 80
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 405
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 108
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 296
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 479
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 483
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 365
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 121
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 190
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 446
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 127
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 339
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 206
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 470
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 296
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 361
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 218
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 18
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 267
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 222
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 26
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 439
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 416
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 383
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 70
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 445
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 293
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 404
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 401
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 123
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 485
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 98
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 359
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 247
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 6
	TEST FAILURE: hand size: 2	expected: 6
TEST FAILURE
handCount: 5
deckCount: 386
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 119
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 425
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 251
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 408
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 448
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 384
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 425
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 335
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 209
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 310
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 82
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 226
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 285
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 310
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 170
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 58
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 230
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 29
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 110
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 118
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 140
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 41
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 180
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 212
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 331
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 341
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 188
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 79
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 115
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
handCount: 5
deckCount: 202
	TEST FAILURE: hand size: 7	expected: 6
TEST FAILURE
smithy card: FAIL
Function 'compare'
Lines executed:100.00% of 6
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
No calls

Function 'newGame'
Lines executed:0.00% of 2
No branches
No calls

Function 'kingdomCards'
Lines executed:0.00% of 12
No branches
No calls

Function 'initializeGame'
Lines executed:0.00% of 78
Branches executed:0.00% of 46
Taken at least once:0.00% of 46
No calls

Function 'shuffle'
Lines executed:100.00% of 18
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playCard'
Lines executed:0.00% of 14
Branches executed:0.00% of 10
Taken at least once:0.00% of 10
No calls

Function 'buyCard'
Lines executed:0.00% of 13
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'numHandCards'
Lines executed:0.00% of 1
No branches
No calls

Function 'handCard'
Lines executed:0.00% of 2
No branches
No calls

Function 'supplyCount'
Lines executed:0.00% of 1
No branches
No calls

Function 'fullDeckCount'
Lines executed:0.00% of 11
Branches executed:0.00% of 12
Taken at least once:0.00% of 12
No calls

Function 'whoseTurn'
Lines executed:0.00% of 1
No branches
No calls

Function 'endTurn'
Lines executed:0.00% of 22
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'isGameOver'
Lines executed:0.00% of 12
Branches executed:0.00% of 8
Taken at least once:0.00% of 8
No calls

Function 'scoreFor'
Lines executed:0.00% of 26
Branches executed:0.00% of 42
Taken at least once:0.00% of 42
No calls

Function 'getWinners'
Lines executed:0.00% of 33
Branches executed:0.00% of 22
Taken at least once:0.00% of 22
No calls

Function 'drawCard'
Lines executed:70.83% of 24
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
No calls

Function 'getCost'
Lines executed:0.00% of 30
Branches executed:0.00% of 28
Taken at least once:0.00% of 28
No calls

Function 'cardEffect'
Lines executed:0.00% of 256
Branches executed:0.00% of 181
Taken at least once:0.00% of 181
No calls

Function 'discardCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'gainCard'
Lines executed:0.00% of 15
Branches executed:0.00% of 6
Taken at least once:0.00% of 6
No calls

Function 'updateCoins'
Lines executed:100.00% of 14
Branches executed:100.00% of 8
Taken at least once:100.00% of 8
No calls

Function 'playAdventurer'
Lines executed:100.00% of 18
Branches executed:100.00% of 12
Taken at least once:100.00% of 12
No calls

Function 'playSmithy'
Lines executed:0.00% of 5
Branches executed:0.00% of 2
Taken at least once:0.00% of 2
No calls

Function 'playVillage'
Lines executed:0.00% of 4
No branches
No calls

Function 'playGreatHall'
Lines executed:0.00% of 4
No branches
No calls

Function 'playSeaHag'
Lines executed:0.00% of 9
Branches executed:0.00% of 4
Taken at least once:0.00% of 4
No calls

File 'dominion.c'
Lines executed:11.30% of 646
Branches executed:9.11% of 417
Taken at least once:8.63% of 417
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:// set NOISY_TEST to 0 to remove printfs from output
        -:    9:#define NOISY_TEST 1
        -:   10:
        -:   11:
function compare called 153030 returned 100% blocks executed 100%
        -:   12:int compare(const void* a, const void* b) {
   153030:   13:  if (*(int*)a > *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
    55118:   14:    return 1;
    97912:   15:  if (*(int*)a < *(int*)b)
branch  0 taken 55%
branch  1 taken 45%
    53940:   16:    return -1;
    43972:   17:  return 0;
   153030:   18:}
        -:   19:
function newGame called 0 returned 0% blocks executed 0%
        -:   20:struct gameState* newGame() {
    #####:   21:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   22:  return g;
        -:   23:}
        -:   24:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   25:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   26:		  int k8, int k9, int k10) {
    #####:   27:  int* k = malloc(10 * sizeof(int));
    #####:   28:  k[0] = k1;
    #####:   29:  k[1] = k2;
    #####:   30:  k[2] = k3;
    #####:   31:  k[3] = k4;
    #####:   32:  k[4] = k5;
    #####:   33:  k[5] = k6;
    #####:   34:  k[6] = k7;
    #####:   35:  k[7] = k8;
    #####:   36:  k[8] = k9;
    #####:   37:  k[9] = k10;
    #####:   38:  return k;
        -:   39:}
        -:   40:
function initializeGame called 0 returned 0% blocks executed 0%
        -:   41:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   42:		   struct gameState *state) {
        -:   43:
        -:   44:  int i;
        -:   45:  int j;
        -:   46:  int it;			
        -:   47:  //set up random number generator
    #####:   48:  SelectStream(1);
    #####:   49:  PutSeed((long)randomSeed);
        -:   50:  
        -:   51:  //check number of players
    #####:   52:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   53:    {
    #####:   54:      return -1;
        -:   55:    }
        -:   56:
        -:   57:  //set number of players
    #####:   58:  state->numPlayers = numPlayers;
        -:   59:
        -:   60:  //check selected kingdom cards are different
    #####:   61:  for (i = 0; i < 10; i++)
branch  0 never executed
branch  1 never executed
        -:   62:    {
    #####:   63:      for (j = 0; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:   64:        {
    #####:   65:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   66:	    {
    #####:   67:	      return -1;
        -:   68:	    }
    #####:   69:        }
    #####:   70:    }
        -:   71:
        -:   72:
        -:   73:  //initialize supply
        -:   74:  ///////////////////////////////
        -:   75:
        -:   76:  //set number of Curse cards
    #####:   77:  if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 10;
    #####:   80:    }
    #####:   81:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 20;
    #####:   84:    }
        -:   85:  else
        -:   86:    {
    #####:   87:      state->supplyCount[curse] = 30;
        -:   88:    }
        -:   89:
        -:   90:  //set number of Victory cards
    #####:   91:  if (numPlayers == 2)
branch  0 never executed
branch  1 never executed
        -:   92:    {
    #####:   93:      state->supplyCount[estate] = 8;
    #####:   94:      state->supplyCount[duchy] = 8;
    #####:   95:      state->supplyCount[province] = 8;
    #####:   96:    }
        -:   97:  else
        -:   98:    {
    #####:   99:      state->supplyCount[estate] = 12;
    #####:  100:      state->supplyCount[duchy] = 12;
    #####:  101:      state->supplyCount[province] = 12;
        -:  102:    }
        -:  103:
        -:  104:  //set number of Treasure cards
    #####:  105:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  106:  state->supplyCount[silver] = 40;
    #####:  107:  state->supplyCount[gold] = 30;
        -:  108:
        -:  109:  //set number of Kingdom cards
    #####:  110:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 never executed
branch  1 never executed
        -:  111:    {
    #####:  112:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 never executed
branch  1 never executed
        -:  113:    	{
    #####:  114:    	  if (kingdomCards[j] == i)
branch  0 never executed
branch  1 never executed
        -:  115:    	    {
        -:  116:    	      //check if card is a 'Victory' Kingdom card
    #####:  117:    	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens){
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  118:          		  if (numPlayers == 2){ 
branch  0 never executed
branch  1 never executed
    #####:  119:          		    state->supplyCount[i] = 8; 
    #####:  120:          		  }
    #####:  121:          		  else{ state->supplyCount[i] = 12; }
    #####:  122:    		      }
        -:  123:    	      
        -:  124:            else{
    #####:  125:        		  state->supplyCount[i] = 10;
        -:  126:        		}
    #####:  127:    	      break;
        -:  128:  	       }
        -:  129:    	  else    //card is not in the set choosen for the game
        -:  130:    	    {
    #####:  131:    	      state->supplyCount[i] = -1;
        -:  132:    	    }
    #####:  133:  	}
        -:  134:
    #####:  135:    }
        -:  136:
        -:  137:  ////////////////////////
        -:  138:  //supply intilization complete
        -:  139:
        -:  140:  //set player decks
    #####:  141:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  142:    {
    #####:  143:      state->deckCount[i] = 0;
    #####:  144:      for (j = 0; j < 3; j++)
branch  0 never executed
branch  1 never executed
        -:  145:	{
    #####:  146:	  state->deck[i][j] = estate;
    #####:  147:	  state->deckCount[i]++;
    #####:  148:	}
    #####:  149:      for (j = 3; j < 10; j++)
branch  0 never executed
branch  1 never executed
        -:  150:	{
    #####:  151:	  state->deck[i][j] = copper;
    #####:  152:	  state->deckCount[i]++;		
    #####:  153:	}
    #####:  154:    }
        -:  155:
        -:  156:  //shuffle player decks
    #####:  157:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  158:    {
    #####:  159:      if ( shuffle(i, state) < 0 )
branch  0 never executed
branch  1 never executed
        -:  160:	{
    #####:  161:	  return -1;
        -:  162:	}
    #####:  163:    }
        -:  164:
        -:  165:  //draw player hands
    #####:  166:  for (i = 0; i < numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  167:    {  
        -:  168:      //initialize hand size to zero
    #####:  169:      state->handCount[i] = 0;
    #####:  170:      state->discardCount[i] = 0;
        -:  171:      //draw 5 cards
        -:  172:      // for (j = 0; j < 5; j++)
        -:  173:      //	{
        -:  174:      //	  drawCard(i, state);
        -:  175:      //	}
    #####:  176:    }
        -:  177:  
        -:  178:  //set embargo tokens to 0 for all supply piles
    #####:  179:  for (i = 0; i <= treasure_map; i++)
branch  0 never executed
branch  1 never executed
        -:  180:    {
    #####:  181:      state->embargoTokens[i] = 0;
    #####:  182:    }
        -:  183:
        -:  184:  //initialize first player's turn
    #####:  185:  state->outpostPlayed = 0;
    #####:  186:  state->phase = 0;
    #####:  187:  state->numActions = 1;
    #####:  188:  state->numBuys = 1;
    #####:  189:  state->playedCardCount = 0;
    #####:  190:  state->whoseTurn = 0;
    #####:  191:  state->handCount[state->whoseTurn] = 0;
        -:  192:  //int it; move to top
        -:  193:
        -:  194:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  195:  for (it = 0; it < 5; it++){
branch  0 never executed
branch  1 never executed
    #####:  196:    drawCard(state->whoseTurn, state);
    #####:  197:  }
        -:  198:
    #####:  199:  updateCoins(state->whoseTurn, state, 0);
        -:  200:
    #####:  201:  return 0;
    #####:  202:}
        -:  203:
function shuffle called 163 returned 100% blocks executed 100%
        -:  204:int shuffle(int player, struct gameState *state) {
        -:  205: 
        -:  206:
        -:  207:  int newDeck[MAX_DECK];
      163:  208:  int newDeckPos = 0;
        -:  209:  int card;
        -:  210:  int i;
        -:  211:
      163:  212:  if (state->deckCount[player] < 1)
branch  0 taken 6%
branch  1 taken 94%
       10:  213:    return -1;
      153:  214:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  215:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  216:
    81896:  217:  while (state->deckCount[player] > 0) {
branch  0 taken 99%
branch  1 taken 1%
    40795:  218:    card = floor(Random() * state->deckCount[player]);
    40795:  219:    newDeck[newDeckPos] = state->deck[player][card];
    40795:  220:    newDeckPos++;
  7097542:  221:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 99%
branch  1 taken 1%
  3507976:  222:      state->deck[player][i] = state->deck[player][i+1];
  3507976:  223:    }
    40795:  224:    state->deckCount[player]--;
        -:  225:  }
    81896:  226:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 99%
branch  1 taken 1%
    40795:  227:    state->deck[player][i] = newDeck[i];
    40795:  228:    state->deckCount[player]++;
    40795:  229:  }
        -:  230:
      153:  231:  return 0;
      163:  232:}
        -:  233:
function playCard called 0 returned 0% blocks executed 0%
        -:  234:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  235:{	
        -:  236:  int card;
    #####:  237:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  238:
        -:  239:  //check if it is the right phase
    #####:  240:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  241:    {
    #####:  242:      return -1;
        -:  243:    }
        -:  244:	
        -:  245:  //check if player has enough actions
    #####:  246:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  247:    {
    #####:  248:      return -1;
        -:  249:    }
        -:  250:	
        -:  251:  //get card played
    #####:  252:  card = handCard(handPos, state);
        -:  253:	
        -:  254:  //check if selected card is an action
    #####:  255:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  256:    {
    #####:  257:      return -1;
        -:  258:    }
        -:  259:	
        -:  260:  //play card
    #####:  261:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 never executed
branch  1 never executed
        -:  262:    {
    #####:  263:      return -1;
        -:  264:    }
        -:  265:	
        -:  266:  //reduce number of actions
    #####:  267:  state->numActions--;
        -:  268:
        -:  269:  //update coins (Treasure cards may be added with card draws)
    #####:  270:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  271:	
    #####:  272:  return 0;
    #####:  273:}
        -:  274:
function buyCard called 0 returned 0% blocks executed 0%
        -:  275:int buyCard(int supplyPos, struct gameState *state) {
        -:  276:  int who;
        -:  277:  if (DEBUG){
        -:  278:    printf("Entering buyCard...\n");
        -:  279:  }
        -:  280:
        -:  281:  // I don't know what to do about the phase thing.
        -:  282:
    #####:  283:  who = state->whoseTurn;
        -:  284:
    #####:  285:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  286:    if (DEBUG)
        -:  287:      printf("You do not have any buys left\n");
    #####:  288:    return -1;
    #####:  289:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  290:    if (DEBUG)
        -:  291:      printf("There are not any of that type of card left\n");
    #####:  292:    return -1;
    #####:  293:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  294:    if (DEBUG) 
        -:  295:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  296:    return -1;
        -:  297:  } else {
    #####:  298:    state->phase=1;
        -:  299:    //state->supplyCount[supplyPos]--;
    #####:  300:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  301:  
    #####:  302:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  303:    state->numBuys--;
        -:  304:    if (DEBUG)
        -:  305:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  306:  }
        -:  307:
        -:  308:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  309:  //state->discardCount[who]++;
        -:  310:    
    #####:  311:  return 0;
    #####:  312:}
        -:  313:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  314:int numHandCards(struct gameState *state) {
    #####:  315:  return state->handCount[ whoseTurn(state) ];
        -:  316:}
        -:  317:
function handCard called 0 returned 0% blocks executed 0%
        -:  318:int handCard(int handPos, struct gameState *state) {
    #####:  319:  int currentPlayer = whoseTurn(state);
    #####:  320:  return state->hand[currentPlayer][handPos];
        -:  321:}
        -:  322:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  323:int supplyCount(int card, struct gameState *state) {
    #####:  324:  return state->supplyCount[card];
        -:  325:}
        -:  326:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  327:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  328:  int i;
    #####:  329:  int count = 0;
        -:  330:
    #####:  331:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  332:    {
    #####:  333:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  334:    }
        -:  335:
    #####:  336:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  337:    {
    #####:  338:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  339:    }
        -:  340:
    #####:  341:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  342:    {
    #####:  343:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  344:    }
        -:  345:
    #####:  346:  return count;
        -:  347:}
        -:  348:
function whoseTurn called 0 returned 0% blocks executed 0%
        -:  349:int whoseTurn(struct gameState *state) {
    #####:  350:  return state->whoseTurn;
        -:  351:}
        -:  352:
function endTurn called 0 returned 0% blocks executed 0%
        -:  353:int endTurn(struct gameState *state) {
        -:  354:  int k;
        -:  355:  int i;
    #####:  356:  int currentPlayer = whoseTurn(state);
        -:  357:  
        -:  358:  //Discard hand
    #####:  359:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  360:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  361:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  362:  }
    #####:  363:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  364:    
        -:  365:  //Code for determining the player
    #####:  366:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  367:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  368:  }
        -:  369:  else{
    #####:  370:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  371:  }
        -:  372:
    #####:  373:  state->outpostPlayed = 0;
    #####:  374:  state->phase = 0;
    #####:  375:  state->numActions = 1;
    #####:  376:  state->coins = 0;
    #####:  377:  state->numBuys = 1;
    #####:  378:  state->playedCardCount = 0;
    #####:  379:  state->handCount[state->whoseTurn] = 0;
        -:  380:
        -:  381:  //int k; move to top
        -:  382:  //Next player draws hand
    #####:  383:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  384:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  385:  }
        -:  386:
        -:  387:  //Update money
    #####:  388:  updateCoins(state->whoseTurn, state , 0);
        -:  389:
    #####:  390:  return 0;
        -:  391:}
        -:  392:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  393:int isGameOver(struct gameState *state) {
        -:  394:  int i;
        -:  395:  int j;
        -:  396:	
        -:  397:  //if stack of Province cards is empty, the game ends
    #####:  398:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  399:    {
    #####:  400:      return 1;
        -:  401:    }
        -:  402:
        -:  403:  //if three supply piles are at 0, the game ends
    #####:  404:  j = 0;
    #####:  405:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  406:    {
    #####:  407:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  408:	{
    #####:  409:	  j++;
    #####:  410:	}
    #####:  411:    }
    #####:  412:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  413:    {
    #####:  414:      return 1;
        -:  415:    }
        -:  416:
    #####:  417:  return 0;
    #####:  418:}
        -:  419:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  420:int scoreFor (int player, struct gameState *state) {
        -:  421:
        -:  422:  int i;
    #####:  423:  int score = 0;
        -:  424:  //score from hand
    #####:  425:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  426:    {
    #####:  427:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  430:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  431:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  432:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  433:    }
        -:  434:
        -:  435:  //score from discard
    #####:  436:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  437:    {
    #####:  438:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  442:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  443:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  444:    }
        -:  445:
        -:  446:  //score from deck
    #####:  447:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  448:    {
    #####:  449:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  453:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  454:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
    #####:  455:    }
        -:  456:
    #####:  457:  return score;
        -:  458:}
        -:  459:
function getWinners called 0 returned 0% blocks executed 0%
        -:  460:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  461:  int i;	
        -:  462:  int j;
        -:  463:  int highScore;
        -:  464:  int currentPlayer;
        -:  465:
        -:  466:  //get score for each player
    #####:  467:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  468:    {
        -:  469:      //set unused player scores to -9999
    #####:  470:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  471:	{
    #####:  472:	  players[i] = -9999;
    #####:  473:	}
        -:  474:      else
        -:  475:	{
    #####:  476:	  players[i] = scoreFor (i, state);
        -:  477:	}
    #####:  478:    }
        -:  479:
        -:  480:  //find highest score
    #####:  481:  j = 0;
    #####:  482:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  483:    {
    #####:  484:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  485:	{
    #####:  486:	  j = i;
    #####:  487:	}
    #####:  488:    }
    #####:  489:  highScore = players[j];
        -:  490:
        -:  491:  //add 1 to players who had less turns
    #####:  492:  currentPlayer = whoseTurn(state);
    #####:  493:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  494:    {
    #####:  495:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  496:	{
    #####:  497:	  players[i]++;
    #####:  498:	}
    #####:  499:    }
        -:  500:
        -:  501:  //find new highest score
    #####:  502:  j = 0;
    #####:  503:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  504:    {
    #####:  505:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  506:	{
    #####:  507:	  j = i;
    #####:  508:	}
    #####:  509:    }
    #####:  510:  highScore = players[j];
        -:  511:
        -:  512:  //set winners in array to 1 and rest to 0
    #####:  513:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  514:    {
    #####:  515:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  516:	{
    #####:  517:	  players[i] = 1;
    #####:  518:	}
        -:  519:      else
        -:  520:	{
    #####:  521:	  players[i] = 0;
        -:  522:	}
    #####:  523:    }
        -:  524:
    #####:  525:  return 0;
        -:  526:}
        -:  527:
function drawCard called 2278 returned 100% blocks executed 75%
        -:  528:int drawCard(int player, struct gameState *state)
        -:  529:{	
        -:  530:  int count;
        -:  531:  int deckCounter;
     2278:  532:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1%
branch  1 taken 99%
        -:  533:    
        -:  534:    //Step 1 Shuffle the discard pile back into a deck
        -:  535:    int i;
        -:  536:    //Move discard to deck
       10:  537:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100%
    #####:  538:      state->deck[player][i] = state->discard[player][i];
    #####:  539:      state->discard[player][i] = -1;
    #####:  540:    }
        -:  541:
        5:  542:    state->deckCount[player] = state->discardCount[player];
        5:  543:    state->discardCount[player] = 0;//Reset discard
        -:  544:
        -:  545:    //Shufffle the deck
        5:  546:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  547:   
        -:  548:    if (DEBUG){//Debug statements
        -:  549:    }
        -:  550:    
        5:  551:    state->discardCount[player] = 0;
        -:  552:
        -:  553:    //Step 2 Draw Card
        5:  554:    count = state->handCount[player];//Get current player's hand count
        -:  555:    
        -:  556:    if (DEBUG){//Debug statements
        -:  557:    }
        -:  558:    
        5:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
        5:  561:    if (deckCounter == 0){
branch  0 taken 100%
branch  1 taken 0%
        5:  562:      return -1;
        -:  563:    }
        -:  564:
    #####:  565:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  566:    state->deckCount[player]--;
    #####:  567:    state->handCount[player]++;//Increment hand count
    #####:  568:  }
        -:  569:
        -:  570:  else{
     2273:  571:    int count = state->handCount[player];//Get current hand count for player
        -:  572:    int deckCounter;
        -:  573:    if (DEBUG){//Debug statements
        -:  574:      printf("Current hand count: %d\n", count);
        -:  575:    }
        -:  576:
     2273:  577:    deckCounter = state->deckCount[player];//Create holder for the deck count
        -:  578:
     2273:  579:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     2273:  580:    state->deckCount[player]--;
     2273:  581:    state->handCount[player]++;//Increment hand count
        -:  582:  }
        -:  583:
     2273:  584:  return 0;
     2278:  585:}
        -:  586:
function getCost called 0 returned 0% blocks executed 0%
        -:  587:int getCost(int cardNumber)
        -:  588:{
    #####:  589:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  590:    {
        -:  591:    case curse:
    #####:  592:      return 0;
        -:  593:    case estate:
    #####:  594:      return 2;
        -:  595:    case duchy:
    #####:  596:      return 5;
        -:  597:    case province:
    #####:  598:      return 8;
        -:  599:    case copper:
    #####:  600:      return 0;
        -:  601:    case silver:
    #####:  602:      return 3;
        -:  603:    case gold:
    #####:  604:      return 6;
        -:  605:    case adventurer:
    #####:  606:      return 6;
        -:  607:    case council_room:
    #####:  608:      return 5;
        -:  609:    case feast:
    #####:  610:      return 4;
        -:  611:    case gardens:
    #####:  612:      return 4;
        -:  613:    case mine:
    #####:  614:      return 5;
        -:  615:    case remodel:
    #####:  616:      return 4;
        -:  617:    case smithy:
    #####:  618:      return 4;
        -:  619:    case village:
    #####:  620:      return 3;
        -:  621:    case baron:
    #####:  622:      return 4;
        -:  623:    case great_hall:
    #####:  624:      return 3;
        -:  625:    case minion:
    #####:  626:      return 5;
        -:  627:    case steward:
    #####:  628:      return 3;
        -:  629:    case tribute:
    #####:  630:      return 5;
        -:  631:    case ambassador:
    #####:  632:      return 3;
        -:  633:    case cutpurse:
    #####:  634:      return 4;
        -:  635:    case embargo: 
    #####:  636:      return 2;
        -:  637:    case outpost:
    #####:  638:      return 5;
        -:  639:    case salvager:
    #####:  640:      return 4;
        -:  641:    case sea_hag:
    #####:  642:      return 4;
        -:  643:    case treasure_map:
    #####:  644:      return 4;
        -:  645:    }
        -:  646:	
    #####:  647:  return -1;
    #####:  648:}
        -:  649:
function cardEffect called 0 returned 0% blocks executed 0%
        -:  650:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  651:{
        -:  652:  int i;
        -:  653:  int j;
        -:  654:  int k;
        -:  655:  int x;
        -:  656:  int index;
    #####:  657:  int currentPlayer = whoseTurn(state);
    #####:  658:  int nextPlayer = currentPlayer + 1;
        -:  659:
    #####:  660:  int tributeRevealedCards[2] = {-1, -1};
        -:  661:  int temphand[MAX_HAND];// moved above the if statement
    #####:  662:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  663:    nextPlayer = 0;
    #####:  664:  }
        -:  665:  
        -:  666:	
        -:  667:  //uses switch to select card and perform actions
    #####:  668:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  669:    {
        -:  670:    case adventurer:
    #####:  671:      return playAdventurer(state, currentPlayer);
        -:  672:
        -:  673:      /*while(drawntreasure<2){
        -:  674:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  675:	  shuffle(currentPlayer, state);
        -:  676:	}
        -:  677:	drawCard(currentPlayer, state);
        -:  678:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  679:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  680:	  drawntreasure++;
        -:  681:	else{
        -:  682:	  temphand[z]=cardDrawn;
        -:  683:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  684:	  z++;
        -:  685:	}
        -:  686:      }
        -:  687:      while(z-1>=0){
        -:  688:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  689:	z=z-1;
        -:  690:      }
        -:  691:      return 0;*/
        -:  692:			
        -:  693:    case council_room:
        -:  694:      //+4 Cards
    #####:  695:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  696:	{
    #####:  697:	  drawCard(currentPlayer, state);
    #####:  698:	}
        -:  699:			
        -:  700:      //+1 Buy
    #####:  701:      state->numBuys++;
        -:  702:			
        -:  703:      //Each other player draws a card
    #####:  704:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  705:	{
    #####:  706:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  707:	    {
    #####:  708:	      drawCard(i, state);
    #####:  709:	    }
    #####:  710:	}
        -:  711:			
        -:  712:      //put played card in played card pile
    #####:  713:      discardCard(handPos, currentPlayer, state, 0);
        -:  714:			
    #####:  715:      return 0;
        -:  716:			
        -:  717:    case feast:
        -:  718:      //gain card with cost up to 5
        -:  719:      //Backup hand
    #####:  720:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  721:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  722:	state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  723:      }
        -:  724:      //Backup hand
        -:  725:
        -:  726:      //Update Coins for Buy
    #####:  727:      updateCoins(currentPlayer, state, 5);
    #####:  728:      x = 1;//Condition to loop on
    #####:  729:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  730:	if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  731:	  if (DEBUG)
        -:  732:	    printf("None of that card left, sorry!\n");
        -:  733:
        -:  734:	  if (DEBUG){
        -:  735:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  736:	  }
    #####:  737:	}
    #####:  738:	else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  739:	  printf("That card is too expensive!\n");
        -:  740:
        -:  741:	  if (DEBUG){
        -:  742:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  743:	  }
    #####:  744:	}
        -:  745:	else{
        -:  746:
        -:  747:	  if (DEBUG){
        -:  748:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  749:	  }
        -:  750:
    #####:  751:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  752:	  x = 0;//No more buying cards
        -:  753:
        -:  754:	  if (DEBUG){
        -:  755:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  756:	  }
        -:  757:
        -:  758:	}
        -:  759:      }     
        -:  760:
        -:  761:      //Reset Hand
    #####:  762:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  763:	state->hand[currentPlayer][i] = temphand[i];
    #####:  764:	temphand[i] = -1;
    #####:  765:      }
        -:  766:      //Reset Hand
        -:  767:      			
    #####:  768:      return 0;
        -:  769:			
        -:  770:    case gardens:
    #####:  771:      return -1;
        -:  772:			
        -:  773:    case mine:
    #####:  774:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  775:
    #####:  776:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  777:	{
    #####:  778:	  return -1;
        -:  779:	}
        -:  780:		
    #####:  781:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  782:	{
    #####:  783:	  return -1;
        -:  784:	}
        -:  785:
    #####:  786:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  787:	{
    #####:  788:	  return -1;
        -:  789:	}
        -:  790:
    #####:  791:      gainCard(choice2, state, 2, currentPlayer);
        -:  792:
        -:  793:      //discard card from hand
    #####:  794:      discardCard(handPos, currentPlayer, state, 0);
        -:  795:
        -:  796:      //discard trashed card
    #####:  797:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  798:	{
    #####:  799:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  800:	    {
    #####:  801:	      discardCard(i, currentPlayer, state, 0);			
    #####:  802:	      break;
        -:  803:	    }
    #####:  804:	}
        -:  805:			
    #####:  806:      return 0;
        -:  807:			
        -:  808:    case remodel:
    #####:  809:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  810:
    #####:  811:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  812:	{
    #####:  813:	  return -1;
        -:  814:	}
        -:  815:
    #####:  816:      gainCard(choice2, state, 0, currentPlayer);
        -:  817:
        -:  818:      //discard card from hand
    #####:  819:      discardCard(handPos, currentPlayer, state, 0);
        -:  820:
        -:  821:      //discard trashed card
    #####:  822:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  823:	{
    #####:  824:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  825:	    {
    #####:  826:	      discardCard(i, currentPlayer, state, 0);			
    #####:  827:	      break;
        -:  828:	    }
    #####:  829:	}
        -:  830:
        -:  831:
    #####:  832:      return 0;
        -:  833:		
        -:  834:    case smithy:
    #####:  835:      return playSmithy(currentPlayer, state, handPos);
        -:  836:      /*//+3 Cards
        -:  837:      for (i = 0; i < 3; i++)
        -:  838:	{
        -:  839:	  drawCard(currentPlayer, state);
        -:  840:	}
        -:  841:			
        -:  842:      //discard card from hand
        -:  843:      discardCard(handPos, currentPlayer, state, 0);
        -:  844:      return 0;*/
        -:  845:		
        -:  846:    case village:
    #####:  847:      return playVillage(currentPlayer, state, handPos);
        -:  848:      /*//+1 Card
        -:  849:      drawCard(currentPlayer, state);
        -:  850:			
        -:  851:      //+2 Actions
        -:  852:      state->numActions = state->numActions + 2;
        -:  853:			
        -:  854:      //discard played card from hand
        -:  855:      discardCard(handPos, currentPlayer, state, 0);
        -:  856:      return 0;*/
        -:  857:		
        -:  858:    case baron:
    #####:  859:      state->numBuys++;//Increase buys by 1!
    #####:  860:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  861:	int p = 0;//Iterator for hand!
    #####:  862:	int card_not_discarded = 1;//Flag for discard set!
    #####:  863:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  864:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  865:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  866:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  867:	    state->discardCount[currentPlayer]++;
    #####:  868:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  869:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  870:	    }
    #####:  871:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  872:	    state->handCount[currentPlayer]--;
    #####:  873:	    card_not_discarded = 0;//Exit the loop
    #####:  874:	  }
    #####:  875:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  876:	    if(DEBUG) {
        -:  877:	      printf("No estate cards in your hand, invalid choice\n");
        -:  878:	      printf("Must gain an estate if there are any\n");
        -:  879:	    }
    #####:  880:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  881:	      gainCard(estate, state, 0, currentPlayer);
    #####:  882:	      state->supplyCount[estate]--;//Decrement estates
    #####:  883:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  884:		isGameOver(state);
    #####:  885:	      }
    #####:  886:	    }
    #####:  887:	    card_not_discarded = 0;//Exit the loop
    #####:  888:	  }
        -:  889:			    
        -:  890:	  else{
    #####:  891:	    p++;//Next card
        -:  892:	  }
        -:  893:	}
    #####:  894:      }
        -:  895:			    
        -:  896:      else{
    #####:  897:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  898:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  899:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  900:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  901:	    isGameOver(state);
    #####:  902:	  }
    #####:  903:	}
        -:  904:      }
        -:  905:	    
        -:  906:      
    #####:  907:      return 0;
        -:  908:		
        -:  909:    case great_hall:
    #####:  910:      return playGreatHall(currentPlayer, state, handPos);
        -:  911:      /*//+1 Card
        -:  912:      drawCard(currentPlayer, state);
        -:  913:			
        -:  914:      //+1 Actions
        -:  915:      state->numActions++;
        -:  916:			
        -:  917:      //discard card from hand
        -:  918:      discardCard(handPos, currentPlayer, state, 0);
        -:  919:      return 0;*/
        -:  920:		
        -:  921:    case minion:
        -:  922:      //+1 action
    #####:  923:      state->numActions++;
        -:  924:			
        -:  925:      //discard card from hand
    #####:  926:      discardCard(handPos, currentPlayer, state, 0);
        -:  927:			
    #####:  928:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  929:	{
    #####:  930:	  state->coins = state->coins + 2;
    #####:  931:	}
        -:  932:			
    #####:  933:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  934:	{
        -:  935:	  //discard hand
    #####:  936:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  937:	    {
    #####:  938:	      discardCard(handPos, currentPlayer, state, 0);
        -:  939:	    }
        -:  940:				
        -:  941:	  //draw 4
    #####:  942:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  943:	    {
    #####:  944:	      drawCard(currentPlayer, state);
    #####:  945:	    }
        -:  946:				
        -:  947:	  //other players discard hand and redraw if hand size > 4
    #####:  948:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  949:	    {
    #####:  950:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  951:		{
    #####:  952:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  953:		    {
        -:  954:		      //discard hand
    #####:  955:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  956:			{
    #####:  957:			  discardCard(handPos, i, state, 0);
        -:  958:			}
        -:  959:							
        -:  960:		      //draw 4
    #####:  961:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  962:			{
    #####:  963:			  drawCard(i, state);
    #####:  964:			}
    #####:  965:		    }
    #####:  966:		}
    #####:  967:	    }
        -:  968:				
    #####:  969:	}
    #####:  970:      return 0;
        -:  971:		
        -:  972:    case steward:
    #####:  973:      if (choice1 == 1){
branch  0 never executed
branch  1 never executed
        -:  974:    	  //+2 cards
    #####:  975:    	  drawCard(currentPlayer, state);
        -:  976:
    #####:  977:    	  drawCard(currentPlayer, state);
    #####:  978:    	}
        -:  979:      
    #####:  980:      else if (choice1 == 2){
branch  0 never executed
branch  1 never executed
        -:  981:    	  //+2 coins
    #####:  982:    	  state->coins = state->coins + 2;
    #####:  983:    	}
        -:  984:      else{
        -:  985:    	  //trash 2 cards in hand
    #####:  986:    	  discardCard(choice2, currentPlayer, state, 1);
    #####:  987:    	  discardCard(choice3, currentPlayer, state, 1);
        -:  988:    	}
        -:  989:			
        -:  990:      //discard card from hand
    #####:  991:      discardCard(handPos, currentPlayer, state, 0);
    #####:  992:      return 0;
        -:  993:		
        -:  994:    case tribute:
    #####:  995:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  996:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  997:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  998:	  state->deckCount[nextPlayer]--;
    #####:  999:	}
    #####: 1000:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1001:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1002:	  state->discardCount[nextPlayer]--;
    #####: 1003:	}
        -: 1004:	else{
        -: 1005:	  //No Card to Reveal
        -: 1006:	  if (DEBUG){
        -: 1007:	    printf("No cards to reveal\n");
        -: 1008:	  }
        -: 1009:	}
    #####: 1010:      }
        -: 1011:	    
        -: 1012:      else{
    #####: 1013:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1014:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1015:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1016:	    state->deckCount[nextPlayer]++;
    #####: 1017:	    state->discard[nextPlayer][i] = -1;
    #####: 1018:	    state->discardCount[nextPlayer]--;
    #####: 1019:	  }
        -: 1020:			    
    #####: 1021:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1022:	} 
    #####: 1023:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1024:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1025:	state->deckCount[nextPlayer]--;
    #####: 1026:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1027:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1028:	state->deckCount[nextPlayer]--;
        -: 1029:      }    
        -: 1030:		       
    #####: 1031:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1032:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1033:	state->playedCardCount++;
    #####: 1034:	tributeRevealedCards[1] = -1;
    #####: 1035:      }
        -: 1036:
    #####: 1037:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1038:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1039:	  state->coins += 2;
    #####: 1040:	}
        -: 1041:		    
    #####: 1042:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1043:	  drawCard(currentPlayer, state);
    #####: 1044:	  drawCard(currentPlayer, state);
    #####: 1045:	}
        -: 1046:	else{//Action Card
    #####: 1047:	  state->numActions = state->numActions + 2;
        -: 1048:	}
    #####: 1049:      }
        -: 1050:	    
    #####: 1051:      return 0;
        -: 1052:		
        -: 1053:    case ambassador:
    #####: 1054:      j = 0;		//used to check if player has enough cards to discard
        -: 1055:
    #####: 1056:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1057:	{
    #####: 1058:	  return -1;				
        -: 1059:	}
        -: 1060:
    #####: 1061:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1062:	{
    #####: 1063:	  return -1;
        -: 1064:	}
        -: 1065:
    #####: 1066:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1067:	{
    #####: 1068:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1069:	    {
    #####: 1070:	      j++;
    #####: 1071:	    }
    #####: 1072:	}
    #####: 1073:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1074:	{
    #####: 1075:	  return -1;				
        -: 1076:	}
        -: 1077:
        -: 1078:      if (DEBUG) 
        -: 1079:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1080:
        -: 1081:      //increase supply count for choosen card by amount being discarded
    #####: 1082:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1083:			
        -: 1084:      //each other player gains a copy of revealed card
    #####: 1085:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1086:	{
    #####: 1087:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1088:	    {
    #####: 1089:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1090:	    }
    #####: 1091:	}
        -: 1092:
        -: 1093:      //discard played card from hand
    #####: 1094:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1095:
        -: 1096:      //trash copies of cards returned to supply
    #####: 1097:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1098:	{
    #####: 1099:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1100:	    {
    #####: 1101:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1102:		{
    #####: 1103:		  discardCard(i, currentPlayer, state, 1);
    #####: 1104:		  break;
        -: 1105:		}
    #####: 1106:	    }
    #####: 1107:	}			
        -: 1108:
    #####: 1109:      return 0;
        -: 1110:		
        -: 1111:    case cutpurse:
        -: 1112:
    #####: 1113:      updateCoins(currentPlayer, state, 2);
    #####: 1114:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1115:	{
    #####: 1116:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1117:	    {
    #####: 1118:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1119:		{
    #####: 1120:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1121:		    {
    #####: 1122:		      discardCard(j, i, state, 0);
    #####: 1123:		      break;
        -: 1124:		    }
    #####: 1125:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1126:		    {
    #####: 1127:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1128:			{
        -: 1129:			  if (DEBUG)
        -: 1130:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1131:			}	
    #####: 1132:		      break;
        -: 1133:		    }		
    #####: 1134:		}
        -: 1135:					
    #####: 1136:	    }
        -: 1137:				
    #####: 1138:	}				
        -: 1139:
        -: 1140:      //discard played card from hand
    #####: 1141:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1142:
    #####: 1143:      return 0;
        -: 1144:
        -: 1145:		
        -: 1146:    case embargo: 
        -: 1147:      //+2 Coins
    #####: 1148:      state->coins = state->coins + 2;
        -: 1149:			
        -: 1150:      //see if selected pile is in play
    #####: 1151:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1152:	{
    #####: 1153:	  return -1;
        -: 1154:	}
        -: 1155:			
        -: 1156:      //add embargo token to selected supply pile
    #####: 1157:      state->embargoTokens[choice1]++;
        -: 1158:			
        -: 1159:      //trash card
    #####: 1160:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1161:      return 0;
        -: 1162:		
        -: 1163:    case outpost:
        -: 1164:      //set outpost flag
    #####: 1165:      state->outpostPlayed++;
        -: 1166:			
        -: 1167:      //discard card
    #####: 1168:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1169:      return 0;
        -: 1170:		
        -: 1171:    case salvager:
        -: 1172:      //+1 buy
    #####: 1173:      state->numBuys++;
        -: 1174:			
    #####: 1175:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1176:        	{
        -: 1177:            //gain coins equal to trashed card
    #####: 1178:        	  state->coins = state->coins + getCost(handCard(choice1, state));
        -: 1179:        	  //trash card
    #####: 1180:        	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1181:        	}
        -: 1182:        			
        -: 1183:      //discard card
    #####: 1184:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1185:      return 0;
        -: 1186:		
        -: 1187:    case sea_hag:
    #####: 1188:      return playSeaHag(currentPlayer, state);
        -: 1189:      /*for (i = 0; i < state->numPlayers+1; i++){ //INCORRECT - SHOULD BE i < state->numPlayers. THIS IS A BUG
        -: 1190:	if (i != currentPlayer){
        -: 1191:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        -: 1192:	  state->discardCount[i]++;
        -: 1193:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1194:	}
        -: 1195:      }
        -: 1196:      return 0;*/
        -: 1197:		
        -: 1198:    case treasure_map:
        -: 1199:      //search hand for another treasure_map
    #####: 1200:      index = -1;
    #####: 1201:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1202:    	{
    #####: 1203:    	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1204:    	    {
    #####: 1205:    	      index = i;
    #####: 1206:    	      break;
        -: 1207:    	    }
    #####: 1208:    	}
        -: 1209:      
    #####: 1210:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1211:    	{
        -: 1212:      	  //trash both treasure cards
    #####: 1213:      	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1214:      	  discardCard(index, currentPlayer, state, 1);
        -: 1215:
        -: 1216:  	  //gain 4 Gold cards
    #####: 1217:  	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1218:  	    {
    #####: 1219:  	      gainCard(gold, state, 1, currentPlayer);
    #####: 1220:  	    }
        -: 1221:  				
        -: 1222:  	  //return success
    #####: 1223:  	  return 1;
        -: 1224:  	}
        -: 1225:			
        -: 1226:      //no second treasure_map found in hand
    #####: 1227:      return -1;
        -: 1228:    }
        -: 1229:	
    #####: 1230:  return -1;
    #####: 1231:}
        -: 1232:
        -: 1233:/*int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -: 1234:{
        -: 1235:  int i;
        -: 1236:  int j;
        -: 1237:  int k;
        -: 1238:  int x;
        -: 1239:  int index;
        -: 1240:  int currentPlayer = whoseTurn(state);
        -: 1241:  int nextPlayer = currentPlayer + 1;
        -: 1242:
        -: 1243:  //int tributeRevealedCards[2] = {-1, -1};
        -: 1244:  int temphand[MAX_HAND];// moved above the if statement
        -: 1245:  int drawntreasure=0;
        -: 1246:  //int cardDrawn;
        -: 1247:  int z = 0;// this is the counter for the temp hand
        -: 1248:  if (nextPlayer > (state->numPlayers - 1)){
        -: 1249:    nextPlayer = 0;
        -: 1250:  }
        -: 1251:  
        -: 1252:	
        -: 1253:  //uses switch to select card and perform actions
        -: 1254:  switch( card ) 
        -: 1255:    {
        -: 1256:    case adventurer: 
        -: 1257:	      return playAdventurer(&drawntreasure, state, currentPlayer, temphand, &z);
        -: 1258:			
        -: 1259:    case council_room:
        -: 1260:	     return playCouncilRoom(currentPlayer, state, handPos);
        -: 1261:			
        -: 1262:    case feast: //PASS int currentPlayer, struct* gameState state int temphand[], int choice1
        -: 1263:	     return playFeast(currentPlayer, state, temphand, handPos);
        -: 1264:			
        -: 1265:    case gardens:
        -: 1266:      	return playGardens();
        -: 1267:			
        -: 1268:    case mine: //PASS int currentPlayer, struct* gameState state, int choice1, int choice2, int handPos
        -: 1269:    	return playMine(currentPlayer, state, choice1, choice2, handPos);
        -: 1270:			
        -: 1271:    case remodel: // PASS int currentPlayer, struct* gameState state, int choice1, int choice2, int handPos	 
        -: 1272:    	return playRemodel(currentPlayer, state, choice1, choice2, handPos);  
        -: 1273:
        -: 1274:    case smithy: // PASS int currentPlayer, struct* gameState state, int handPos
        -: 1275:    	return playSmithy(currentPlayer, state, handPos);
        -: 1276:		
        -: 1277:    case village: // PASS int currentPlayer, struct gameState *state, int handPos
        -: 1278:    	return playVillage(currentPlayer, state, handPos);
        -: 1279:		
        -: 1280:    case baron: // int currentPlayer, struct gameState *state, int choice1
        -: 1281:    	return playBaron(currentPlayer, state, choice1);
        -: 1282:		
        -: 1283:    case great_hall:// int currentPlayer, struct gameState *state, int handPos 
        -: 1284:	    return playGreatHall(currentPlayer, state, handPos);
        -: 1285:		
        -: 1286:    case minion: // int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2
        -: 1287:    	return playMinion(currentPlayer, state, handPos, choice1, choice2);
        -: 1288:			
        -: 1289:    case steward: // int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3
        -: 1290:    	return playSteward(currentPlayer, state, handPos, choice1, choice2, choice3);
        -: 1291:		
        -: 1292:    case tribute: // int currentPlayer, struct gameState *state, int nextPlayer
        -: 1293:    	return playTribute(currentPlayer, state, nextPlayer);
        -: 1294:		
        -: 1295:    case ambassador: // int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos
        -: 1296:	    return playAmbassador(currentPlayer, state, choice1, choice2, handPos);
        -: 1297:		
        -: 1298:    case cutpurse: // int currentPlayer, struct gameState *state, int handPos
        -: 1299:    	return playCutpurse(currentPlayer, state, handPos);
        -: 1300:		
        -: 1301:    case embargo: // int currentPlayer, struct gameState *state, int handPos, int choice1
        -: 1302:    	return playEmbargo(currentPlayer, state, handPos, choice1);
        -: 1303:		
        -: 1304:    case outpost: // int currentPlayer, struct gameState *state, int handPos
        -: 1305:    	return playOutpost(currentPlayer, state, handPos);
        -: 1306:
        -: 1307:    case salvager: // int currentPlayer, struct gameState *state, int handPos, int choice1
        -: 1308:    	return playSalvager(currentPlayer, state, handPos, choice1);
        -: 1309:		
        -: 1310:    case sea_hag: // int currentPlayer, struct gameState *state
        -: 1311:    	return playSeaHag(currentPlayer, state);
        -: 1312:		
        -: 1313:    case treasure_map: // int currentPlayer, struct gameState *state, int handPos
        -: 1314:    	return playTreasureMap(currentPlayer, state, handPos);
        -: 1315:
        -: 1316:	    }
        -: 1317:	
        -: 1318:  return -1;
        -: 1319:}*/
        -: 1320:
function discardCard called 0 returned 0% blocks executed 0%
        -: 1321:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1322:{
        -: 1323:	
        -: 1324:  //if card is not trashed, added to Played pile 
    #####: 1325:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1326:    {
        -: 1327:      //add card to played pile
    #####: 1328:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1329:      state->playedCardCount++;
    #####: 1330:    }
        -: 1331:	
        -: 1332:  //set played card to -1
    #####: 1333:  state->hand[currentPlayer][handPos] = -1;
        -: 1334:	
        -: 1335:  //remove card from player's hand
        -: 1336:  
    #####: 1337:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1338:    {
        -: 1339:      //reduce number of cards in hand
    #####: 1340:      state->handCount[currentPlayer]--;
    #####: 1341:    }
    #####: 1342:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1343:    {
        -: 1344:      //reduce number of cards in hand
    #####: 1345:      state->handCount[currentPlayer]--;
    #####: 1346:    }
        -: 1347:  else 	
        -: 1348:    {
        -: 1349:      //replace discarded card with last card in hand
    #####: 1350:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1351:      //set last card to -1
    #####: 1352:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1353:      //reduce number of cards in hand
    #####: 1354:      state->handCount[currentPlayer]--;
        -: 1355:    }
        -: 1356:	
    #####: 1357:  return 0;
        -: 1358:}
        -: 1359:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1360:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1361:{
        -: 1362:  //Note: supplyPos is enum of choosen card
        -: 1363:	
        -: 1364:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1365:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 never executed
branch  1 never executed
        -: 1366:    {
    #####: 1367:      return -1;
        -: 1368:    }
        -: 1369:	
        -: 1370:  //added card for [whoseTurn] current player:
        -: 1371:  // toFlag = 0 : add to discard
        -: 1372:  // toFlag = 1 : add to deck
        -: 1373:  // toFlag = 2 : add to hand
        -: 1374:
    #####: 1375:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1376:    {
    #####: 1377:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1378:      state->deckCount[player]++;
    #####: 1379:    }
    #####: 1380:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1381:    {
    #####: 1382:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1383:      state->handCount[player]++;
    #####: 1384:    }
        -: 1385:  else
        -: 1386:    {
    #####: 1387:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1388:      state->discardCount[player]++;
        -: 1389:    }
        -: 1390:	
        -: 1391:  //decrease number in supply pile
    #####: 1392:  state->supplyCount[supplyPos]--;
        -: 1393:	 
    #####: 1394:  return 0;
    #####: 1395:}
        -: 1396:
function updateCoins called 153 returned 100% blocks executed 100%
        -: 1397:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1398:{
        -: 1399:  int i;
        -: 1400:	
        -: 1401:  //reset coin count
      153: 1402:  state->coins = 0;
        -: 1403:
        -: 1404:  //add coins for each Treasure card in player's hand
     1836: 1405:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1406:    {
      765: 1407:      if (state->hand[player][i] == copper)
branch  0 taken 6%
branch  1 taken 94%
        -: 1408:	{
       46: 1409:	  state->coins += 1;
       46: 1410:	}
      719: 1411:      else if (state->hand[player][i] == silver)
branch  0 taken 8%
branch  1 taken 92%
        -: 1412:	{
       55: 1413:	  state->coins += 2;
       55: 1414:	}
      664: 1415:      else if (state->hand[player][i] == gold)
branch  0 taken 6%
branch  1 taken 94%
        -: 1416:	{
       42: 1417:	  state->coins += 3;
       42: 1418:	}	
      765: 1419:    }	
        -: 1420:
        -: 1421:  //add bonus
      153: 1422:  state->coins += bonus;
        -: 1423:
      153: 1424:  return 0;
        -: 1425:}
        -: 1426:
        -: 1427:/************************************************************/
        -: 1428:/************************************************************/
        -: 1429:/************************************************************/
        -: 1430://new functions 4-12-17
        -: 1431:
function playAdventurer called 153 returned 100% blocks executed 100%
        -: 1432:int playAdventurer(struct gameState *state, int currentPlayer)
        -: 1433:{
        -: 1434:	int cardDrawn;
      153: 1435:	int z = 0;
      153: 1436:	int drawntreasure = 0;
        -: 1437:	int temphand[MAX_HAND];
        -: 1438:
     3332: 1439:	while(drawntreasure<2){
branch  0 taken 91%
branch  1 taken 9%
        -: 1440:		
     1513: 1441:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1%
branch  1 taken 99%
        5: 1442:		  shuffle(currentPlayer, state);
        5: 1443:		}
     1513: 1444:    drawCard(currentPlayer, state);
     1513: 1445:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card. CORRECT
        -: 1446:		//cardDrawn = state->hand[currentPlayer][0]; //INCORRECT - this is a bug. cardDrawn should be last element in the hand, not first
        -: 1447:
     4241: 1448:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
branch  0 taken 93%
branch  1 taken 7%
branch  2 taken 93%
branch  3 taken 7%
branch  4 taken 8%
branch  5 taken 92%
      306: 1449:		  drawntreasure++;
      306: 1450:    }
        -: 1451:		
        -: 1452:    else{
     1207: 1453:		  temphand[z]=cardDrawn;
     1207: 1454:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     1207: 1455:		  z++;
        -: 1456:		}
        -: 1457:	}
        -: 1458:	 
     2720: 1459:  while(z-1>=0){
branch  0 taken 89%
branch  1 taken 11%
     1207: 1460:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     1207: 1461:		z=z-1;
        -: 1462:	 }
        -: 1463:	
      153: 1464:  return 0;
        -: 1465:}
        -: 1466:
        -: 1467:/*int playCouncilRoom(int currentPlayer, struct gameState *state, int handPos)
        -: 1468:{
        -: 1469:	int i;	
        -: 1470:	//+4 Cards
        -: 1471:      for (i = 0; i < 4; i++)
        -: 1472:	{
        -: 1473:	  drawCard(currentPlayer, state);
        -: 1474:	}
        -: 1475:			
        -: 1476:      //+1 Buy
        -: 1477:      state->numBuys++;
        -: 1478:			
        -: 1479:      //Each other player draws a card
        -: 1480:      for (i = 0; i < state->numPlayers; i++)
        -: 1481:		{
        -: 1482:		  if ( i != currentPlayer )
        -: 1483:		    {
        -: 1484:		      drawCard(i, state);
        -: 1485:		    }
        -: 1486:		}
        -: 1487:				
        -: 1488:      //put played card in played card pile
        -: 1489:      discardCard(handPos, currentPlayer, state, 0);
        -: 1490:			
        -: 1491:      return 0;
        -: 1492:}*/
        -: 1493:
        -: 1494:/*int playFeast(int currentPlayer, struct gameState *state, int temphand[], int choice1)
        -: 1495:{
        -: 1496:	 //gain card with cost up to 5
        -: 1497:      //Backup hand
        -: 1498:	int i, x;
        -: 1499:
        -: 1500:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -: 1501:	temphand[i] = state->hand[currentPlayer][i];//Backup card
        -: 1502:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1503:      }
        -: 1504:      //Backup hand
        -: 1505:
        -: 1506:      //Update Coins for Buy
        -: 1507:      updateCoins(currentPlayer, state, 5);
        -: 1508:      x = 1;//Condition to loop on
        -: 1509:      while( x == 1) {//Buy one card
        -: 1510:	if (supplyCount(choice1, state) <= 0){
        -: 1511:	  if (DEBUG)
        -: 1512:	    printf("None of that card left, sorry!\n");
        -: 1513:
        -: 1514:	  if (DEBUG){
        -: 1515:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1516:	  }
        -: 1517:	}
        -: 1518:	else if (state->coins < getCost(choice1)){
        -: 1519:	  printf("That card is too expensive!\n");
        -: 1520:
        -: 1521:	  if (DEBUG){
        -: 1522:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1523:	  }
        -: 1524:	}
        -: 1525:	else{
        -: 1526:
        -: 1527:	  if (DEBUG){
        -: 1528:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1529:	  }
        -: 1530:
        -: 1531:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        -: 1532:	  x = 0;//No more buying cards
        -: 1533:
        -: 1534:	  if (DEBUG){
        -: 1535:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1536:	  }
        -: 1537:
        -: 1538:	}
        -: 1539:      }     
        -: 1540:
        -: 1541:      //Reset Hand
        -: 1542:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
        -: 1543:	state->hand[currentPlayer][i] = temphand[i];
        -: 1544:	temphand[i] = -1;
        -: 1545:      }
        -: 1546:      //Reset Hand
        -: 1547:      			
        -: 1548:      return 0;
        -: 1549:}*/
        -: 1550:
        -: 1551:/*int playGardens()
        -: 1552:{
        -: 1553:	return -1;
        -: 1554:}*/
        -: 1555:/*
        -: 1556: int playMine(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) 
        -: 1557: {
        -: 1558:     int i, j;
        -: 1559:
        -: 1560:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1561:
        -: 1562:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -: 1563:	{
        -: 1564:	  return -1;
        -: 1565:	}
        -: 1566:		
        -: 1567:      if (choice2 > treasure_map || choice2 < curse)
        -: 1568:	{
        -: 1569:	  return -1;
        -: 1570:	}
        -: 1571:
        -: 1572:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -: 1573:	{
        -: 1574:	  return -1;
        -: 1575:	}
        -: 1576:
        -: 1577:      gainCard(choice2, state, 2, currentPlayer);
        -: 1578:
        -: 1579:      //discard card from hand
        -: 1580:      discardCard(handPos, currentPlayer, state, 0);
        -: 1581:
        -: 1582:      //discard trashed card
        -: 1583:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1584:	{
        -: 1585:	  if (state->hand[currentPlayer][i] == j)
        -: 1586:	    {
        -: 1587:	      discardCard(i, currentPlayer, state, 0);			
        -: 1588:	      break;
        -: 1589:	    }
        -: 1590:	}
        -: 1591:			
        -: 1592:      return 0;
        -: 1593:}*/
        -: 1594:
        -: 1595:/*int playRemodel(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos)
        -: 1596:{
        -: 1597:     int i, j; 
        -: 1598:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -: 1599:
        -: 1600:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -: 1601:	{
        -: 1602:	  return -1;
        -: 1603:	}
        -: 1604:
        -: 1605:      gainCard(choice2, state, 0, currentPlayer);
        -: 1606:
        -: 1607:      //discard card from hand
        -: 1608:      discardCard(handPos, currentPlayer, state, 0);
        -: 1609:
        -: 1610:      //discard trashed card
        -: 1611:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1612:	{
        -: 1613:	  if (state->hand[currentPlayer][i] == j)
        -: 1614:	    {
        -: 1615:	      discardCard(i, currentPlayer, state, 0);			
        -: 1616:	      break;
        -: 1617:	    }
        -: 1618:	}
        -: 1619:
        -: 1620:
        -: 1621:      return 0;
        -: 1622:  }*/
        -: 1623:
function playSmithy called 0 returned 0% blocks executed 0%
        -: 1624:int playSmithy(int currentPlayer, struct gameState *state, int handPos)
        -: 1625:{
        -: 1626:      //+3 Cards
        -: 1627:	int i;
    #####: 1628:      for (i = 0; i <= 3; i++) //INCORRECT, THIS IS A BUG. SHOULD BE i < 3 not i <= 3.
branch  0 never executed
branch  1 never executed
        -: 1629:    	{
    #####: 1630:    	  drawCard(currentPlayer, state);
    #####: 1631:    	}
        -: 1632:			
        -: 1633:      //discard card from hand
    #####: 1634:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1635:      return 0;
        -: 1636:}
        -: 1637:
function playVillage called 0 returned 0% blocks executed 0%
        -: 1638: int playVillage(int currentPlayer, struct gameState *state, int handPos)
        -: 1639: {
        -: 1640:      //+1 Card
    #####: 1641:      drawCard(currentPlayer, state);
        -: 1642:			
        -: 1643:      //+2 Actions
        -: 1644:      //state->numActions = state->numActions + 2;
    #####: 1645:      state->numActions = 2; //	INCORRECT - THIS IS A BUG. This resets numActions to 2 rather than adding 2 to it
        -: 1646:			
        -: 1647:      //discard played card from hand
    #####: 1648:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1649:      return 0;
        -: 1650:}
        -: 1651:
        -: 1652: /*int playBaron(int currentPlayer, struct gameState *state, int choice1)
        -: 1653: {
        -: 1654:      state->numBuys++;//Increase buys by 1!
        -: 1655:      if (choice1 > 0){//Boolean true or going to discard an estate
        -: 1656:	int p = 0;//Iterator for hand!
        -: 1657:	int card_not_discarded = 1;//Flag for discard set!
        -: 1658:	
        -: 1659:	while(card_not_discarded){
        -: 1660:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
        -: 1661:	    state->coins += 4;//Add 4 coins to the amount of coins
        -: 1662:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        -: 1663:	    state->discardCount[currentPlayer]++;
        -: 1664:	    
        -: 1665:	    for (;p < state->handCount[currentPlayer]; p++){
        -: 1666:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1667:	    }
        -: 1668:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        -: 1669:	    state->handCount[currentPlayer]--;
        -: 1670:	    card_not_discarded = 0;//Exit the loop
        -: 1671:	  }
        -: 1672:	 
        -: 1673:	  else if (p > state->handCount[currentPlayer]){
        -: 1674:	    if(DEBUG) {
        -: 1675:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1676:	      printf("Must gain an estate if there are any\n");
        -: 1677:	    }
        -: 1678:	    if (supplyCount(estate, state) > 0){
        -: 1679:	      gainCard(estate, state, 0, currentPlayer);
        -: 1680:	      state->supplyCount[estate]--;//Decrement estates
        -: 1681:	      if (supplyCount(estate, state) == 0){
        -: 1682:		isGameOver(state);
        -: 1683:	      }
        -: 1684:	    }
        -: 1685:	    card_not_discarded = 0;//Exit the loop
        -: 1686:	  }
        -: 1687:			    
        -: 1688:	  else{
        -: 1689:	    p++;//Next card
        -: 1690:	  }
        -: 1691:	}
        -: 1692:      }
        -: 1693:			    
        -: 1694:      else{
        -: 1695:	if (supplyCount(estate, state) > 0){
        -: 1696:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        -: 1697:	  state->supplyCount[estate]--;//Decrement Estates
        -: 1698:	  if (supplyCount(estate, state) == 0){
        -: 1699:	    isGameOver(state);
        -: 1700:	  }
        -: 1701:	}
        -: 1702:      }
        -: 1703:	    
        -: 1704:      
        -: 1705:      return 0;
        -: 1706:  }*/
        -: 1707:
function playGreatHall called 0 returned 0% blocks executed 0%
        -: 1708:int playGreatHall(int currentPlayer, struct gameState *state, int handPos)
        -: 1709:{
        -: 1710:  //+1 Card
    #####: 1711:  drawCard(currentPlayer, state);
        -: 1712:		
        -: 1713:  //+1 Actions
    #####: 1714:  state->numActions++;
        -: 1715:		
        -: 1716:  //discard card from hand
    #####: 1717:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1718:  return 0;
        -: 1719:}
        -: 1720:
        -: 1721:/*int playMinion(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2)
        -: 1722:{
        -: 1723:  int i, j; 
        -: 1724: 
        -: 1725:  //+1 action
        -: 1726:  state->numActions++;
        -: 1727:		
        -: 1728:  //discard card from hand
        -: 1729:  discardCard(handPos, currentPlayer, state, 0);
        -: 1730:		
        -: 1731:  if (choice1)		//+2 coins
        -: 1732:{
        -: 1733:  state->coins = state->coins + 2;
        -: 1734:}
        -: 1735:		
        -: 1736:  else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1737:{
        -: 1738:  //discard hand
        -: 1739:  while(numHandCards(state) > 0)
        -: 1740:    {
        -: 1741:      discardCard(handPos, currentPlayer, state, 0);
        -: 1742:    }
        -: 1743:			
        -: 1744:  //draw 4
        -: 1745:  for (i = 0; i < 4; i++)
        -: 1746:    {
        -: 1747:      drawCard(currentPlayer, state);
        -: 1748:    }
        -: 1749:			
        -: 1750:  //other players discard hand and redraw if hand size > 4
        -: 1751:  for (i = 0; i < state->numPlayers; i++)
        -: 1752:    {
        -: 1753:      if (i != currentPlayer)
        -: 1754:	{
        -: 1755:	  if ( state->handCount[i] > 4 )
        -: 1756:	    {
        -: 1757:	      //discard hand
        -: 1758:	      while( state->handCount[i] > 0 )
        -: 1759:		{
        -: 1760:		  discardCard(handPos, i, state, 0);
        -: 1761:		}
        -: 1762:						
        -: 1763:	      //draw 4
        -: 1764:	      for (j = 0; j < 4; j++)
        -: 1765:		{
        -: 1766:		  drawCard(i, state);
        -: 1767:		}
        -: 1768:	    }
        -: 1769:	}
        -: 1770:    }
        -: 1771:			
        -: 1772:	}
        -: 1773:  return 0;
        -: 1774:}*/
        -: 1775:
        -: 1776:/*int playSteward(int currentPlayer, struct gameState *state, int handPos, int choice1, int choice2, int choice3)
        -: 1777:{
        -: 1778:	if (choice1 == 1)
        -: 1779:	{
        -: 1780:	  //+2 cards
        -: 1781:	  drawCard(currentPlayer, state);
        -: 1782:	  drawCard(currentPlayer, state);
        -: 1783:	}
        -: 1784:      else if (choice1 == 2)
        -: 1785:	{
        -: 1786:	  //+2 coins
        -: 1787:	  state->coins = state->coins + 2;
        -: 1788:	}
        -: 1789:      else
        -: 1790:	{
        -: 1791:	  //trash 2 cards in hand
        -: 1792:	  discardCard(choice2, currentPlayer, state, 1);
        -: 1793:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1794:	}
        -: 1795:			
        -: 1796:      //discard card from hand
        -: 1797:      discardCard(handPos, currentPlayer, state, 0);
        -: 1798:      return 0;
        -: 1799:}*/
        -: 1800:
        -: 1801:/*int playTribute(int currentPlayer, struct gameState *state, int nextPlayer)
        -: 1802:{  
        -: 1803:	int i; 
        -: 1804:	int tributeRevealedCards[2] = {-1, -1};
        -: 1805:
        -: 1806:	  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
        -: 1807:	if (state->deckCount[nextPlayer] > 0){
        -: 1808:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1809:	  state->deckCount[nextPlayer]--;
        -: 1810:	}
        -: 1811:	else if (state->discardCount[nextPlayer] > 0){
        -: 1812:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
        -: 1813:	  state->discardCount[nextPlayer]--;
        -: 1814:	}
        -: 1815:	else{
        -: 1816:	  //No Card to Reveal
        -: 1817:	  if (DEBUG){
        -: 1818:	    printf("No cards to reveal\n");
        -: 1819:	  }
        -: 1820:	}
        -: 1821:	  }
        -: 1822:	    
        -: 1823:	  else{
        -: 1824:	if (state->deckCount[nextPlayer] == 0){
        -: 1825:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
        -: 1826:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
        -: 1827:	    state->deckCount[nextPlayer]++;
        -: 1828:	    state->discard[nextPlayer][i] = -1;
        -: 1829:	    state->discardCount[nextPlayer]--;
        -: 1830:	  }
        -: 1831:			    
        -: 1832:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1833:	} 
        -: 1834:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1835:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1836:	state->deckCount[nextPlayer]--;
        -: 1837:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        -: 1838:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        -: 1839:	state->deckCount[nextPlayer]--;
        -: 1840:	  }    
        -: 1841:		       
        -: 1842:	  if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
        -: 1843:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        -: 1844:	state->playedCardCount++;
        -: 1845:	tributeRevealedCards[1] = -1;
        -: 1846:	  }
        -: 1847:
        -: 1848:	  for (i = 0; i <= 2; i ++){
        -: 1849:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
        -: 1850:	  state->coins += 2;
        -: 1851:	}
        -: 1852:		    
        -: 1853:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
        -: 1854:	  drawCard(currentPlayer, state);
        -: 1855:	  drawCard(currentPlayer, state);
        -: 1856:	}
        -: 1857:	else{//Action Card
        -: 1858:	  state->numActions = state->numActions + 2;
        -: 1859:	}
        -: 1860:	  }
        -: 1861:	    
        -: 1862:	  return 0;
        -: 1863:}*/
        -: 1864:
        -: 1865:/*int playAmbassador(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos)
        -: 1866:{ 
        -: 1867:	int i;
        -: 1868:    int j = 0;		//used to check if player has enough cards to discard
        -: 1869:
        -: 1870:      if (choice2 > 2 || choice2 < 0)
        -: 1871:	{
        -: 1872:	  return -1;				
        -: 1873:	}
        -: 1874:
        -: 1875:      if (choice1 == handPos)
        -: 1876:	{
        -: 1877:	  return -1;
        -: 1878:	}
        -: 1879:
        -: 1880:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1881:	{
        -: 1882:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1883:	    {
        -: 1884:	      j++;
        -: 1885:	    }
        -: 1886:	}
        -: 1887:      if (j < choice2)
        -: 1888:	{
        -: 1889:	  return -1;				
        -: 1890:	}
        -: 1891:
        -: 1892:      if (DEBUG) 
        -: 1893:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1894:
        -: 1895:      //increase supply count for choosen card by amount being discarded
        -: 1896:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1897:			
        -: 1898:      //each other player gains a copy of revealed card
        -: 1899:      for (i = 0; i < state->numPlayers; i++)
        -: 1900:	{
        -: 1901:	  if (i != currentPlayer)
        -: 1902:	    {
        -: 1903:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1904:	    }
        -: 1905:	}
        -: 1906:
        -: 1907:      //discard played card from hand
        -: 1908:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1909:
        -: 1910:      //trash copies of cards returned to supply
        -: 1911:      for (j = 0; j < choice2; j++)
        -: 1912:	{
        -: 1913:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1914:	    {
        -: 1915:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1916:		{
        -: 1917:		  discardCard(i, currentPlayer, state, 1);
        -: 1918:		  break;
        -: 1919:		}
        -: 1920:	    }
        -: 1921:	}			
        -: 1922:
        -: 1923:      return 0;
        -: 1924:}*/
        -: 1925:
        -: 1926:/*int playCutpurse(int currentPlayer, struct gameState *state, int handPos)
        -: 1927:{	
        -: 1928:	int i, j, k;
        -: 1929:	  updateCoins(currentPlayer, state, 2);
        -: 1930:	  for (i = 0; i < state->numPlayers; i++)
        -: 1931:	{
        -: 1932:	  if (i != currentPlayer)
        -: 1933:	    {
        -: 1934:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1935:		{
        -: 1936:		  if (state->hand[i][j] == copper)
        -: 1937:		    {
        -: 1938:		      discardCard(j, i, state, 0);
        -: 1939:		      break;
        -: 1940:		    }
        -: 1941:		  if (j == state->handCount[i])
        -: 1942:		    {
        -: 1943:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1944:			{
        -: 1945:			  if (DEBUG)
        -: 1946:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1947:			}	
        -: 1948:		      break;
        -: 1949:		    }		
        -: 1950:		}
        -: 1951:					
        -: 1952:	    }
        -: 1953:				
        -: 1954:	}				
        -: 1955:
        -: 1956:  //discard played card from hand
        -: 1957:  discardCard(handPos, currentPlayer, state, 0);			
        -: 1958:
        -: 1959:  return 0;
        -: 1960:}*/
        -: 1961:
        -: 1962: /*int playEmbargo(int currentPlayer, struct gameState *state, int handPos, int choice1)
        -: 1963:{ 
        -: 1964: 	//+2 Coins
        -: 1965:     state->coins = state->coins + 2;
        -: 1966:			
        -: 1967:      //see if selected pile is in play
        -: 1968:      if ( state->supplyCount[choice1] == -1 )
        -: 1969:	{
        -: 1970:	  return -1;
        -: 1971:	}
        -: 1972:			
        -: 1973:      //add embargo token to selected supply pile
        -: 1974:      state->embargoTokens[choice1]++;
        -: 1975:			
        -: 1976:      //trash card
        -: 1977:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1978:      return 0;
        -: 1979: }*/
        -: 1980:
        -: 1981:/*int playOutpost(int currentPlayer, struct gameState *state, int handPos)
        -: 1982:{
        -: 1983: //set outpost flag
        -: 1984:  state->outpostPlayed++;
        -: 1985:		
        -: 1986:  //discard card
        -: 1987:  discardCard(handPos, currentPlayer, state, 0);
        -: 1988:  return 0;
        -: 1989:}*/
        -: 1990:
        -: 1991:/*int playSalvager(int currentPlayer, struct gameState *state, int handPos, int choice1)
        -: 1992:{
        -: 1993:	//+1 buy
        -: 1994:	  state->numBuys++;
        -: 1995:			
        -: 1996:	  if (choice1)
        -: 1997:	{
        -: 1998:	  //gain coins equal to trashed card
        -: 1999:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 2000:	  //trash card
        -: 2001:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 2002:	}
        -: 2003:			
        -: 2004:	  //discard card
        -: 2005:	  discardCard(handPos, currentPlayer, state, 0);
        -: 2006:	  return 0;
        -: 2007:}*/
        -: 2008:
function playSeaHag called 0 returned 0% blocks executed 0%
        -: 2009:int playSeaHag(int currentPlayer, struct gameState *state)
        -: 2010:{
        -: 2011:  	int i;
    #####: 2012:  	 for (i = 0; i < state->numPlayers+1; i++){ //INCORRECT - SHOULD BE i < state->numPlayers. THIS IS A BUG
branch  0 never executed
branch  1 never executed
    #####: 2013:		if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 2014:		  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
    #####: 2015:		  state->deckCount[i]--;
    #####: 2016:		  state->discardCount[i]++;
    #####: 2017:		  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 2018:		}
    #####: 2019:	  }
    #####: 2020:	return 0;
        -: 2021:}
        -: 2022:
        -: 2023:/*int playTreasureMap(int currentPlayer, struct gameState *state, int handPos)
        -: 2024:{
        -: 2025:	int i, index;
        -: 2026:      //search hand for another treasure_map
        -: 2027:      index = -1;
        -: 2028:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 2029:	{
        -: 2030:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 2031:	    {
        -: 2032:	      index = i;
        -: 2033:	      break;
        -: 2034:	    }
        -: 2035:	}
        -: 2036:      if (index > -1)
        -: 2037:	{
        -: 2038:	  //trash both treasure cards
        -: 2039:	  discardCard(handPos, currentPlayer, state, 1);
        -: 2040:	  discardCard(index, currentPlayer, state, 1);
        -: 2041:
        -: 2042:	  //gain 4 Gold cards
        -: 2043:	  for (i = 0; i < 4; i++)
        -: 2044:	    {
        -: 2045:	      gainCard(gold, state, 1, currentPlayer);
        -: 2046:	    }
        -: 2047:				
        -: 2048:	  //return success
        -: 2049:	  return 1;
        -: 2050:	}
        -: 2051:			
        -: 2052:      //no second treasure_map found in hand
        -: 2053:      return -1;
        -: 2054:}*/
        -: 2055:
        -: 2056://end of dominion.c
        -: 2057:
